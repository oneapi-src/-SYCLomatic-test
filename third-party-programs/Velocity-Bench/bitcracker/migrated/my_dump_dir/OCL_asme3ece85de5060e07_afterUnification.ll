; ------------------------------------------------
; OCL_asme3ece85de5060e07_afterUnification.ll
; ------------------------------------------------
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v16:16:16-v24:32:32-v32:32:32-v48:64:64-v64:64:64-v96:128:128-v128:128:128-v192:256:256-v256:256:256-v512:512:512-v1024:1024:1024-n8:16:32"
target triple = "spir64-unknown-unknown"

; Function Attrs: convergent nounwind
define spir_kernel void @_ZTSZ16evaluate_w_blockPhPjRdEUlN4sycl3_V17nd_itemILi3EEEE_(i8 addrspace(1)* %0, i8 addrspace(1)* %1, i32 addrspace(1)* %2, <8 x i32> %r0, <8 x i32> %payloadHeader, <3 x i32> %numWorkGroups, <3 x i32> %globalSize, <3 x i32> %localSize, <3 x i32> %enqueuedLocalSize, i16 %localIdX, i16 %localIdY, i16 %localIdZ, i8* %privateBase, i32 %bufferOffset, i32 %bufferOffset1, i32 %bufferOffset2) #0 {
  %scalar34 = extractelement <8 x i32> %r0, i32 0
  %scalar35 = extractelement <8 x i32> %r0, i32 1
  %scalar36 = extractelement <8 x i32> %r0, i32 2
  %scalar37 = extractelement <8 x i32> %r0, i32 3
  %scalar38 = extractelement <8 x i32> %r0, i32 4
  %scalar39 = extractelement <8 x i32> %r0, i32 5
  %scalar40 = extractelement <8 x i32> %r0, i32 6
  %scalar41 = extractelement <8 x i32> %r0, i32 7
  %scalar = extractelement <3 x i32> %localSize, i32 0
  %scalar32 = extractelement <3 x i32> %localSize, i32 1
  %scalar33 = extractelement <3 x i32> %localSize, i32 2
  %4 = alloca [64 x i8], align 1
  %conv.i47 = zext i32 %scalar to i64
  %conv.i.i92 = zext i32 %scalar35 to i64
  %conv.i.i183 = zext i16 %localIdX to i64
  %5 = icmp sgt i32 %scalar35, -1
  call void @llvm.assume(i1 %5) #4
  %6 = icmp sgt i32 %scalar, -1
  call void @llvm.assume(i1 %6) #4
  %7 = mul nuw nsw i64 %conv.i.i92, %conv.i47
  %8 = add nuw nsw i64 %7, %conv.i.i183
  %9 = and i64 %8, 4293918720
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %_Z14kernel_w_blockPhS_PjRKN4sycl3_V17nd_itemILi3EEE.exit

11:                                               ; preds = %3
  %12 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %12) #4
  br label %13

13:                                               ; preds = %16, %11
  %14 = phi i32 [ 0, %11 ], [ %21, %16 ]
  %15 = icmp ult i32 %14, 16
  br i1 %15, label %16, label %.preheader.i

.preheader.i:                                     ; preds = %13
  br label %22

16:                                               ; preds = %13
  %17 = zext i32 %14 to i64
  %18 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 %17
  %19 = load i8, i8 addrspace(1)* %18, align 1
  %20 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 %17
  store i8 %19, i8* %20, align 1
  %21 = add nuw nsw i32 %14, 1
  br label %13

22:                                               ; preds = %25, %.preheader.i
  %23 = phi i32 [ %32, %25 ], [ 0, %.preheader.i ]
  %24 = icmp ult i32 %23, 40
  br i1 %24, label %25, label %33

25:                                               ; preds = %22
  %26 = zext i32 %23 to i64
  %27 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 %26
  %28 = load i8, i8 addrspace(1)* %27, align 1
  %29 = add nuw nsw i32 %23, 24
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 %30
  store i8 %28, i8* %31, align 1
  %32 = add nuw nsw i32 %23, 1
  br label %22

33:                                               ; preds = %22
  %34 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 20
  %35 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 21
  %36 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 22
  %37 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 23
  %38 = shl i64 %8, 6
  %39 = and i64 %38, 4294967232
  %40 = load i8, i8* %12, align 1
  %41 = zext i8 %40 to i32
  %42 = shl nuw i32 %41, 24
  %43 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 1
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = shl nuw nsw i32 %45, 16
  %47 = or i32 %42, %46
  %48 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 2
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = shl nuw nsw i32 %50, 8
  %52 = or i32 %47, %51
  %53 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 3
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = or i32 %52, %55
  %57 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %39
  store i32 %56, i32 addrspace(1)* %57, align 4
  %58 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 4
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = shl nuw i32 %60, 24
  %62 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 5
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = shl nuw nsw i32 %64, 16
  %66 = or i32 %61, %65
  %67 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 6
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = shl nuw nsw i32 %69, 8
  %71 = or i32 %66, %70
  %72 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 7
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = or i32 %71, %74
  %76 = or i64 %39, 1
  %77 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %76
  store i32 %75, i32 addrspace(1)* %77, align 4
  %78 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 8
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = shl nuw i32 %80, 24
  %82 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 9
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = shl nuw nsw i32 %84, 16
  %86 = or i32 %81, %85
  %87 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 10
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = shl nuw nsw i32 %89, 8
  %91 = or i32 %86, %90
  %92 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 11
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = or i32 %91, %94
  %96 = or i64 %39, 2
  %97 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %96
  store i32 %95, i32 addrspace(1)* %97, align 4
  %98 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 12
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = shl nuw i32 %100, 24
  %102 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 13
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = shl nuw nsw i32 %104, 16
  %106 = or i32 %101, %105
  %107 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 14
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = shl nuw nsw i32 %109, 8
  %111 = or i32 %106, %110
  %112 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 15
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = or i32 %111, %114
  %116 = or i64 %39, 3
  %117 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %116
  store i32 %115, i32 addrspace(1)* %117, align 4
  %118 = trunc i64 %8 to i32
  %bswap.4.i.i = shl i32 %118, 24
  %bswap.3.i.i = shl i32 %118, 8
  %bswap.2.i.i = lshr i32 %118, 8
  %bswap.and3.i.i = and i32 %bswap.3.i.i, 16711680
  %bswap.and2.i.i = and i32 %bswap.2.i.i, 65280
  %bswap.or1.i.i = or i32 %bswap.4.i.i, %bswap.and3.i.i
  %bswap.i32.i.i = or i32 %bswap.or1.i.i, %bswap.and2.i.i
  %119 = or i64 %39, 4
  %120 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %119
  store i32 %bswap.i32.i.i, i32 addrspace(1)* %120, align 4
  %121 = load i8, i8* %34, align 1
  %122 = zext i8 %121 to i32
  %123 = shl nuw i32 %122, 24
  %124 = load i8, i8* %35, align 1
  %125 = zext i8 %124 to i32
  %126 = shl nuw nsw i32 %125, 16
  %127 = or i32 %123, %126
  %128 = load i8, i8* %36, align 1
  %129 = zext i8 %128 to i32
  %130 = shl nuw nsw i32 %129, 8
  %131 = or i32 %127, %130
  %132 = load i8, i8* %37, align 1
  %133 = zext i8 %132 to i32
  %134 = or i32 %131, %133
  %135 = or i64 %39, 5
  %136 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %135
  store i32 %134, i32 addrspace(1)* %136, align 4
  %137 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 24
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = shl nuw i32 %139, 24
  %141 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 25
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  %144 = shl nuw nsw i32 %143, 16
  %145 = or i32 %140, %144
  %146 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 26
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i32
  %149 = shl nuw nsw i32 %148, 8
  %150 = or i32 %145, %149
  %151 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 27
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i32
  %154 = or i32 %150, %153
  %155 = or i64 %39, 6
  %156 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %155
  store i32 %154, i32 addrspace(1)* %156, align 4
  %157 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 28
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = shl nuw i32 %159, 24
  %161 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 29
  %162 = load i8, i8* %161, align 1
  %163 = zext i8 %162 to i32
  %164 = shl nuw nsw i32 %163, 16
  %165 = or i32 %160, %164
  %166 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 30
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i32
  %169 = shl nuw nsw i32 %168, 8
  %170 = or i32 %165, %169
  %171 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 31
  %172 = load i8, i8* %171, align 1
  %173 = zext i8 %172 to i32
  %174 = or i32 %170, %173
  %175 = or i64 %39, 7
  %176 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %175
  store i32 %174, i32 addrspace(1)* %176, align 4
  %177 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 32
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i32
  %180 = shl nuw i32 %179, 24
  %181 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 33
  %182 = load i8, i8* %181, align 1
  %183 = zext i8 %182 to i32
  %184 = shl nuw nsw i32 %183, 16
  %185 = or i32 %180, %184
  %186 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 34
  %187 = load i8, i8* %186, align 1
  %188 = zext i8 %187 to i32
  %189 = shl nuw nsw i32 %188, 8
  %190 = or i32 %185, %189
  %191 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 35
  %192 = load i8, i8* %191, align 1
  %193 = zext i8 %192 to i32
  %194 = or i32 %190, %193
  %195 = or i64 %39, 8
  %196 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %195
  store i32 %194, i32 addrspace(1)* %196, align 4
  %197 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 36
  %198 = load i8, i8* %197, align 1
  %199 = zext i8 %198 to i32
  %200 = shl nuw i32 %199, 24
  %201 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 37
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i32
  %204 = shl nuw nsw i32 %203, 16
  %205 = or i32 %200, %204
  %206 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 38
  %207 = load i8, i8* %206, align 1
  %208 = zext i8 %207 to i32
  %209 = shl nuw nsw i32 %208, 8
  %210 = or i32 %205, %209
  %211 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 39
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i32
  %214 = or i32 %210, %213
  %215 = or i64 %39, 9
  %216 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %215
  store i32 %214, i32 addrspace(1)* %216, align 4
  %217 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 40
  %218 = load i8, i8* %217, align 1
  %219 = zext i8 %218 to i32
  %220 = shl nuw i32 %219, 24
  %221 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 41
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i32
  %224 = shl nuw nsw i32 %223, 16
  %225 = or i32 %220, %224
  %226 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 42
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i32
  %229 = shl nuw nsw i32 %228, 8
  %230 = or i32 %225, %229
  %231 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 43
  %232 = load i8, i8* %231, align 1
  %233 = zext i8 %232 to i32
  %234 = or i32 %230, %233
  %235 = or i64 %39, 10
  %236 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %235
  store i32 %234, i32 addrspace(1)* %236, align 4
  %237 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 44
  %238 = load i8, i8* %237, align 1
  %239 = zext i8 %238 to i32
  %240 = shl nuw i32 %239, 24
  %241 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 45
  %242 = load i8, i8* %241, align 1
  %243 = zext i8 %242 to i32
  %244 = shl nuw nsw i32 %243, 16
  %245 = or i32 %240, %244
  %246 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 46
  %247 = load i8, i8* %246, align 1
  %248 = zext i8 %247 to i32
  %249 = shl nuw nsw i32 %248, 8
  %250 = or i32 %245, %249
  %251 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 47
  %252 = load i8, i8* %251, align 1
  %253 = zext i8 %252 to i32
  %254 = or i32 %250, %253
  %255 = or i64 %39, 11
  %256 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %255
  store i32 %254, i32 addrspace(1)* %256, align 4
  %257 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 48
  %258 = load i8, i8* %257, align 1
  %259 = zext i8 %258 to i32
  %260 = shl nuw i32 %259, 24
  %261 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 49
  %262 = load i8, i8* %261, align 1
  %263 = zext i8 %262 to i32
  %264 = shl nuw nsw i32 %263, 16
  %265 = or i32 %260, %264
  %266 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 50
  %267 = load i8, i8* %266, align 1
  %268 = zext i8 %267 to i32
  %269 = shl nuw nsw i32 %268, 8
  %270 = or i32 %265, %269
  %271 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 51
  %272 = load i8, i8* %271, align 1
  %273 = zext i8 %272 to i32
  %274 = or i32 %270, %273
  %275 = or i64 %39, 12
  %276 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %275
  store i32 %274, i32 addrspace(1)* %276, align 4
  %277 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 52
  %278 = load i8, i8* %277, align 1
  %279 = zext i8 %278 to i32
  %280 = shl nuw i32 %279, 24
  %281 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 53
  %282 = load i8, i8* %281, align 1
  %283 = zext i8 %282 to i32
  %284 = shl nuw nsw i32 %283, 16
  %285 = or i32 %280, %284
  %286 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 54
  %287 = load i8, i8* %286, align 1
  %288 = zext i8 %287 to i32
  %289 = shl nuw nsw i32 %288, 8
  %290 = or i32 %285, %289
  %291 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 55
  %292 = load i8, i8* %291, align 1
  %293 = zext i8 %292 to i32
  %294 = or i32 %290, %293
  %295 = or i64 %39, 13
  %296 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %295
  store i32 %294, i32 addrspace(1)* %296, align 4
  %297 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 56
  %298 = load i8, i8* %297, align 1
  %299 = zext i8 %298 to i32
  %300 = shl nuw i32 %299, 24
  %301 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 57
  %302 = load i8, i8* %301, align 1
  %303 = zext i8 %302 to i32
  %304 = shl nuw nsw i32 %303, 16
  %305 = or i32 %300, %304
  %306 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 58
  %307 = load i8, i8* %306, align 1
  %308 = zext i8 %307 to i32
  %309 = shl nuw nsw i32 %308, 8
  %310 = or i32 %305, %309
  %311 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 59
  %312 = load i8, i8* %311, align 1
  %313 = zext i8 %312 to i32
  %314 = or i32 %310, %313
  %315 = or i64 %39, 14
  %316 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %315
  store i32 %314, i32 addrspace(1)* %316, align 4
  %317 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 60
  %318 = load i8, i8* %317, align 1
  %319 = zext i8 %318 to i32
  %320 = shl nuw i32 %319, 24
  %321 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 61
  %322 = load i8, i8* %321, align 1
  %323 = zext i8 %322 to i32
  %324 = shl nuw nsw i32 %323, 16
  %325 = or i32 %320, %324
  %326 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 62
  %327 = load i8, i8* %326, align 1
  %328 = zext i8 %327 to i32
  %329 = shl nuw nsw i32 %328, 8
  %330 = or i32 %325, %329
  %331 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 63
  %332 = load i8, i8* %331, align 1
  %333 = zext i8 %332 to i32
  %334 = or i32 %330, %333
  %335 = or i64 %39, 15
  %336 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %335
  store i32 %334, i32 addrspace(1)* %336, align 4
  %337 = or i64 %39, 16
  %338 = add i32 %56, %214
  %339 = shl i32 %74, 25
  %340 = lshr i32 %75, 7
  %341 = or i32 %339, %340
  %342 = shl i32 %75, 14
  %343 = lshr i32 %66, 18
  %344 = or i32 %342, %343
  %345 = xor i32 %341, %344
  %346 = lshr i32 %75, 3
  %347 = xor i32 %345, %346
  %348 = add i32 %338, %347
  %349 = shl i32 %314, 15
  %350 = lshr i32 %305, 17
  %351 = or i32 %349, %350
  %352 = shl i32 %314, 13
  %353 = lshr i32 %305, 19
  %354 = or i32 %352, %353
  %355 = xor i32 %351, %354
  %356 = lshr i32 %310, 10
  %357 = xor i32 %355, %356
  %358 = add i32 %348, %357
  %359 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %337
  store i32 %358, i32 addrspace(1)* %359, align 4
  %360 = or i64 %39, 17
  %361 = add i32 %75, %234
  %362 = shl i32 %94, 25
  %363 = lshr i32 %95, 7
  %364 = or i32 %362, %363
  %365 = shl i32 %95, 14
  %366 = lshr i32 %86, 18
  %367 = or i32 %365, %366
  %368 = xor i32 %364, %367
  %369 = lshr i32 %95, 3
  %370 = xor i32 %368, %369
  %371 = add i32 %361, %370
  %372 = shl i32 %334, 15
  %373 = lshr i32 %325, 17
  %374 = or i32 %372, %373
  %375 = shl i32 %334, 13
  %376 = lshr i32 %325, 19
  %377 = or i32 %375, %376
  %378 = xor i32 %374, %377
  %379 = lshr i32 %330, 10
  %380 = xor i32 %378, %379
  %381 = add i32 %371, %380
  %382 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %360
  store i32 %381, i32 addrspace(1)* %382, align 4
  %383 = or i64 %39, 18
  %384 = add i32 %95, %254
  %385 = shl i32 %114, 25
  %386 = lshr i32 %115, 7
  %387 = or i32 %385, %386
  %388 = shl i32 %115, 14
  %389 = lshr i32 %106, 18
  %390 = or i32 %388, %389
  %391 = xor i32 %387, %390
  %392 = lshr i32 %115, 3
  %393 = xor i32 %391, %392
  %394 = add i32 %384, %393
  %395 = shl i32 %358, 15
  %396 = lshr i32 %358, 17
  %397 = or i32 %395, %396
  %398 = shl i32 %358, 13
  %399 = lshr i32 %358, 19
  %400 = or i32 %398, %399
  %401 = xor i32 %397, %400
  %402 = lshr i32 %358, 10
  %403 = xor i32 %401, %402
  %404 = add i32 %394, %403
  %405 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %383
  store i32 %404, i32 addrspace(1)* %405, align 4
  %406 = or i64 %39, 19
  %407 = add i32 %115, %274
  %408 = lshr exact i32 %bswap.i32.i.i, 7
  %409 = shl i32 %bswap.i32.i.i, 14
  %410 = lshr i32 %bswap.or1.i.i, 18
  %411 = or i32 %409, %410
  %412 = xor i32 %408, %411
  %413 = lshr exact i32 %bswap.i32.i.i, 3
  %414 = xor i32 %412, %413
  %415 = add i32 %407, %414
  %416 = shl i32 %381, 15
  %417 = lshr i32 %381, 17
  %418 = or i32 %416, %417
  %419 = shl i32 %381, 13
  %420 = lshr i32 %381, 19
  %421 = or i32 %419, %420
  %422 = xor i32 %418, %421
  %423 = lshr i32 %381, 10
  %424 = xor i32 %422, %423
  %425 = add i32 %415, %424
  %426 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %406
  store i32 %425, i32 addrspace(1)* %426, align 4
  %427 = or i64 %39, 20
  %428 = add i32 %bswap.i32.i.i, %294
  %429 = shl i32 %133, 25
  %430 = lshr i32 %134, 7
  %431 = or i32 %429, %430
  %432 = shl i32 %134, 14
  %433 = lshr i32 %127, 18
  %434 = or i32 %432, %433
  %435 = xor i32 %431, %434
  %436 = lshr i32 %134, 3
  %437 = xor i32 %435, %436
  %438 = add i32 %428, %437
  %439 = shl i32 %404, 15
  %440 = lshr i32 %404, 17
  %441 = or i32 %439, %440
  %442 = shl i32 %404, 13
  %443 = lshr i32 %404, 19
  %444 = or i32 %442, %443
  %445 = xor i32 %441, %444
  %446 = lshr i32 %404, 10
  %447 = xor i32 %445, %446
  %448 = add i32 %438, %447
  %449 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %427
  store i32 %448, i32 addrspace(1)* %449, align 4
  %450 = or i64 %39, 21
  %451 = add i32 %134, %314
  %452 = shl i32 %153, 25
  %453 = lshr i32 %154, 7
  %454 = or i32 %452, %453
  %455 = shl i32 %154, 14
  %456 = lshr i32 %145, 18
  %457 = or i32 %455, %456
  %458 = xor i32 %454, %457
  %459 = lshr i32 %154, 3
  %460 = xor i32 %458, %459
  %461 = add i32 %451, %460
  %462 = shl i32 %425, 15
  %463 = lshr i32 %425, 17
  %464 = or i32 %462, %463
  %465 = shl i32 %425, 13
  %466 = lshr i32 %425, 19
  %467 = or i32 %465, %466
  %468 = xor i32 %464, %467
  %469 = lshr i32 %425, 10
  %470 = xor i32 %468, %469
  %471 = add i32 %461, %470
  %472 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %450
  store i32 %471, i32 addrspace(1)* %472, align 4
  %473 = or i64 %39, 22
  %474 = add i32 %154, %334
  %475 = shl i32 %173, 25
  %476 = lshr i32 %174, 7
  %477 = or i32 %475, %476
  %478 = shl i32 %174, 14
  %479 = lshr i32 %165, 18
  %480 = or i32 %478, %479
  %481 = xor i32 %477, %480
  %482 = lshr i32 %174, 3
  %483 = xor i32 %481, %482
  %484 = add i32 %474, %483
  %485 = shl i32 %448, 15
  %486 = lshr i32 %448, 17
  %487 = or i32 %485, %486
  %488 = shl i32 %448, 13
  %489 = lshr i32 %448, 19
  %490 = or i32 %488, %489
  %491 = xor i32 %487, %490
  %492 = lshr i32 %448, 10
  %493 = xor i32 %491, %492
  %494 = add i32 %484, %493
  %495 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %473
  store i32 %494, i32 addrspace(1)* %495, align 4
  %496 = or i64 %39, 23
  %497 = add i32 %174, %358
  %498 = shl i32 %193, 25
  %499 = lshr i32 %194, 7
  %500 = or i32 %498, %499
  %501 = shl i32 %194, 14
  %502 = lshr i32 %185, 18
  %503 = or i32 %501, %502
  %504 = xor i32 %500, %503
  %505 = lshr i32 %194, 3
  %506 = xor i32 %504, %505
  %507 = add i32 %497, %506
  %508 = shl i32 %471, 15
  %509 = lshr i32 %471, 17
  %510 = or i32 %508, %509
  %511 = shl i32 %471, 13
  %512 = lshr i32 %471, 19
  %513 = or i32 %511, %512
  %514 = xor i32 %510, %513
  %515 = lshr i32 %471, 10
  %516 = xor i32 %514, %515
  %517 = add i32 %507, %516
  %518 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %496
  store i32 %517, i32 addrspace(1)* %518, align 4
  %519 = or i64 %39, 24
  %520 = add i32 %194, %381
  %521 = shl i32 %213, 25
  %522 = lshr i32 %214, 7
  %523 = or i32 %521, %522
  %524 = shl i32 %214, 14
  %525 = lshr i32 %205, 18
  %526 = or i32 %524, %525
  %527 = xor i32 %523, %526
  %528 = lshr i32 %214, 3
  %529 = xor i32 %527, %528
  %530 = add i32 %520, %529
  %531 = shl i32 %494, 15
  %532 = lshr i32 %494, 17
  %533 = or i32 %531, %532
  %534 = shl i32 %494, 13
  %535 = lshr i32 %494, 19
  %536 = or i32 %534, %535
  %537 = xor i32 %533, %536
  %538 = lshr i32 %494, 10
  %539 = xor i32 %537, %538
  %540 = add i32 %530, %539
  %541 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %519
  store i32 %540, i32 addrspace(1)* %541, align 4
  %542 = or i64 %39, 25
  %543 = add i32 %214, %404
  %544 = shl i32 %233, 25
  %545 = lshr i32 %234, 7
  %546 = or i32 %544, %545
  %547 = shl i32 %234, 14
  %548 = lshr i32 %225, 18
  %549 = or i32 %547, %548
  %550 = xor i32 %546, %549
  %551 = lshr i32 %234, 3
  %552 = xor i32 %550, %551
  %553 = add i32 %543, %552
  %554 = shl i32 %517, 15
  %555 = lshr i32 %517, 17
  %556 = or i32 %554, %555
  %557 = shl i32 %517, 13
  %558 = lshr i32 %517, 19
  %559 = or i32 %557, %558
  %560 = xor i32 %556, %559
  %561 = lshr i32 %517, 10
  %562 = xor i32 %560, %561
  %563 = add i32 %553, %562
  %564 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %542
  store i32 %563, i32 addrspace(1)* %564, align 4
  %565 = or i64 %39, 26
  %566 = add i32 %234, %425
  %567 = shl i32 %253, 25
  %568 = lshr i32 %254, 7
  %569 = or i32 %567, %568
  %570 = shl i32 %254, 14
  %571 = lshr i32 %245, 18
  %572 = or i32 %570, %571
  %573 = xor i32 %569, %572
  %574 = lshr i32 %254, 3
  %575 = xor i32 %573, %574
  %576 = add i32 %566, %575
  %577 = shl i32 %540, 15
  %578 = lshr i32 %540, 17
  %579 = or i32 %577, %578
  %580 = shl i32 %540, 13
  %581 = lshr i32 %540, 19
  %582 = or i32 %580, %581
  %583 = xor i32 %579, %582
  %584 = lshr i32 %540, 10
  %585 = xor i32 %583, %584
  %586 = add i32 %576, %585
  %587 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %565
  store i32 %586, i32 addrspace(1)* %587, align 4
  %588 = or i64 %39, 27
  %589 = add i32 %254, %448
  %590 = shl i32 %273, 25
  %591 = lshr i32 %274, 7
  %592 = or i32 %590, %591
  %593 = shl i32 %274, 14
  %594 = lshr i32 %265, 18
  %595 = or i32 %593, %594
  %596 = xor i32 %592, %595
  %597 = lshr i32 %274, 3
  %598 = xor i32 %596, %597
  %599 = add i32 %589, %598
  %600 = shl i32 %563, 15
  %601 = lshr i32 %563, 17
  %602 = or i32 %600, %601
  %603 = shl i32 %563, 13
  %604 = lshr i32 %563, 19
  %605 = or i32 %603, %604
  %606 = xor i32 %602, %605
  %607 = lshr i32 %563, 10
  %608 = xor i32 %606, %607
  %609 = add i32 %599, %608
  %610 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %588
  store i32 %609, i32 addrspace(1)* %610, align 4
  %611 = or i64 %39, 28
  %612 = add i32 %274, %471
  %613 = shl i32 %293, 25
  %614 = lshr i32 %294, 7
  %615 = or i32 %613, %614
  %616 = shl i32 %294, 14
  %617 = lshr i32 %285, 18
  %618 = or i32 %616, %617
  %619 = xor i32 %615, %618
  %620 = lshr i32 %294, 3
  %621 = xor i32 %619, %620
  %622 = add i32 %612, %621
  %623 = shl i32 %586, 15
  %624 = lshr i32 %586, 17
  %625 = or i32 %623, %624
  %626 = shl i32 %586, 13
  %627 = lshr i32 %586, 19
  %628 = or i32 %626, %627
  %629 = xor i32 %625, %628
  %630 = lshr i32 %586, 10
  %631 = xor i32 %629, %630
  %632 = add i32 %622, %631
  %633 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %611
  store i32 %632, i32 addrspace(1)* %633, align 4
  %634 = or i64 %39, 29
  %635 = add i32 %294, %494
  %636 = shl i32 %313, 25
  %637 = lshr i32 %314, 7
  %638 = or i32 %636, %637
  %639 = shl i32 %314, 14
  %640 = lshr i32 %305, 18
  %641 = or i32 %639, %640
  %642 = xor i32 %638, %641
  %643 = lshr i32 %314, 3
  %644 = xor i32 %642, %643
  %645 = add i32 %635, %644
  %646 = shl i32 %609, 15
  %647 = lshr i32 %609, 17
  %648 = or i32 %646, %647
  %649 = shl i32 %609, 13
  %650 = lshr i32 %609, 19
  %651 = or i32 %649, %650
  %652 = xor i32 %648, %651
  %653 = lshr i32 %609, 10
  %654 = xor i32 %652, %653
  %655 = add i32 %645, %654
  %656 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %634
  store i32 %655, i32 addrspace(1)* %656, align 4
  %657 = or i64 %39, 30
  %658 = add i32 %314, %517
  %659 = shl i32 %333, 25
  %660 = lshr i32 %334, 7
  %661 = or i32 %659, %660
  %662 = shl i32 %334, 14
  %663 = lshr i32 %325, 18
  %664 = or i32 %662, %663
  %665 = xor i32 %661, %664
  %666 = lshr i32 %334, 3
  %667 = xor i32 %665, %666
  %668 = add i32 %658, %667
  %669 = shl i32 %632, 15
  %670 = lshr i32 %632, 17
  %671 = or i32 %669, %670
  %672 = shl i32 %632, 13
  %673 = lshr i32 %632, 19
  %674 = or i32 %672, %673
  %675 = xor i32 %671, %674
  %676 = lshr i32 %632, 10
  %677 = xor i32 %675, %676
  %678 = add i32 %668, %677
  %679 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %657
  store i32 %678, i32 addrspace(1)* %679, align 4
  %680 = or i64 %39, 31
  %681 = add i32 %334, %540
  %682 = shl i32 %358, 25
  %683 = lshr i32 %358, 7
  %684 = or i32 %682, %683
  %685 = shl i32 %358, 14
  %686 = lshr i32 %358, 18
  %687 = or i32 %685, %686
  %688 = xor i32 %684, %687
  %689 = lshr i32 %358, 3
  %690 = xor i32 %688, %689
  %691 = add i32 %681, %690
  %692 = shl i32 %655, 15
  %693 = lshr i32 %655, 17
  %694 = or i32 %692, %693
  %695 = shl i32 %655, 13
  %696 = lshr i32 %655, 19
  %697 = or i32 %695, %696
  %698 = xor i32 %694, %697
  %699 = lshr i32 %655, 10
  %700 = xor i32 %698, %699
  %701 = add i32 %691, %700
  %702 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %680
  store i32 %701, i32 addrspace(1)* %702, align 4
  %703 = or i64 %39, 32
  %704 = add i32 %358, %563
  %705 = shl i32 %381, 25
  %706 = lshr i32 %381, 7
  %707 = or i32 %705, %706
  %708 = shl i32 %381, 14
  %709 = lshr i32 %381, 18
  %710 = or i32 %708, %709
  %711 = xor i32 %707, %710
  %712 = lshr i32 %381, 3
  %713 = xor i32 %711, %712
  %714 = add i32 %704, %713
  %715 = shl i32 %678, 15
  %716 = lshr i32 %678, 17
  %717 = or i32 %715, %716
  %718 = shl i32 %678, 13
  %719 = lshr i32 %678, 19
  %720 = or i32 %718, %719
  %721 = xor i32 %717, %720
  %722 = lshr i32 %678, 10
  %723 = xor i32 %721, %722
  %724 = add i32 %714, %723
  %725 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %703
  store i32 %724, i32 addrspace(1)* %725, align 4
  %726 = or i64 %39, 33
  %727 = add i32 %381, %586
  %728 = shl i32 %404, 25
  %729 = lshr i32 %404, 7
  %730 = or i32 %728, %729
  %731 = shl i32 %404, 14
  %732 = lshr i32 %404, 18
  %733 = or i32 %731, %732
  %734 = xor i32 %730, %733
  %735 = lshr i32 %404, 3
  %736 = xor i32 %734, %735
  %737 = add i32 %727, %736
  %738 = shl i32 %701, 15
  %739 = lshr i32 %701, 17
  %740 = or i32 %738, %739
  %741 = shl i32 %701, 13
  %742 = lshr i32 %701, 19
  %743 = or i32 %741, %742
  %744 = xor i32 %740, %743
  %745 = lshr i32 %701, 10
  %746 = xor i32 %744, %745
  %747 = add i32 %737, %746
  %748 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %726
  store i32 %747, i32 addrspace(1)* %748, align 4
  %749 = or i64 %39, 34
  %750 = add i32 %404, %609
  %751 = shl i32 %425, 25
  %752 = lshr i32 %425, 7
  %753 = or i32 %751, %752
  %754 = shl i32 %425, 14
  %755 = lshr i32 %425, 18
  %756 = or i32 %754, %755
  %757 = xor i32 %753, %756
  %758 = lshr i32 %425, 3
  %759 = xor i32 %757, %758
  %760 = add i32 %750, %759
  %761 = shl i32 %724, 15
  %762 = lshr i32 %724, 17
  %763 = or i32 %761, %762
  %764 = shl i32 %724, 13
  %765 = lshr i32 %724, 19
  %766 = or i32 %764, %765
  %767 = xor i32 %763, %766
  %768 = lshr i32 %724, 10
  %769 = xor i32 %767, %768
  %770 = add i32 %760, %769
  %771 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %749
  store i32 %770, i32 addrspace(1)* %771, align 4
  %772 = or i64 %39, 35
  %773 = add i32 %425, %632
  %774 = shl i32 %448, 25
  %775 = lshr i32 %448, 7
  %776 = or i32 %774, %775
  %777 = shl i32 %448, 14
  %778 = lshr i32 %448, 18
  %779 = or i32 %777, %778
  %780 = xor i32 %776, %779
  %781 = lshr i32 %448, 3
  %782 = xor i32 %780, %781
  %783 = add i32 %773, %782
  %784 = shl i32 %747, 15
  %785 = lshr i32 %747, 17
  %786 = or i32 %784, %785
  %787 = shl i32 %747, 13
  %788 = lshr i32 %747, 19
  %789 = or i32 %787, %788
  %790 = xor i32 %786, %789
  %791 = lshr i32 %747, 10
  %792 = xor i32 %790, %791
  %793 = add i32 %783, %792
  %794 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %772
  store i32 %793, i32 addrspace(1)* %794, align 4
  %795 = or i64 %39, 36
  %796 = add i32 %448, %655
  %797 = shl i32 %471, 25
  %798 = lshr i32 %471, 7
  %799 = or i32 %797, %798
  %800 = shl i32 %471, 14
  %801 = lshr i32 %471, 18
  %802 = or i32 %800, %801
  %803 = xor i32 %799, %802
  %804 = lshr i32 %471, 3
  %805 = xor i32 %803, %804
  %806 = add i32 %796, %805
  %807 = shl i32 %770, 15
  %808 = lshr i32 %770, 17
  %809 = or i32 %807, %808
  %810 = shl i32 %770, 13
  %811 = lshr i32 %770, 19
  %812 = or i32 %810, %811
  %813 = xor i32 %809, %812
  %814 = lshr i32 %770, 10
  %815 = xor i32 %813, %814
  %816 = add i32 %806, %815
  %817 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %795
  store i32 %816, i32 addrspace(1)* %817, align 4
  %818 = or i64 %39, 37
  %819 = add i32 %471, %678
  %820 = shl i32 %494, 25
  %821 = lshr i32 %494, 7
  %822 = or i32 %820, %821
  %823 = shl i32 %494, 14
  %824 = lshr i32 %494, 18
  %825 = or i32 %823, %824
  %826 = xor i32 %822, %825
  %827 = lshr i32 %494, 3
  %828 = xor i32 %826, %827
  %829 = add i32 %819, %828
  %830 = shl i32 %793, 15
  %831 = lshr i32 %793, 17
  %832 = or i32 %830, %831
  %833 = shl i32 %793, 13
  %834 = lshr i32 %793, 19
  %835 = or i32 %833, %834
  %836 = xor i32 %832, %835
  %837 = lshr i32 %793, 10
  %838 = xor i32 %836, %837
  %839 = add i32 %829, %838
  %840 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %818
  store i32 %839, i32 addrspace(1)* %840, align 4
  %841 = or i64 %39, 38
  %842 = add i32 %494, %701
  %843 = shl i32 %517, 25
  %844 = lshr i32 %517, 7
  %845 = or i32 %843, %844
  %846 = shl i32 %517, 14
  %847 = lshr i32 %517, 18
  %848 = or i32 %846, %847
  %849 = xor i32 %845, %848
  %850 = lshr i32 %517, 3
  %851 = xor i32 %849, %850
  %852 = add i32 %842, %851
  %853 = shl i32 %816, 15
  %854 = lshr i32 %816, 17
  %855 = or i32 %853, %854
  %856 = shl i32 %816, 13
  %857 = lshr i32 %816, 19
  %858 = or i32 %856, %857
  %859 = xor i32 %855, %858
  %860 = lshr i32 %816, 10
  %861 = xor i32 %859, %860
  %862 = add i32 %852, %861
  %863 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %841
  store i32 %862, i32 addrspace(1)* %863, align 4
  %864 = or i64 %39, 39
  %865 = add i32 %517, %724
  %866 = shl i32 %540, 25
  %867 = lshr i32 %540, 7
  %868 = or i32 %866, %867
  %869 = shl i32 %540, 14
  %870 = lshr i32 %540, 18
  %871 = or i32 %869, %870
  %872 = xor i32 %868, %871
  %873 = lshr i32 %540, 3
  %874 = xor i32 %872, %873
  %875 = add i32 %865, %874
  %876 = shl i32 %839, 15
  %877 = lshr i32 %839, 17
  %878 = or i32 %876, %877
  %879 = shl i32 %839, 13
  %880 = lshr i32 %839, 19
  %881 = or i32 %879, %880
  %882 = xor i32 %878, %881
  %883 = lshr i32 %839, 10
  %884 = xor i32 %882, %883
  %885 = add i32 %875, %884
  %886 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %864
  store i32 %885, i32 addrspace(1)* %886, align 4
  %887 = or i64 %39, 40
  %888 = add i32 %540, %747
  %889 = shl i32 %563, 25
  %890 = lshr i32 %563, 7
  %891 = or i32 %889, %890
  %892 = shl i32 %563, 14
  %893 = lshr i32 %563, 18
  %894 = or i32 %892, %893
  %895 = xor i32 %891, %894
  %896 = lshr i32 %563, 3
  %897 = xor i32 %895, %896
  %898 = add i32 %888, %897
  %899 = shl i32 %862, 15
  %900 = lshr i32 %862, 17
  %901 = or i32 %899, %900
  %902 = shl i32 %862, 13
  %903 = lshr i32 %862, 19
  %904 = or i32 %902, %903
  %905 = xor i32 %901, %904
  %906 = lshr i32 %862, 10
  %907 = xor i32 %905, %906
  %908 = add i32 %898, %907
  %909 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %887
  store i32 %908, i32 addrspace(1)* %909, align 4
  %910 = or i64 %39, 41
  %911 = add i32 %563, %770
  %912 = shl i32 %586, 25
  %913 = lshr i32 %586, 7
  %914 = or i32 %912, %913
  %915 = shl i32 %586, 14
  %916 = lshr i32 %586, 18
  %917 = or i32 %915, %916
  %918 = xor i32 %914, %917
  %919 = lshr i32 %586, 3
  %920 = xor i32 %918, %919
  %921 = add i32 %911, %920
  %922 = shl i32 %885, 15
  %923 = lshr i32 %885, 17
  %924 = or i32 %922, %923
  %925 = shl i32 %885, 13
  %926 = lshr i32 %885, 19
  %927 = or i32 %925, %926
  %928 = xor i32 %924, %927
  %929 = lshr i32 %885, 10
  %930 = xor i32 %928, %929
  %931 = add i32 %921, %930
  %932 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %910
  store i32 %931, i32 addrspace(1)* %932, align 4
  %933 = or i64 %39, 42
  %934 = add i32 %586, %793
  %935 = shl i32 %609, 25
  %936 = lshr i32 %609, 7
  %937 = or i32 %935, %936
  %938 = shl i32 %609, 14
  %939 = lshr i32 %609, 18
  %940 = or i32 %938, %939
  %941 = xor i32 %937, %940
  %942 = lshr i32 %609, 3
  %943 = xor i32 %941, %942
  %944 = add i32 %934, %943
  %945 = shl i32 %908, 15
  %946 = lshr i32 %908, 17
  %947 = or i32 %945, %946
  %948 = shl i32 %908, 13
  %949 = lshr i32 %908, 19
  %950 = or i32 %948, %949
  %951 = xor i32 %947, %950
  %952 = lshr i32 %908, 10
  %953 = xor i32 %951, %952
  %954 = add i32 %944, %953
  %955 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %933
  store i32 %954, i32 addrspace(1)* %955, align 4
  %956 = or i64 %39, 43
  %957 = add i32 %609, %816
  %958 = shl i32 %632, 25
  %959 = lshr i32 %632, 7
  %960 = or i32 %958, %959
  %961 = shl i32 %632, 14
  %962 = lshr i32 %632, 18
  %963 = or i32 %961, %962
  %964 = xor i32 %960, %963
  %965 = lshr i32 %632, 3
  %966 = xor i32 %964, %965
  %967 = add i32 %957, %966
  %968 = shl i32 %931, 15
  %969 = lshr i32 %931, 17
  %970 = or i32 %968, %969
  %971 = shl i32 %931, 13
  %972 = lshr i32 %931, 19
  %973 = or i32 %971, %972
  %974 = xor i32 %970, %973
  %975 = lshr i32 %931, 10
  %976 = xor i32 %974, %975
  %977 = add i32 %967, %976
  %978 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %956
  store i32 %977, i32 addrspace(1)* %978, align 4
  %979 = or i64 %39, 44
  %980 = add i32 %632, %839
  %981 = shl i32 %655, 25
  %982 = lshr i32 %655, 7
  %983 = or i32 %981, %982
  %984 = shl i32 %655, 14
  %985 = lshr i32 %655, 18
  %986 = or i32 %984, %985
  %987 = xor i32 %983, %986
  %988 = lshr i32 %655, 3
  %989 = xor i32 %987, %988
  %990 = add i32 %980, %989
  %991 = shl i32 %954, 15
  %992 = lshr i32 %954, 17
  %993 = or i32 %991, %992
  %994 = shl i32 %954, 13
  %995 = lshr i32 %954, 19
  %996 = or i32 %994, %995
  %997 = xor i32 %993, %996
  %998 = lshr i32 %954, 10
  %999 = xor i32 %997, %998
  %1000 = add i32 %990, %999
  %1001 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %979
  store i32 %1000, i32 addrspace(1)* %1001, align 4
  %1002 = or i64 %39, 45
  %1003 = add i32 %655, %862
  %1004 = shl i32 %678, 25
  %1005 = lshr i32 %678, 7
  %1006 = or i32 %1004, %1005
  %1007 = shl i32 %678, 14
  %1008 = lshr i32 %678, 18
  %1009 = or i32 %1007, %1008
  %1010 = xor i32 %1006, %1009
  %1011 = lshr i32 %678, 3
  %1012 = xor i32 %1010, %1011
  %1013 = add i32 %1003, %1012
  %1014 = shl i32 %977, 15
  %1015 = lshr i32 %977, 17
  %1016 = or i32 %1014, %1015
  %1017 = shl i32 %977, 13
  %1018 = lshr i32 %977, 19
  %1019 = or i32 %1017, %1018
  %1020 = xor i32 %1016, %1019
  %1021 = lshr i32 %977, 10
  %1022 = xor i32 %1020, %1021
  %1023 = add i32 %1013, %1022
  %1024 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1002
  store i32 %1023, i32 addrspace(1)* %1024, align 4
  %1025 = or i64 %39, 46
  %1026 = add i32 %678, %885
  %1027 = shl i32 %701, 25
  %1028 = lshr i32 %701, 7
  %1029 = or i32 %1027, %1028
  %1030 = shl i32 %701, 14
  %1031 = lshr i32 %701, 18
  %1032 = or i32 %1030, %1031
  %1033 = xor i32 %1029, %1032
  %1034 = lshr i32 %701, 3
  %1035 = xor i32 %1033, %1034
  %1036 = add i32 %1026, %1035
  %1037 = shl i32 %1000, 15
  %1038 = lshr i32 %1000, 17
  %1039 = or i32 %1037, %1038
  %1040 = shl i32 %1000, 13
  %1041 = lshr i32 %1000, 19
  %1042 = or i32 %1040, %1041
  %1043 = xor i32 %1039, %1042
  %1044 = lshr i32 %1000, 10
  %1045 = xor i32 %1043, %1044
  %1046 = add i32 %1036, %1045
  %1047 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1025
  store i32 %1046, i32 addrspace(1)* %1047, align 4
  %1048 = or i64 %39, 47
  %1049 = add i32 %701, %908
  %1050 = shl i32 %724, 25
  %1051 = lshr i32 %724, 7
  %1052 = or i32 %1050, %1051
  %1053 = shl i32 %724, 14
  %1054 = lshr i32 %724, 18
  %1055 = or i32 %1053, %1054
  %1056 = xor i32 %1052, %1055
  %1057 = lshr i32 %724, 3
  %1058 = xor i32 %1056, %1057
  %1059 = add i32 %1049, %1058
  %1060 = shl i32 %1023, 15
  %1061 = lshr i32 %1023, 17
  %1062 = or i32 %1060, %1061
  %1063 = shl i32 %1023, 13
  %1064 = lshr i32 %1023, 19
  %1065 = or i32 %1063, %1064
  %1066 = xor i32 %1062, %1065
  %1067 = lshr i32 %1023, 10
  %1068 = xor i32 %1066, %1067
  %1069 = add i32 %1059, %1068
  %1070 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1048
  store i32 %1069, i32 addrspace(1)* %1070, align 4
  %1071 = or i64 %39, 48
  %1072 = add i32 %724, %931
  %1073 = shl i32 %747, 25
  %1074 = lshr i32 %747, 7
  %1075 = or i32 %1073, %1074
  %1076 = shl i32 %747, 14
  %1077 = lshr i32 %747, 18
  %1078 = or i32 %1076, %1077
  %1079 = xor i32 %1075, %1078
  %1080 = lshr i32 %747, 3
  %1081 = xor i32 %1079, %1080
  %1082 = add i32 %1072, %1081
  %1083 = shl i32 %1046, 15
  %1084 = lshr i32 %1046, 17
  %1085 = or i32 %1083, %1084
  %1086 = shl i32 %1046, 13
  %1087 = lshr i32 %1046, 19
  %1088 = or i32 %1086, %1087
  %1089 = xor i32 %1085, %1088
  %1090 = lshr i32 %1046, 10
  %1091 = xor i32 %1089, %1090
  %1092 = add i32 %1082, %1091
  %1093 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1071
  store i32 %1092, i32 addrspace(1)* %1093, align 4
  %1094 = or i64 %39, 49
  %1095 = add i32 %747, %954
  %1096 = shl i32 %770, 25
  %1097 = lshr i32 %770, 7
  %1098 = or i32 %1096, %1097
  %1099 = shl i32 %770, 14
  %1100 = lshr i32 %770, 18
  %1101 = or i32 %1099, %1100
  %1102 = xor i32 %1098, %1101
  %1103 = lshr i32 %770, 3
  %1104 = xor i32 %1102, %1103
  %1105 = add i32 %1095, %1104
  %1106 = shl i32 %1069, 15
  %1107 = lshr i32 %1069, 17
  %1108 = or i32 %1106, %1107
  %1109 = shl i32 %1069, 13
  %1110 = lshr i32 %1069, 19
  %1111 = or i32 %1109, %1110
  %1112 = xor i32 %1108, %1111
  %1113 = lshr i32 %1069, 10
  %1114 = xor i32 %1112, %1113
  %1115 = add i32 %1105, %1114
  %1116 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1094
  store i32 %1115, i32 addrspace(1)* %1116, align 4
  %1117 = or i64 %39, 50
  %1118 = add i32 %770, %977
  %1119 = shl i32 %793, 25
  %1120 = lshr i32 %793, 7
  %1121 = or i32 %1119, %1120
  %1122 = shl i32 %793, 14
  %1123 = lshr i32 %793, 18
  %1124 = or i32 %1122, %1123
  %1125 = xor i32 %1121, %1124
  %1126 = lshr i32 %793, 3
  %1127 = xor i32 %1125, %1126
  %1128 = add i32 %1118, %1127
  %1129 = shl i32 %1092, 15
  %1130 = lshr i32 %1092, 17
  %1131 = or i32 %1129, %1130
  %1132 = shl i32 %1092, 13
  %1133 = lshr i32 %1092, 19
  %1134 = or i32 %1132, %1133
  %1135 = xor i32 %1131, %1134
  %1136 = lshr i32 %1092, 10
  %1137 = xor i32 %1135, %1136
  %1138 = add i32 %1128, %1137
  %1139 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1117
  store i32 %1138, i32 addrspace(1)* %1139, align 4
  %1140 = or i64 %39, 51
  %1141 = add i32 %793, %1000
  %1142 = shl i32 %816, 25
  %1143 = lshr i32 %816, 7
  %1144 = or i32 %1142, %1143
  %1145 = shl i32 %816, 14
  %1146 = lshr i32 %816, 18
  %1147 = or i32 %1145, %1146
  %1148 = xor i32 %1144, %1147
  %1149 = lshr i32 %816, 3
  %1150 = xor i32 %1148, %1149
  %1151 = add i32 %1141, %1150
  %1152 = shl i32 %1115, 15
  %1153 = lshr i32 %1115, 17
  %1154 = or i32 %1152, %1153
  %1155 = shl i32 %1115, 13
  %1156 = lshr i32 %1115, 19
  %1157 = or i32 %1155, %1156
  %1158 = xor i32 %1154, %1157
  %1159 = lshr i32 %1115, 10
  %1160 = xor i32 %1158, %1159
  %1161 = add i32 %1151, %1160
  %1162 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1140
  store i32 %1161, i32 addrspace(1)* %1162, align 4
  %1163 = or i64 %39, 52
  %1164 = add i32 %816, %1023
  %1165 = shl i32 %839, 25
  %1166 = lshr i32 %839, 7
  %1167 = or i32 %1165, %1166
  %1168 = shl i32 %839, 14
  %1169 = lshr i32 %839, 18
  %1170 = or i32 %1168, %1169
  %1171 = xor i32 %1167, %1170
  %1172 = lshr i32 %839, 3
  %1173 = xor i32 %1171, %1172
  %1174 = add i32 %1164, %1173
  %1175 = shl i32 %1138, 15
  %1176 = lshr i32 %1138, 17
  %1177 = or i32 %1175, %1176
  %1178 = shl i32 %1138, 13
  %1179 = lshr i32 %1138, 19
  %1180 = or i32 %1178, %1179
  %1181 = xor i32 %1177, %1180
  %1182 = lshr i32 %1138, 10
  %1183 = xor i32 %1181, %1182
  %1184 = add i32 %1174, %1183
  %1185 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1163
  store i32 %1184, i32 addrspace(1)* %1185, align 4
  %1186 = or i64 %39, 53
  %1187 = add i32 %839, %1046
  %1188 = shl i32 %862, 25
  %1189 = lshr i32 %862, 7
  %1190 = or i32 %1188, %1189
  %1191 = shl i32 %862, 14
  %1192 = lshr i32 %862, 18
  %1193 = or i32 %1191, %1192
  %1194 = xor i32 %1190, %1193
  %1195 = lshr i32 %862, 3
  %1196 = xor i32 %1194, %1195
  %1197 = add i32 %1187, %1196
  %1198 = shl i32 %1161, 15
  %1199 = lshr i32 %1161, 17
  %1200 = or i32 %1198, %1199
  %1201 = shl i32 %1161, 13
  %1202 = lshr i32 %1161, 19
  %1203 = or i32 %1201, %1202
  %1204 = xor i32 %1200, %1203
  %1205 = lshr i32 %1161, 10
  %1206 = xor i32 %1204, %1205
  %1207 = add i32 %1197, %1206
  %1208 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1186
  store i32 %1207, i32 addrspace(1)* %1208, align 4
  %1209 = or i64 %39, 54
  %1210 = add i32 %862, %1069
  %1211 = shl i32 %885, 25
  %1212 = lshr i32 %885, 7
  %1213 = or i32 %1211, %1212
  %1214 = shl i32 %885, 14
  %1215 = lshr i32 %885, 18
  %1216 = or i32 %1214, %1215
  %1217 = xor i32 %1213, %1216
  %1218 = lshr i32 %885, 3
  %1219 = xor i32 %1217, %1218
  %1220 = add i32 %1210, %1219
  %1221 = shl i32 %1184, 15
  %1222 = lshr i32 %1184, 17
  %1223 = or i32 %1221, %1222
  %1224 = shl i32 %1184, 13
  %1225 = lshr i32 %1184, 19
  %1226 = or i32 %1224, %1225
  %1227 = xor i32 %1223, %1226
  %1228 = lshr i32 %1184, 10
  %1229 = xor i32 %1227, %1228
  %1230 = add i32 %1220, %1229
  %1231 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1209
  store i32 %1230, i32 addrspace(1)* %1231, align 4
  %1232 = or i64 %39, 55
  %1233 = add i32 %885, %1092
  %1234 = shl i32 %908, 25
  %1235 = lshr i32 %908, 7
  %1236 = or i32 %1234, %1235
  %1237 = shl i32 %908, 14
  %1238 = lshr i32 %908, 18
  %1239 = or i32 %1237, %1238
  %1240 = xor i32 %1236, %1239
  %1241 = lshr i32 %908, 3
  %1242 = xor i32 %1240, %1241
  %1243 = add i32 %1233, %1242
  %1244 = shl i32 %1207, 15
  %1245 = lshr i32 %1207, 17
  %1246 = or i32 %1244, %1245
  %1247 = shl i32 %1207, 13
  %1248 = lshr i32 %1207, 19
  %1249 = or i32 %1247, %1248
  %1250 = xor i32 %1246, %1249
  %1251 = lshr i32 %1207, 10
  %1252 = xor i32 %1250, %1251
  %1253 = add i32 %1243, %1252
  %1254 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1232
  store i32 %1253, i32 addrspace(1)* %1254, align 4
  %1255 = or i64 %39, 56
  %1256 = add i32 %908, %1115
  %1257 = shl i32 %931, 25
  %1258 = lshr i32 %931, 7
  %1259 = or i32 %1257, %1258
  %1260 = shl i32 %931, 14
  %1261 = lshr i32 %931, 18
  %1262 = or i32 %1260, %1261
  %1263 = xor i32 %1259, %1262
  %1264 = lshr i32 %931, 3
  %1265 = xor i32 %1263, %1264
  %1266 = add i32 %1256, %1265
  %1267 = shl i32 %1230, 15
  %1268 = lshr i32 %1230, 17
  %1269 = or i32 %1267, %1268
  %1270 = shl i32 %1230, 13
  %1271 = lshr i32 %1230, 19
  %1272 = or i32 %1270, %1271
  %1273 = xor i32 %1269, %1272
  %1274 = lshr i32 %1230, 10
  %1275 = xor i32 %1273, %1274
  %1276 = add i32 %1266, %1275
  %1277 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1255
  store i32 %1276, i32 addrspace(1)* %1277, align 4
  %1278 = or i64 %39, 57
  %1279 = add i32 %931, %1138
  %1280 = shl i32 %954, 25
  %1281 = lshr i32 %954, 7
  %1282 = or i32 %1280, %1281
  %1283 = shl i32 %954, 14
  %1284 = lshr i32 %954, 18
  %1285 = or i32 %1283, %1284
  %1286 = xor i32 %1282, %1285
  %1287 = lshr i32 %954, 3
  %1288 = xor i32 %1286, %1287
  %1289 = add i32 %1279, %1288
  %1290 = shl i32 %1253, 15
  %1291 = lshr i32 %1253, 17
  %1292 = or i32 %1290, %1291
  %1293 = shl i32 %1253, 13
  %1294 = lshr i32 %1253, 19
  %1295 = or i32 %1293, %1294
  %1296 = xor i32 %1292, %1295
  %1297 = lshr i32 %1253, 10
  %1298 = xor i32 %1296, %1297
  %1299 = add i32 %1289, %1298
  %1300 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1278
  store i32 %1299, i32 addrspace(1)* %1300, align 4
  %1301 = or i64 %39, 58
  %1302 = add i32 %954, %1161
  %1303 = shl i32 %977, 25
  %1304 = lshr i32 %977, 7
  %1305 = or i32 %1303, %1304
  %1306 = shl i32 %977, 14
  %1307 = lshr i32 %977, 18
  %1308 = or i32 %1306, %1307
  %1309 = xor i32 %1305, %1308
  %1310 = lshr i32 %977, 3
  %1311 = xor i32 %1309, %1310
  %1312 = add i32 %1302, %1311
  %1313 = shl i32 %1276, 15
  %1314 = lshr i32 %1276, 17
  %1315 = or i32 %1313, %1314
  %1316 = shl i32 %1276, 13
  %1317 = lshr i32 %1276, 19
  %1318 = or i32 %1316, %1317
  %1319 = xor i32 %1315, %1318
  %1320 = lshr i32 %1276, 10
  %1321 = xor i32 %1319, %1320
  %1322 = add i32 %1312, %1321
  %1323 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1301
  store i32 %1322, i32 addrspace(1)* %1323, align 4
  %1324 = or i64 %39, 59
  %1325 = add i32 %977, %1184
  %1326 = shl i32 %1000, 25
  %1327 = lshr i32 %1000, 7
  %1328 = or i32 %1326, %1327
  %1329 = shl i32 %1000, 14
  %1330 = lshr i32 %1000, 18
  %1331 = or i32 %1329, %1330
  %1332 = xor i32 %1328, %1331
  %1333 = lshr i32 %1000, 3
  %1334 = xor i32 %1332, %1333
  %1335 = add i32 %1325, %1334
  %1336 = shl i32 %1299, 15
  %1337 = lshr i32 %1299, 17
  %1338 = or i32 %1336, %1337
  %1339 = shl i32 %1299, 13
  %1340 = lshr i32 %1299, 19
  %1341 = or i32 %1339, %1340
  %1342 = xor i32 %1338, %1341
  %1343 = lshr i32 %1299, 10
  %1344 = xor i32 %1342, %1343
  %1345 = add i32 %1335, %1344
  %1346 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1324
  store i32 %1345, i32 addrspace(1)* %1346, align 4
  %1347 = or i64 %39, 60
  %1348 = add i32 %1000, %1207
  %1349 = shl i32 %1023, 25
  %1350 = lshr i32 %1023, 7
  %1351 = or i32 %1349, %1350
  %1352 = shl i32 %1023, 14
  %1353 = lshr i32 %1023, 18
  %1354 = or i32 %1352, %1353
  %1355 = xor i32 %1351, %1354
  %1356 = lshr i32 %1023, 3
  %1357 = xor i32 %1355, %1356
  %1358 = add i32 %1348, %1357
  %1359 = shl i32 %1322, 15
  %1360 = lshr i32 %1322, 17
  %1361 = or i32 %1359, %1360
  %1362 = shl i32 %1322, 13
  %1363 = lshr i32 %1322, 19
  %1364 = or i32 %1362, %1363
  %1365 = xor i32 %1361, %1364
  %1366 = lshr i32 %1322, 10
  %1367 = xor i32 %1365, %1366
  %1368 = add i32 %1358, %1367
  %1369 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1347
  store i32 %1368, i32 addrspace(1)* %1369, align 4
  %1370 = or i64 %39, 61
  %1371 = add i32 %1023, %1230
  %1372 = shl i32 %1046, 25
  %1373 = lshr i32 %1046, 7
  %1374 = or i32 %1372, %1373
  %1375 = shl i32 %1046, 14
  %1376 = lshr i32 %1046, 18
  %1377 = or i32 %1375, %1376
  %1378 = xor i32 %1374, %1377
  %1379 = lshr i32 %1046, 3
  %1380 = xor i32 %1378, %1379
  %1381 = add i32 %1371, %1380
  %1382 = shl i32 %1345, 15
  %1383 = lshr i32 %1345, 17
  %1384 = or i32 %1382, %1383
  %1385 = shl i32 %1345, 13
  %1386 = lshr i32 %1345, 19
  %1387 = or i32 %1385, %1386
  %1388 = xor i32 %1384, %1387
  %1389 = lshr i32 %1345, 10
  %1390 = xor i32 %1388, %1389
  %1391 = add i32 %1381, %1390
  %1392 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1370
  store i32 %1391, i32 addrspace(1)* %1392, align 4
  %1393 = or i64 %39, 62
  %1394 = add i32 %1046, %1253
  %1395 = shl i32 %1069, 25
  %1396 = lshr i32 %1069, 7
  %1397 = or i32 %1395, %1396
  %1398 = shl i32 %1069, 14
  %1399 = lshr i32 %1069, 18
  %1400 = or i32 %1398, %1399
  %1401 = xor i32 %1397, %1400
  %1402 = lshr i32 %1069, 3
  %1403 = xor i32 %1401, %1402
  %1404 = add i32 %1394, %1403
  %1405 = shl i32 %1368, 15
  %1406 = lshr i32 %1368, 17
  %1407 = or i32 %1405, %1406
  %1408 = shl i32 %1368, 13
  %1409 = lshr i32 %1368, 19
  %1410 = or i32 %1408, %1409
  %1411 = xor i32 %1407, %1410
  %1412 = lshr i32 %1368, 10
  %1413 = xor i32 %1411, %1412
  %1414 = add i32 %1404, %1413
  %1415 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1393
  store i32 %1414, i32 addrspace(1)* %1415, align 4
  %1416 = or i64 %39, 63
  %1417 = add i32 %1069, %1276
  %1418 = shl i32 %1092, 25
  %1419 = lshr i32 %1092, 7
  %1420 = or i32 %1418, %1419
  %1421 = shl i32 %1092, 14
  %1422 = lshr i32 %1092, 18
  %1423 = or i32 %1421, %1422
  %1424 = xor i32 %1420, %1423
  %1425 = lshr i32 %1092, 3
  %1426 = xor i32 %1424, %1425
  %1427 = add i32 %1417, %1426
  %1428 = shl i32 %1391, 15
  %1429 = lshr i32 %1391, 17
  %1430 = or i32 %1428, %1429
  %1431 = shl i32 %1391, 13
  %1432 = lshr i32 %1391, 19
  %1433 = or i32 %1431, %1432
  %1434 = xor i32 %1430, %1433
  %1435 = lshr i32 %1391, 10
  %1436 = xor i32 %1434, %1435
  %1437 = add i32 %1427, %1436
  %1438 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1416
  store i32 %1437, i32 addrspace(1)* %1438, align 4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %12) #4
  br label %_Z14kernel_w_blockPhS_PjRKN4sycl3_V17nd_itemILi3EEE.exit

_Z14kernel_w_blockPhS_PjRKN4sycl3_V17nd_itemILi3EEE.exit: ; preds = %3, %33
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #2

; Function Attrs: convergent nounwind readnone
declare spir_func i32 @__builtin_IB_get_num_groups(i32) local_unnamed_addr #3

; Function Attrs: convergent nounwind readnone
declare spir_func i32 @__builtin_IB_get_local_size(i32) local_unnamed_addr #3

; Function Attrs: convergent nounwind readnone
declare spir_func i32 @__builtin_IB_get_group_id(i32) local_unnamed_addr #3

; Function Attrs: convergent nounwind readnone
declare spir_func i32 @__builtin_IB_get_local_id_x() local_unnamed_addr #3

; Function Attrs: convergent nounwind readnone
declare spir_func i32 @__builtin_IB_get_local_id_y() local_unnamed_addr #3

; Function Attrs: convergent nounwind readnone
declare spir_func i32 @__builtin_IB_get_local_id_z() local_unnamed_addr #3

; Function Attrs: convergent nounwind readnone
declare spir_func i32 @__builtin_IB_get_enqueued_local_size(i32) local_unnamed_addr #3

; Function Attrs: convergent nounwind readnone
declare spir_func i32 @__builtin_IB_get_global_offset(i32) local_unnamed_addr #3

; Function Attrs: convergent nounwind readnone
declare spir_func i32 @__builtin_IB_get_global_size(i32) local_unnamed_addr #3

attributes #0 = { convergent nounwind "less-precise-fpmad"="true" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind willreturn }
attributes #3 = { convergent nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!IGCMetadata = !{!0}
!igc.functions = !{!289}
!opencl.ocl.version = !{!309, !309, !309, !309, !309}
!opencl.spir.version = !{!309, !309, !309, !309, !309}
!llvm.ident = !{!310, !310, !310, !310, !310}
!llvm.module.flags = !{!311}

!0 = !{!"ModuleMD", !1, !2, !62, !161, !191, !207, !222, !232, !234, !235, !248, !249, !250, !251, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !269, !273, !274, !275, !276, !277, !278, !279, !131, !280, !281, !282, !284, !287, !288}
!1 = !{!"isPrecise", i1 false}
!2 = !{!"compOpt", !3, !4, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61}
!3 = !{!"DenormsAreZero", i1 false}
!4 = !{!"CorrectlyRoundedDivSqrt", i1 false}
!5 = !{!"OptDisable", i1 false}
!6 = !{!"MadEnable", i1 true}
!7 = !{!"NoSignedZeros", i1 false}
!8 = !{!"NoNaNs", i1 false}
!9 = !{!"FloatRoundingMode", i32 0}
!10 = !{!"FloatCvtIntRoundingMode", i32 3}
!11 = !{!"VISAPreSchedRPThreshold", i32 0}
!12 = !{!"SetLoopUnrollThreshold", i32 0}
!13 = !{!"UnsafeMathOptimizations", i1 false}
!14 = !{!"FiniteMathOnly", i1 false}
!15 = !{!"FastRelaxedMath", i1 false}
!16 = !{!"DashGSpecified", i1 false}
!17 = !{!"FastCompilation", i1 false}
!18 = !{!"UseScratchSpacePrivateMemory", i1 true}
!19 = !{!"RelaxedBuiltins", i1 false}
!20 = !{!"SubgroupIndependentForwardProgressRequired", i1 true}
!21 = !{!"GreaterThan2GBBufferRequired", i1 true}
!22 = !{!"GreaterThan4GBBufferRequired", i1 false}
!23 = !{!"DisableA64WA", i1 false}
!24 = !{!"ForceEnableA64WA", i1 false}
!25 = !{!"PushConstantsEnable", i1 true}
!26 = !{!"HasPositivePointerOffset", i1 false}
!27 = !{!"HasBufferOffsetArg", i1 true}
!28 = !{!"BufferOffsetArgOptional", i1 true}
!29 = !{!"HasSubDWAlignedPtrArg", i1 false}
!30 = !{!"replaceGlobalOffsetsByZero", i1 false}
!31 = !{!"forcePixelShaderSIMDMode", i32 0}
!32 = !{!"pixelShaderDoNotAbortOnSpill", i1 false}
!33 = !{!"UniformWGS", i1 false}
!34 = !{!"disableVertexComponentPacking", i1 false}
!35 = !{!"disablePartialVertexComponentPacking", i1 false}
!36 = !{!"PreferBindlessImages", i1 false}
!37 = !{!"UseBindlessMode", i1 false}
!38 = !{!"UseLegacyBindlessMode", i1 true}
!39 = !{!"disableMathRefactoring", i1 false}
!40 = !{!"atomicBranch", i1 false}
!41 = !{!"ForceInt32DivRemEmu", i1 false}
!42 = !{!"ForceInt32DivRemEmuSP", i1 false}
!43 = !{!"DisableFastestSingleCSSIMD", i1 false}
!44 = !{!"DisableFastestLinearScan", i1 false}
!45 = !{!"UseStatelessforPrivateMemory", i1 false}
!46 = !{!"EnableTakeGlobalAddress", i1 false}
!47 = !{!"IsLibraryCompilation", i1 false}
!48 = !{!"FastVISACompile", i1 false}
!49 = !{!"MatchSinCosPi", i1 false}
!50 = !{!"ExcludeIRFromZEBinary", i1 false}
!51 = !{!"EmitZeBinVISASections", i1 false}
!52 = !{!"FP64GenEmulationEnabled", i1 false}
!53 = !{!"allowDisableRematforCS", i1 false}
!54 = !{!"DisableIncSpillCostAllAddrTaken", i1 false}
!55 = !{!"DisableCPSOmaskWA", i1 false}
!56 = !{!"DisableFastestGopt", i1 false}
!57 = !{!"WaForceHalfPromotion", i1 false}
!58 = !{!"DisableConstantCoalescing", i1 false}
!59 = !{!"EnableUndefAlphaOutputAsRed", i1 true}
!60 = !{!"WaEnableALTModeVisaWA", i1 false}
!61 = !{!"NewSpillCostFunction", i1 false}
!62 = !{!"FuncMD", !63, !64}
!63 = !{!"FuncMDMap[0]", void (i8 addrspace(1)*, i8 addrspace(1)*, i32 addrspace(1)*, <8 x i32>, <8 x i32>, <3 x i32>, <3 x i32>, <3 x i32>, <3 x i32>, i16, i16, i16, i8*, i32, i32, i32)* @_ZTSZ16evaluate_w_blockPhPjRdEUlN4sycl3_V17nd_itemILi3EEEE_}
!64 = !{!"FuncMDValue[0]", !65, !66, !70, !71, !72, !93, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !142, !146, !150, !154, !158, !159, !160}
!65 = !{!"localOffsets"}
!66 = !{!"workGroupWalkOrder", !67, !68, !69}
!67 = !{!"dim0", i32 0}
!68 = !{!"dim1", i32 0}
!69 = !{!"dim2", i32 0}
!70 = !{!"funcArgs"}
!71 = !{!"functionType", !"KernelFunction"}
!72 = !{!"rtInfo", !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !92}
!73 = !{!"callableShaderType", !"NumberOfCallableShaderTypes"}
!74 = !{!"isContinuation", i1 false}
!75 = !{!"hasTraceRayPayload", i1 false}
!76 = !{!"hasHitAttributes", i1 false}
!77 = !{!"hasCallableData", i1 false}
!78 = !{!"ShaderStackSize", i32 0}
!79 = !{!"ShaderHash", i64 0}
!80 = !{!"ShaderName", !""}
!81 = !{!"ParentName", !""}
!82 = !{!"SlotNum", i1* null}
!83 = !{!"NOSSize", i32 0}
!84 = !{!"globalRootSignatureSize", i32 0}
!85 = !{!"Entries"}
!86 = !{!"SpillUnions"}
!87 = !{!"CustomHitAttrSizeInBytes", i32 0}
!88 = !{!"Types", !89, !90, !91}
!89 = !{!"FrameStartTys"}
!90 = !{!"ArgumentTys"}
!91 = !{!"FullFrameTys"}
!92 = !{!"Aliases"}
!93 = !{!"resAllocMD", !94, !95, !96, !97, !122}
!94 = !{!"uavsNumType", i32 4}
!95 = !{!"srvsNumType", i32 0}
!96 = !{!"samplersNumType", i32 0}
!97 = !{!"argAllocMDList", !98, !102, !104, !106, !109, !110, !111, !112, !113, !114, !115, !116, !117, !119, !120, !121}
!98 = !{!"argAllocMDListVec[0]", !99, !100, !101}
!99 = !{!"type", i32 1}
!100 = !{!"extensionType", i32 -1}
!101 = !{!"indexType", i32 0}
!102 = !{!"argAllocMDListVec[1]", !99, !100, !103}
!103 = !{!"indexType", i32 1}
!104 = !{!"argAllocMDListVec[2]", !99, !100, !105}
!105 = !{!"indexType", i32 2}
!106 = !{!"argAllocMDListVec[3]", !107, !100, !108}
!107 = !{!"type", i32 0}
!108 = !{!"indexType", i32 -1}
!109 = !{!"argAllocMDListVec[4]", !107, !100, !108}
!110 = !{!"argAllocMDListVec[5]", !107, !100, !108}
!111 = !{!"argAllocMDListVec[6]", !107, !100, !108}
!112 = !{!"argAllocMDListVec[7]", !107, !100, !108}
!113 = !{!"argAllocMDListVec[8]", !107, !100, !108}
!114 = !{!"argAllocMDListVec[9]", !107, !100, !108}
!115 = !{!"argAllocMDListVec[10]", !107, !100, !108}
!116 = !{!"argAllocMDListVec[11]", !107, !100, !108}
!117 = !{!"argAllocMDListVec[12]", !99, !100, !118}
!118 = !{!"indexType", i32 3}
!119 = !{!"argAllocMDListVec[13]", !107, !100, !108}
!120 = !{!"argAllocMDListVec[14]", !107, !100, !108}
!121 = !{!"argAllocMDListVec[15]", !107, !100, !108}
!122 = !{!"inlineSamplersMD"}
!123 = !{!"maxByteOffsets"}
!124 = !{!"IsInitializer", i1 false}
!125 = !{!"IsFinalizer", i1 false}
!126 = !{!"CompiledSubGroupsNumber", i32 0}
!127 = !{!"hasInlineVmeSamplers", i1 false}
!128 = !{!"localSize", i32 0}
!129 = !{!"localIDPresent", i1 false}
!130 = !{!"groupIDPresent", i1 false}
!131 = !{!"privateMemoryPerWI", i32 0}
!132 = !{!"globalIDPresent", i1 false}
!133 = !{!"hasSyncRTCalls", i1 false}
!134 = !{!"hasNonKernelArgLoad", i1 false}
!135 = !{!"hasNonKernelArgStore", i1 false}
!136 = !{!"hasNonKernelArgAtomic", i1 false}
!137 = !{!"UserAnnotations"}
!138 = !{!"m_OpenCLArgAddressSpaces", !139, !140, !141}
!139 = !{!"m_OpenCLArgAddressSpacesVec[0]", i32 1}
!140 = !{!"m_OpenCLArgAddressSpacesVec[1]", i32 1}
!141 = !{!"m_OpenCLArgAddressSpacesVec[2]", i32 1}
!142 = !{!"m_OpenCLArgAccessQualifiers", !143, !144, !145}
!143 = !{!"m_OpenCLArgAccessQualifiersVec[0]", !"none"}
!144 = !{!"m_OpenCLArgAccessQualifiersVec[1]", !"none"}
!145 = !{!"m_OpenCLArgAccessQualifiersVec[2]", !"none"}
!146 = !{!"m_OpenCLArgTypes", !147, !148, !149}
!147 = !{!"m_OpenCLArgTypesVec[0]", !"char*"}
!148 = !{!"m_OpenCLArgTypesVec[1]", !"char*"}
!149 = !{!"m_OpenCLArgTypesVec[2]", !"int*"}
!150 = !{!"m_OpenCLArgBaseTypes", !151, !152, !153}
!151 = !{!"m_OpenCLArgBaseTypesVec[0]", !"char*"}
!152 = !{!"m_OpenCLArgBaseTypesVec[1]", !"char*"}
!153 = !{!"m_OpenCLArgBaseTypesVec[2]", !"int*"}
!154 = !{!"m_OpenCLArgTypeQualifiers", !155, !156, !157}
!155 = !{!"m_OpenCLArgTypeQualifiersVec[0]", !""}
!156 = !{!"m_OpenCLArgTypeQualifiersVec[1]", !""}
!157 = !{!"m_OpenCLArgTypeQualifiersVec[2]", !""}
!158 = !{!"m_OpenCLArgNames"}
!159 = !{!"m_OpenCLArgScalarAsPointers"}
!160 = !{!"m_OptsToDisablePerFunc"}
!161 = !{!"pushInfo", !162, !163, !164, !167, !168, !169, !170, !171, !172, !173, !174, !187, !188, !189, !190}
!162 = !{!"pushableAddresses"}
!163 = !{!"bindlessPushInfo"}
!164 = !{!"dynamicBufferInfo", !165, !166}
!165 = !{!"firstIndex", i32 0}
!166 = !{!"numOffsets", i32 0}
!167 = !{!"MaxNumberOfPushedBuffers", i32 0}
!168 = !{!"inlineConstantBufferSlot", i32 -1}
!169 = !{!"inlineConstantBufferOffset", i32 -1}
!170 = !{!"inlineConstantBufferGRFOffset", i32 -1}
!171 = !{!"constants"}
!172 = !{!"inputs"}
!173 = !{!"constantReg"}
!174 = !{!"simplePushInfoArr", !175, !184, !185, !186}
!175 = !{!"simplePushInfoArrVec[0]", !176, !177, !178, !179, !180, !181, !182, !183}
!176 = !{!"cbIdx", i32 0}
!177 = !{!"pushableAddressGrfOffset", i32 -1}
!178 = !{!"pushableOffsetGrfOffset", i32 -1}
!179 = !{!"offset", i32 0}
!180 = !{!"size", i32 0}
!181 = !{!"isStateless", i1 false}
!182 = !{!"isBindless", i1 false}
!183 = !{!"simplePushLoads"}
!184 = !{!"simplePushInfoArrVec[1]", !176, !177, !178, !179, !180, !181, !182, !183}
!185 = !{!"simplePushInfoArrVec[2]", !176, !177, !178, !179, !180, !181, !182, !183}
!186 = !{!"simplePushInfoArrVec[3]", !176, !177, !178, !179, !180, !181, !182, !183}
!187 = !{!"simplePushBufferUsed", i32 0}
!188 = !{!"pushAnalysisWIInfos"}
!189 = !{!"inlineRTGlobalPtrOffset", i32 0}
!190 = !{!"rtSyncSurfPtrOffset", i32 0}
!191 = !{!"psInfo", !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206}
!192 = !{!"BlendStateDisabledMask", i8 0}
!193 = !{!"SkipSrc0Alpha", i1 false}
!194 = !{!"DualSourceBlendingDisabled", i1 false}
!195 = !{!"ForceEnableSimd32", i1 false}
!196 = !{!"outputDepth", i1 false}
!197 = !{!"outputStencil", i1 false}
!198 = !{!"outputMask", i1 false}
!199 = !{!"blendToFillEnabled", i1 false}
!200 = !{!"forceEarlyZ", i1 false}
!201 = !{!"hasVersionedLoop", i1 false}
!202 = !{!"forceSingleSourceRTWAfterDualSourceRTW", i1 false}
!203 = !{!"NumSamples", i8 0}
!204 = !{!"blendOptimizationMode"}
!205 = !{!"colorOutputMask"}
!206 = !{!"WaDisableVRS", i1 false}
!207 = !{!"csInfo", !208, !209, !210, !211, !212, !11, !12, !213, !214, !215, !216, !217, !218, !219, !220, !40, !221}
!208 = !{!"maxWorkGroupSize", i32 0}
!209 = !{!"waveSize", i32 0}
!210 = !{!"ComputeShaderSecondCompile"}
!211 = !{!"forcedSIMDSize", i8 0}
!212 = !{!"forceTotalGRFNum", i32 0}
!213 = !{!"allowLowerSimd", i1 false}
!214 = !{!"disableSimd32Slicing", i1 false}
!215 = !{!"disableSplitOnSpill", i1 false}
!216 = !{!"forcedVISAPreRAScheduler", i1 false}
!217 = !{!"disableLocalIdOrderOptimizations", i1 false}
!218 = !{!"disableDispatchAlongY", i1 false}
!219 = !{!"neededThreadIdLayout", i1* null}
!220 = !{!"forceTileYWalk", i1 false}
!221 = !{!"ResForHfPacking"}
!222 = !{!"msInfo", !223, !224, !225, !226, !227, !228, !229, !230, !231}
!223 = !{!"PrimitiveTopology", i32 3}
!224 = !{!"MaxNumOfPrimitives", i32 0}
!225 = !{!"MaxNumOfVertices", i32 0}
!226 = !{!"MaxNumOfPerPrimitiveOutputs", i32 0}
!227 = !{!"MaxNumOfPerVertexOutputs", i32 0}
!228 = !{!"WorkGroupSize", i32 0}
!229 = !{!"WorkGroupMemorySizeInBytes", i32 0}
!230 = !{!"IndexFormat", i32 6}
!231 = !{!"SubgroupSize", i32 0}
!232 = !{!"taskInfo", !233, !228, !229, !231}
!233 = !{!"MaxNumOfOutputs", i32 0}
!234 = !{!"NBarrierCnt", i32 0}
!235 = !{!"rtInfo", !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247}
!236 = !{!"RayQueryAllocSizeInBytes", i32 0}
!237 = !{!"NumContinuations", i32 0}
!238 = !{!"RTAsyncStackAddrspace", i32 -1}
!239 = !{!"RTAsyncStackSurfaceStateOffset", i1* null}
!240 = !{!"SWHotZoneAddrspace", i32 -1}
!241 = !{!"SWHotZoneSurfaceStateOffset", i1* null}
!242 = !{!"SWStackAddrspace", i32 -1}
!243 = !{!"SWStackSurfaceStateOffset", i1* null}
!244 = !{!"RTSyncStackAddrspace", i32 -1}
!245 = !{!"RTSyncStackSurfaceStateOffset", i1* null}
!246 = !{!"doSyncDispatchRays", i1 false}
!247 = !{!"MemStyle", !"Xe"}
!248 = !{!"CurUniqueIndirectIdx", i32 0}
!249 = !{!"inlineDynTextures"}
!250 = !{!"inlineResInfoData"}
!251 = !{!"immConstant", !252, !253, !254}
!252 = !{!"data"}
!253 = !{!"sizes"}
!254 = !{!"zeroIdxs"}
!255 = !{!"stringConstants"}
!256 = !{!"inlineConstantBuffers"}
!257 = !{!"inlineGlobalBuffers"}
!258 = !{!"GlobalPointerProgramBinaryInfos"}
!259 = !{!"ConstantPointerProgramBinaryInfos"}
!260 = !{!"GlobalBufferAddressRelocInfo"}
!261 = !{!"ConstantBufferAddressRelocInfo"}
!262 = !{!"forceLscCacheList"}
!263 = !{!"SrvMap"}
!264 = !{!"RasterizerOrderedByteAddressBuffer"}
!265 = !{!"MinNOSPushConstantSize", i32 0}
!266 = !{!"inlineProgramScopeOffsets"}
!267 = !{!"shaderData", !268}
!268 = !{!"numReplicas", i32 0}
!269 = !{!"URBInfo", !270, !271, !272}
!270 = !{!"has64BVertexHeaderInput", i1 false}
!271 = !{!"has64BVertexHeaderOutput", i1 false}
!272 = !{!"hasVertexHeader", i1 true}
!273 = !{!"UseBindlessImage", i1 false}
!274 = !{!"enableRangeReduce", i1 false}
!275 = !{!"allowMatchMadOptimizationforVS", i1 false}
!276 = !{!"disableMemOptforNegativeOffsetLoads", i1 false}
!277 = !{!"enableThreeWayLoadSpiltOpt", i1 false}
!278 = !{!"statefulResourcesNotAliased", i1 false}
!279 = !{!"disableMixMode", i1 false}
!280 = !{!"PrivateMemoryPerFG"}
!281 = !{!"m_OptsToDisable"}
!282 = !{!"capabilities", !283}
!283 = !{!"globalVariableDecorationsINTEL", i1 false}
!284 = !{!"m_ShaderResourceViewMcsMask", !285, !286}
!285 = !{!"m_ShaderResourceViewMcsMaskVec[0]", i64 0}
!286 = !{!"m_ShaderResourceViewMcsMaskVec[1]", i64 0}
!287 = !{!"computedDepthMode", i32 0}
!288 = !{!"isHDCFastClearShader", i1 false}
!289 = !{void (i8 addrspace(1)*, i8 addrspace(1)*, i32 addrspace(1)*, <8 x i32>, <8 x i32>, <3 x i32>, <3 x i32>, <3 x i32>, <3 x i32>, i16, i16, i16, i8*, i32, i32, i32)* @_ZTSZ16evaluate_w_blockPhPjRdEUlN4sycl3_V17nd_itemILi3EEEE_, !290}
!290 = !{!291, !292}
!291 = !{!"function_type", i32 0}
!292 = !{!"implicit_arg_desc", !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !305, !307}
!293 = !{i32 0}
!294 = !{i32 1}
!295 = !{i32 3}
!296 = !{i32 4}
!297 = !{i32 5}
!298 = !{i32 6}
!299 = !{i32 7}
!300 = !{i32 8}
!301 = !{i32 9}
!302 = !{i32 12}
!303 = !{i32 14, !304}
!304 = !{!"explicit_arg_num", i32 0}
!305 = !{i32 14, !306}
!306 = !{!"explicit_arg_num", i32 1}
!307 = !{i32 14, !308}
!308 = !{!"explicit_arg_num", i32 2}
!309 = !{i32 2, i32 0}
!310 = !{!"clang version 11.1.0"}
!311 = !{i32 1, !"wchar_size", i32 4}
