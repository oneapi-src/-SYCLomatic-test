; ------------------------------------------------
; OCL_asme3ece85de5060e07_simd16_entry_0001.visa.ll
; ------------------------------------------------
; Function Attrs: nounwind
define spir_kernel void @_ZTSZ16evaluate_w_blockPhPjRdEUlN4sycl3_V17nd_itemILi3EEEE_(i8 addrspace(1)* nocapture readonly %0, i8 addrspace(1)* nocapture readonly %1, i32 addrspace(1)* %2, <8 x i32> %r0, <8 x i32> %payloadHeader, <3 x i32> %numWorkGroups, <3 x i32> %globalSize, <3 x i32> %localSize, <3 x i32> %enqueuedLocalSize, i16 %localIdX, i16 %localIdY, i16 %localIdZ, i8* nocapture readnone %privateBase, i32 %bufferOffset, i32 %bufferOffset1, i32 %bufferOffset2) #0 {
; BB0 :
  %scalar35 = extractelement <8 x i32> %r0, i32 1		; visa id: 2
  %scalar = extractelement <3 x i32> %localSize, i32 0		; visa id: 2
  %4 = call { i32, i32 } @llvm.genx.GenISA.mul.pair(i32 %scalar35, i32 0, i32 %scalar, i32 0)
  %5 = extractvalue { i32, i32 } %4, 0		; visa id: 2
  %6 = extractvalue { i32, i32 } %4, 1		; visa id: 2
  %7 = zext i16 %localIdX to i32		; visa id: 10
  %8 = call { i32, i32 } @llvm.genx.GenISA.add.pair(i32 %5, i32 %6, i32 %7, i32 0)
  %9 = extractvalue { i32, i32 } %8, 0		; visa id: 11
  %10 = and i32 %9, -1048576
  %11 = icmp eq i32 %10, 0		; visa id: 12
  br i1 %11, label %.preheader.i.preheader, label %._Z14kernel_w_blockPhS_PjRKN4sycl3_V17nd_itemILi3EEE.exit_crit_edge		; visa id: 14

.preheader.i.preheader:                           ; preds = %3
; BB1 :
  %12 = bitcast i8 addrspace(1)* %0 to <16 x i8> addrspace(1)*		; visa id: 16
  %vptrcast = bitcast <16 x i8> addrspace(1)* %12 to <4 x i32> addrspace(1)*		; visa id: 16
  %vCastload = load <4 x i32>, <4 x i32> addrspace(1)* %vptrcast, align 1		; visa id: 16
  %13 = bitcast <4 x i32> %vCastload to <16 x i8>		; visa id: 23
  %14 = extractelement <16 x i8> %13, i32 0		; visa id: 24
  %15 = extractelement <16 x i8> %13, i32 1		; visa id: 24
  %16 = extractelement <16 x i8> %13, i32 2		; visa id: 24
  %17 = extractelement <16 x i8> %13, i32 3		; visa id: 24
  %18 = extractelement <16 x i8> %13, i32 4		; visa id: 24
  %19 = extractelement <16 x i8> %13, i32 5		; visa id: 24
  %20 = extractelement <16 x i8> %13, i32 6		; visa id: 24
  %21 = extractelement <16 x i8> %13, i32 7		; visa id: 24
  %22 = extractelement <16 x i8> %13, i32 8		; visa id: 24
  %23 = extractelement <16 x i8> %13, i32 9		; visa id: 24
  %24 = extractelement <16 x i8> %13, i32 10		; visa id: 24
  %25 = extractelement <16 x i8> %13, i32 11		; visa id: 24
  %26 = extractelement <16 x i8> %13, i32 12		; visa id: 24
  %27 = extractelement <16 x i8> %13, i32 13		; visa id: 24
  %28 = extractelement <16 x i8> %13, i32 14		; visa id: 24
  %29 = extractelement <16 x i8> %13, i32 15		; visa id: 24
  %30 = bitcast i8 addrspace(1)* %1 to <32 x i8> addrspace(1)*		; visa id: 24
  %vptrcast216 = bitcast <32 x i8> addrspace(1)* %30 to <8 x i32> addrspace(1)*		; visa id: 24
  %vCastload217 = load <8 x i32>, <8 x i32> addrspace(1)* %vptrcast216, align 1		; visa id: 24
  %31 = bitcast <8 x i32> %vCastload217 to <32 x i8>		; visa id: 33
  %32 = extractelement <32 x i8> %31, i32 0		; visa id: 65
  %33 = extractelement <32 x i8> %31, i32 1		; visa id: 65
  %34 = extractelement <32 x i8> %31, i32 2		; visa id: 65
  %35 = extractelement <32 x i8> %31, i32 3		; visa id: 65
  %36 = extractelement <32 x i8> %31, i32 4		; visa id: 65
  %37 = extractelement <32 x i8> %31, i32 5		; visa id: 65
  %38 = extractelement <32 x i8> %31, i32 6		; visa id: 65
  %39 = extractelement <32 x i8> %31, i32 7		; visa id: 65
  %40 = extractelement <32 x i8> %31, i32 8		; visa id: 65
  %41 = extractelement <32 x i8> %31, i32 9		; visa id: 65
  %42 = extractelement <32 x i8> %31, i32 10		; visa id: 65
  %43 = extractelement <32 x i8> %31, i32 11		; visa id: 65
  %44 = extractelement <32 x i8> %31, i32 12		; visa id: 65
  %45 = extractelement <32 x i8> %31, i32 13		; visa id: 65
  %46 = extractelement <32 x i8> %31, i32 14		; visa id: 65
  %47 = extractelement <32 x i8> %31, i32 15		; visa id: 65
  %48 = extractelement <32 x i8> %31, i32 16		; visa id: 65
  %49 = extractelement <32 x i8> %31, i32 17		; visa id: 65
  %50 = extractelement <32 x i8> %31, i32 18		; visa id: 65
  %51 = extractelement <32 x i8> %31, i32 19		; visa id: 65
  %52 = extractelement <32 x i8> %31, i32 20		; visa id: 65
  %53 = extractelement <32 x i8> %31, i32 21		; visa id: 65
  %54 = extractelement <32 x i8> %31, i32 22		; visa id: 65
  %55 = extractelement <32 x i8> %31, i32 23		; visa id: 65
  %56 = extractelement <32 x i8> %31, i32 24		; visa id: 65
  %57 = extractelement <32 x i8> %31, i32 25		; visa id: 65
  %58 = extractelement <32 x i8> %31, i32 26		; visa id: 65
  %59 = extractelement <32 x i8> %31, i32 27		; visa id: 65
  %60 = extractelement <32 x i8> %31, i32 28		; visa id: 65
  %61 = extractelement <32 x i8> %31, i32 29		; visa id: 65
  %62 = extractelement <32 x i8> %31, i32 30		; visa id: 65
  %63 = extractelement <32 x i8> %31, i32 31		; visa id: 65
  %64 = inttoptr i32 32 to <2 x i32> addrspace(131073)*		; visa id: 65
  %vCastload218 = load <2 x i32>, <2 x i32> addrspace(131073)* %64, align 32		; visa id: 66
  %65 = bitcast <2 x i32> %vCastload218 to <8 x i8>		; visa id: 67
  %66 = extractelement <8 x i8> %65, i32 0		; visa id: 68
  %67 = extractelement <8 x i8> %65, i32 1		; visa id: 68
  %68 = extractelement <8 x i8> %65, i32 2		; visa id: 68
  %69 = extractelement <8 x i8> %65, i32 3		; visa id: 68
  %70 = extractelement <8 x i8> %65, i32 4		; visa id: 68
  %71 = extractelement <8 x i8> %65, i32 5		; visa id: 68
  %72 = extractelement <8 x i8> %65, i32 6		; visa id: 68
  %73 = extractelement <8 x i8> %65, i32 7		; visa id: 68
  %74 = zext i8 %14 to i32		; visa id: 68
  %75 = shl nuw i32 %74, 24		; visa id: 69
  %76 = zext i8 %15 to i32		; visa id: 70
  %77 = shl nuw nsw i32 %76, 16		; visa id: 71
  %78 = or i32 %75, %77		; visa id: 72
  %79 = zext i8 %16 to i32		; visa id: 73
  %80 = shl nuw nsw i32 %79, 8		; visa id: 74
  %81 = or i32 %78, %80
  %82 = zext i8 %17 to i32		; visa id: 75
  %83 = or i32 %81, %82		; visa id: 76
  %84 = shl i32 %9, 8		; visa id: 77
  %85 = zext i8 %18 to i32		; visa id: 78
  %86 = shl nuw i32 %85, 24		; visa id: 79
  %87 = zext i8 %19 to i32		; visa id: 80
  %88 = shl nuw nsw i32 %87, 16		; visa id: 81
  %89 = or i32 %86, %88		; visa id: 82
  %90 = zext i8 %20 to i32		; visa id: 83
  %91 = shl nuw nsw i32 %90, 8		; visa id: 84
  %92 = or i32 %89, %91
  %93 = zext i8 %21 to i32		; visa id: 85
  %94 = or i32 %92, %93		; visa id: 86
  %95 = zext i8 %22 to i32		; visa id: 87
  %96 = shl nuw i32 %95, 24		; visa id: 88
  %97 = zext i8 %23 to i32		; visa id: 89
  %98 = shl nuw nsw i32 %97, 16		; visa id: 90
  %99 = or i32 %96, %98		; visa id: 91
  %100 = zext i8 %24 to i32		; visa id: 92
  %101 = shl nuw nsw i32 %100, 8		; visa id: 93
  %102 = or i32 %99, %101
  %103 = zext i8 %25 to i32		; visa id: 94
  %104 = or i32 %102, %103		; visa id: 95
  %105 = zext i8 %26 to i32		; visa id: 96
  %106 = shl nuw i32 %105, 24		; visa id: 97
  %107 = zext i8 %27 to i32		; visa id: 98
  %108 = shl nuw nsw i32 %107, 16		; visa id: 99
  %109 = or i32 %106, %108		; visa id: 100
  %110 = zext i8 %28 to i32		; visa id: 101
  %111 = shl nuw nsw i32 %110, 8		; visa id: 102
  %112 = or i32 %109, %111
  %113 = zext i8 %29 to i32		; visa id: 103
  %114 = or i32 %112, %113		; visa id: 104
  %115 = insertelement <4 x i32> undef, i32 %83, i32 0		; visa id: 105
  %116 = insertelement <4 x i32> %115, i32 %94, i32 1		; visa id: 106
  %117 = insertelement <4 x i32> %116, i32 %104, i32 2		; visa id: 107
  %118 = insertelement <4 x i32> %117, i32 %114, i32 3		; visa id: 108
  %119 = inttoptr i32 %84 to <4 x i32> addrspace(131074)*		; visa id: 109
  store <4 x i32> %118, <4 x i32> addrspace(131074)* %119, align 256		; visa id: 109
  %bswap.4.i.i = shl i32 %9, 24		; visa id: 114
  %bswap.2.i.i = lshr i32 %9, 8		; visa id: 115
  %bswap.and3.i.i = and i32 %84, 16711680
  %bswap.and2.i.i = and i32 %bswap.2.i.i, 65280
  %bswap.or1.i.i = or i32 %bswap.4.i.i, %bswap.and3.i.i		; visa id: 116
  %bswap.i32.i.i = or i32 %bswap.and2.i.i, %bswap.or1.i.i		; visa id: 118
  %120 = add i32 %84, 16		; visa id: 120
  %121 = zext i8 %32 to i32		; visa id: 121
  %122 = shl nuw i32 %121, 24		; visa id: 122
  %123 = zext i8 %33 to i32		; visa id: 123
  %124 = shl nuw nsw i32 %123, 16		; visa id: 124
  %125 = or i32 %122, %124		; visa id: 125
  %126 = zext i8 %34 to i32		; visa id: 126
  %127 = shl nuw nsw i32 %126, 8		; visa id: 127
  %128 = or i32 %125, %127
  %129 = zext i8 %35 to i32		; visa id: 128
  %130 = or i32 %128, %129		; visa id: 129
  %131 = zext i8 %36 to i32		; visa id: 130
  %132 = shl nuw i32 %131, 24		; visa id: 131
  %133 = zext i8 %37 to i32		; visa id: 132
  %134 = shl nuw nsw i32 %133, 16		; visa id: 133
  %135 = or i32 %132, %134		; visa id: 134
  %136 = zext i8 %38 to i32		; visa id: 135
  %137 = shl nuw nsw i32 %136, 8		; visa id: 136
  %138 = or i32 %135, %137
  %139 = zext i8 %39 to i32		; visa id: 137
  %140 = or i32 %138, %139		; visa id: 138
  %141 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %bswap.i32.i.i, i32 0		; visa id: 139
  %142 = insertelement <4 x i32> %141, i32 %130, i32 2		; visa id: 141
  %143 = insertelement <4 x i32> %142, i32 %140, i32 3		; visa id: 142
  %144 = inttoptr i32 %120 to <4 x i32> addrspace(131074)*		; visa id: 143
  store <4 x i32> %143, <4 x i32> addrspace(131074)* %144, align 16		; visa id: 143
  %145 = zext i8 %40 to i32		; visa id: 144
  %146 = shl nuw i32 %145, 24		; visa id: 145
  %147 = zext i8 %41 to i32		; visa id: 146
  %148 = shl nuw nsw i32 %147, 16		; visa id: 147
  %149 = or i32 %146, %148		; visa id: 148
  %150 = zext i8 %42 to i32		; visa id: 149
  %151 = shl nuw nsw i32 %150, 8		; visa id: 150
  %152 = or i32 %149, %151
  %153 = zext i8 %43 to i32		; visa id: 151
  %154 = or i32 %152, %153		; visa id: 152
  %155 = add i32 %84, 32		; visa id: 153
  %156 = zext i8 %44 to i32		; visa id: 154
  %157 = shl nuw i32 %156, 24		; visa id: 155
  %158 = zext i8 %45 to i32		; visa id: 156
  %159 = shl nuw nsw i32 %158, 16		; visa id: 157
  %160 = or i32 %157, %159		; visa id: 158
  %161 = zext i8 %46 to i32		; visa id: 159
  %162 = shl nuw nsw i32 %161, 8		; visa id: 160
  %163 = or i32 %160, %162
  %164 = zext i8 %47 to i32		; visa id: 161
  %165 = or i32 %163, %164		; visa id: 162
  %166 = zext i8 %48 to i32		; visa id: 163
  %167 = shl nuw i32 %166, 24		; visa id: 164
  %168 = zext i8 %49 to i32		; visa id: 165
  %169 = shl nuw nsw i32 %168, 16		; visa id: 166
  %170 = or i32 %167, %169		; visa id: 167
  %171 = zext i8 %50 to i32		; visa id: 168
  %172 = shl nuw nsw i32 %171, 8		; visa id: 169
  %173 = or i32 %170, %172
  %174 = zext i8 %51 to i32		; visa id: 170
  %175 = or i32 %173, %174		; visa id: 171
  %176 = zext i8 %52 to i32		; visa id: 172
  %177 = shl nuw i32 %176, 24		; visa id: 173
  %178 = zext i8 %53 to i32		; visa id: 174
  %179 = shl nuw nsw i32 %178, 16		; visa id: 175
  %180 = or i32 %177, %179		; visa id: 176
  %181 = zext i8 %54 to i32		; visa id: 177
  %182 = shl nuw nsw i32 %181, 8		; visa id: 178
  %183 = or i32 %180, %182
  %184 = zext i8 %55 to i32		; visa id: 179
  %185 = or i32 %183, %184		; visa id: 180
  %186 = insertelement <4 x i32> undef, i32 %154, i32 0		; visa id: 181
  %187 = insertelement <4 x i32> %186, i32 %165, i32 1		; visa id: 182
  %188 = insertelement <4 x i32> %187, i32 %175, i32 2		; visa id: 183
  %189 = insertelement <4 x i32> %188, i32 %185, i32 3		; visa id: 184
  %190 = inttoptr i32 %155 to <4 x i32> addrspace(131074)*		; visa id: 185
  store <4 x i32> %189, <4 x i32> addrspace(131074)* %190, align 32		; visa id: 185
  %191 = zext i8 %56 to i32		; visa id: 190
  %192 = shl nuw i32 %191, 24		; visa id: 191
  %193 = zext i8 %57 to i32		; visa id: 192
  %194 = shl nuw nsw i32 %193, 16		; visa id: 193
  %195 = or i32 %192, %194		; visa id: 194
  %196 = zext i8 %58 to i32		; visa id: 195
  %197 = shl nuw nsw i32 %196, 8		; visa id: 196
  %198 = or i32 %195, %197
  %199 = zext i8 %59 to i32		; visa id: 197
  %200 = or i32 %198, %199		; visa id: 198
  %201 = add i32 %84, 48		; visa id: 199
  %202 = zext i8 %60 to i32		; visa id: 200
  %203 = shl nuw i32 %202, 24		; visa id: 201
  %204 = zext i8 %61 to i32		; visa id: 202
  %205 = shl nuw nsw i32 %204, 16		; visa id: 203
  %206 = or i32 %203, %205		; visa id: 204
  %207 = zext i8 %62 to i32		; visa id: 205
  %208 = shl nuw nsw i32 %207, 8		; visa id: 206
  %209 = or i32 %206, %208
  %210 = zext i8 %63 to i32		; visa id: 207
  %211 = or i32 %209, %210		; visa id: 208
  %212 = zext i8 %66 to i32		; visa id: 209
  %213 = shl nuw i32 %212, 24		; visa id: 210
  %214 = zext i8 %67 to i32		; visa id: 211
  %215 = shl nuw nsw i32 %214, 16		; visa id: 212
  %216 = or i32 %213, %215		; visa id: 213
  %217 = zext i8 %68 to i32		; visa id: 214
  %218 = shl nuw nsw i32 %217, 8		; visa id: 215
  %219 = or i32 %218, %216		; visa id: 216
  %220 = zext i8 %69 to i32		; visa id: 217
  %221 = or i32 %219, %220		; visa id: 218
  %222 = zext i8 %70 to i32		; visa id: 219
  %223 = shl nuw i32 %222, 24		; visa id: 220
  %224 = zext i8 %71 to i32		; visa id: 221
  %225 = shl nuw nsw i32 %224, 16		; visa id: 222
  %226 = or i32 %223, %225		; visa id: 223
  %227 = zext i8 %72 to i32		; visa id: 224
  %228 = shl nuw nsw i32 %227, 8		; visa id: 225
  %229 = or i32 %228, %226		; visa id: 226
  %230 = zext i8 %73 to i32		; visa id: 227
  %231 = or i32 %229, %230		; visa id: 228
  %232 = insertelement <4 x i32> undef, i32 %200, i32 0		; visa id: 229
  %233 = insertelement <4 x i32> %232, i32 %211, i32 1		; visa id: 230
  %234 = insertelement <4 x i32> %233, i32 %221, i32 2		; visa id: 231
  %235 = insertelement <4 x i32> %234, i32 %231, i32 3		; visa id: 232
  %236 = inttoptr i32 %201 to <4 x i32> addrspace(131074)*		; visa id: 233
  store <4 x i32> %235, <4 x i32> addrspace(131074)* %236, align 16		; visa id: 233
  %237 = add i32 %83, %165		; visa id: 238
  %238 = shl i32 %93, 25		; visa id: 239
  %239 = lshr i32 %94, 7		; visa id: 240
  %240 = or i32 %238, %239		; visa id: 241
  %241 = shl i32 %94, 14		; visa id: 242
  %242 = lshr i32 %89, 18		; visa id: 243
  %243 = or i32 %241, %242		; visa id: 244
  %244 = xor i32 %240, %243
  %245 = lshr i32 %94, 3		; visa id: 245
  %246 = xor i32 %244, %245		; visa id: 246
  %247 = add i32 %237, %246		; visa id: 247
  %248 = shl i32 %221, 15		; visa id: 248
  %249 = lshr i32 %216, 17		; visa id: 249
  %250 = or i32 %248, %249		; visa id: 250
  %251 = shl i32 %221, 13		; visa id: 251
  %252 = lshr i32 %216, 19		; visa id: 252
  %253 = or i32 %251, %252		; visa id: 253
  %254 = xor i32 %250, %253
  %255 = lshr i32 %219, 10		; visa id: 254
  %256 = xor i32 %254, %255		; visa id: 255
  %257 = add i32 %247, %256		; visa id: 256
  %258 = add i32 %84, 64		; visa id: 257
  %259 = add i32 %94, %175		; visa id: 258
  %260 = shl i32 %103, 25		; visa id: 259
  %261 = lshr i32 %104, 7		; visa id: 260
  %262 = or i32 %260, %261		; visa id: 261
  %263 = shl i32 %104, 14		; visa id: 262
  %264 = lshr i32 %99, 18		; visa id: 263
  %265 = or i32 %263, %264		; visa id: 264
  %266 = xor i32 %262, %265
  %267 = lshr i32 %104, 3		; visa id: 265
  %268 = xor i32 %266, %267		; visa id: 266
  %269 = add i32 %259, %268		; visa id: 267
  %270 = shl i32 %231, 15		; visa id: 268
  %271 = lshr i32 %226, 17		; visa id: 269
  %272 = or i32 %270, %271		; visa id: 270
  %273 = shl i32 %231, 13		; visa id: 271
  %274 = lshr i32 %226, 19		; visa id: 272
  %275 = or i32 %273, %274		; visa id: 273
  %276 = xor i32 %272, %275
  %277 = lshr i32 %229, 10		; visa id: 274
  %278 = xor i32 %276, %277		; visa id: 275
  %279 = add i32 %269, %278		; visa id: 276
  %280 = add i32 %104, %185		; visa id: 277
  %281 = shl i32 %113, 25		; visa id: 278
  %282 = lshr i32 %114, 7		; visa id: 279
  %283 = or i32 %281, %282		; visa id: 280
  %284 = shl i32 %114, 14		; visa id: 281
  %285 = lshr i32 %109, 18		; visa id: 282
  %286 = or i32 %284, %285		; visa id: 283
  %287 = xor i32 %283, %286
  %288 = lshr i32 %114, 3		; visa id: 284
  %289 = xor i32 %287, %288		; visa id: 285
  %290 = add i32 %280, %289		; visa id: 286
  %rotate200 = call i32 @llvm.fshl.i32(i32 %257, i32 %257, i32 15)		; visa id: 287
  %rotate199 = call i32 @llvm.fshl.i32(i32 %257, i32 %257, i32 13)		; visa id: 288
  %291 = xor i32 %rotate200, %rotate199
  %292 = lshr i32 %257, 10		; visa id: 289
  %293 = xor i32 %291, %292		; visa id: 290
  %294 = add i32 %290, %293		; visa id: 291
  %295 = add i32 %114, %200		; visa id: 292
  %296 = lshr exact i32 %bswap.i32.i.i, 7		; visa id: 293
  %297 = shl i32 %bswap.i32.i.i, 14		; visa id: 294
  %298 = lshr i32 %bswap.or1.i.i, 18		; visa id: 295
  %299 = or i32 %297, %298		; visa id: 296
  %300 = xor i32 %296, %299
  %301 = lshr exact i32 %bswap.i32.i.i, 3		; visa id: 297
  %302 = xor i32 %300, %301		; visa id: 298
  %303 = add i32 %295, %302		; visa id: 299
  %rotate198 = call i32 @llvm.fshl.i32(i32 %279, i32 %279, i32 15)		; visa id: 300
  %rotate197 = call i32 @llvm.fshl.i32(i32 %279, i32 %279, i32 13)		; visa id: 301
  %304 = xor i32 %rotate198, %rotate197
  %305 = lshr i32 %279, 10		; visa id: 302
  %306 = xor i32 %304, %305		; visa id: 303
  %307 = add i32 %303, %306		; visa id: 304
  %308 = insertelement <4 x i32> undef, i32 %257, i32 0		; visa id: 305
  %309 = insertelement <4 x i32> %308, i32 %279, i32 1		; visa id: 306
  %310 = insertelement <4 x i32> %309, i32 %294, i32 2		; visa id: 307
  %311 = insertelement <4 x i32> %310, i32 %307, i32 3		; visa id: 308
  %312 = inttoptr i32 %258 to <4 x i32> addrspace(131074)*		; visa id: 309
  store <4 x i32> %311, <4 x i32> addrspace(131074)* %312, align 64		; visa id: 309
  %313 = add i32 %bswap.i32.i.i, %211		; visa id: 310
  %rotate196 = call i32 @llvm.fshl.i32(i32 %294, i32 %294, i32 15)		; visa id: 311
  %rotate195 = call i32 @llvm.fshl.i32(i32 %294, i32 %294, i32 13)		; visa id: 312
  %314 = xor i32 %rotate196, %rotate195
  %315 = lshr i32 %294, 10		; visa id: 313
  %316 = xor i32 %314, %315		; visa id: 314
  %317 = add i32 %313, %316		; visa id: 315
  %318 = add i32 %84, 80		; visa id: 316
  %319 = shl i32 %129, 25		; visa id: 317
  %320 = lshr i32 %130, 7		; visa id: 318
  %321 = or i32 %319, %320		; visa id: 319
  %322 = shl i32 %130, 14		; visa id: 320
  %323 = lshr i32 %125, 18		; visa id: 321
  %324 = or i32 %322, %323		; visa id: 322
  %325 = xor i32 %321, %324
  %326 = lshr i32 %130, 3		; visa id: 323
  %327 = xor i32 %325, %326		; visa id: 324
  %328 = add i32 %221, %327		; visa id: 325
  %rotate194 = call i32 @llvm.fshl.i32(i32 %307, i32 %307, i32 15)		; visa id: 326
  %rotate193 = call i32 @llvm.fshl.i32(i32 %307, i32 %307, i32 13)		; visa id: 327
  %329 = xor i32 %rotate194, %rotate193
  %330 = lshr i32 %307, 10		; visa id: 328
  %331 = xor i32 %329, %330		; visa id: 329
  %332 = add i32 %328, %331		; visa id: 330
  %333 = add i32 %130, %231		; visa id: 331
  %334 = shl i32 %139, 25		; visa id: 332
  %335 = lshr i32 %140, 7		; visa id: 333
  %336 = or i32 %334, %335		; visa id: 334
  %337 = shl i32 %140, 14		; visa id: 335
  %338 = lshr i32 %135, 18		; visa id: 336
  %339 = or i32 %337, %338		; visa id: 337
  %340 = xor i32 %336, %339
  %341 = lshr i32 %140, 3		; visa id: 338
  %342 = xor i32 %340, %341		; visa id: 339
  %343 = add i32 %333, %342		; visa id: 340
  %rotate192 = call i32 @llvm.fshl.i32(i32 %317, i32 %317, i32 15)		; visa id: 341
  %rotate191 = call i32 @llvm.fshl.i32(i32 %317, i32 %317, i32 13)		; visa id: 342
  %344 = xor i32 %rotate192, %rotate191
  %345 = lshr i32 %317, 10		; visa id: 343
  %346 = xor i32 %344, %345		; visa id: 344
  %347 = add i32 %343, %346		; visa id: 345
  %348 = add i32 %140, %257		; visa id: 346
  %349 = shl i32 %153, 25		; visa id: 347
  %350 = lshr i32 %154, 7		; visa id: 348
  %351 = or i32 %349, %350		; visa id: 349
  %352 = shl i32 %154, 14		; visa id: 350
  %353 = lshr i32 %149, 18		; visa id: 351
  %354 = or i32 %352, %353		; visa id: 352
  %355 = xor i32 %351, %354
  %356 = lshr i32 %154, 3		; visa id: 353
  %357 = xor i32 %355, %356		; visa id: 354
  %358 = add i32 %348, %357		; visa id: 355
  %rotate190 = call i32 @llvm.fshl.i32(i32 %332, i32 %332, i32 15)		; visa id: 356
  %rotate189 = call i32 @llvm.fshl.i32(i32 %332, i32 %332, i32 13)		; visa id: 357
  %359 = xor i32 %rotate190, %rotate189
  %360 = lshr i32 %332, 10		; visa id: 358
  %361 = xor i32 %359, %360		; visa id: 359
  %362 = add i32 %358, %361		; visa id: 360
  %363 = insertelement <4 x i32> undef, i32 %317, i32 0		; visa id: 361
  %364 = insertelement <4 x i32> %363, i32 %332, i32 1		; visa id: 362
  %365 = insertelement <4 x i32> %364, i32 %347, i32 2		; visa id: 363
  %366 = insertelement <4 x i32> %365, i32 %362, i32 3		; visa id: 364
  %367 = inttoptr i32 %318 to <4 x i32> addrspace(131074)*		; visa id: 365
  store <4 x i32> %366, <4 x i32> addrspace(131074)* %367, align 16		; visa id: 365
  %368 = add i32 %154, %279		; visa id: 366
  %369 = shl i32 %164, 25		; visa id: 367
  %370 = lshr i32 %165, 7		; visa id: 368
  %371 = or i32 %369, %370		; visa id: 369
  %372 = shl i32 %165, 14		; visa id: 370
  %373 = lshr i32 %160, 18		; visa id: 371
  %374 = or i32 %372, %373		; visa id: 372
  %375 = xor i32 %371, %374
  %376 = lshr i32 %165, 3		; visa id: 373
  %377 = xor i32 %375, %376		; visa id: 374
  %378 = add i32 %368, %377		; visa id: 375
  %rotate188 = call i32 @llvm.fshl.i32(i32 %347, i32 %347, i32 15)		; visa id: 376
  %rotate187 = call i32 @llvm.fshl.i32(i32 %347, i32 %347, i32 13)		; visa id: 377
  %379 = xor i32 %rotate188, %rotate187
  %380 = lshr i32 %347, 10		; visa id: 378
  %381 = xor i32 %379, %380		; visa id: 379
  %382 = add i32 %378, %381		; visa id: 380
  %383 = add i32 %84, 96		; visa id: 381
  %384 = add i32 %165, %294		; visa id: 382
  %385 = shl i32 %174, 25		; visa id: 383
  %386 = lshr i32 %175, 7		; visa id: 384
  %387 = or i32 %385, %386		; visa id: 385
  %388 = shl i32 %175, 14		; visa id: 386
  %389 = lshr i32 %170, 18		; visa id: 387
  %390 = or i32 %388, %389		; visa id: 388
  %391 = xor i32 %387, %390
  %392 = lshr i32 %175, 3		; visa id: 389
  %393 = xor i32 %391, %392		; visa id: 390
  %394 = add i32 %384, %393		; visa id: 391
  %rotate186 = call i32 @llvm.fshl.i32(i32 %362, i32 %362, i32 15)		; visa id: 392
  %rotate185 = call i32 @llvm.fshl.i32(i32 %362, i32 %362, i32 13)		; visa id: 393
  %395 = xor i32 %rotate186, %rotate185
  %396 = lshr i32 %362, 10		; visa id: 394
  %397 = xor i32 %395, %396		; visa id: 395
  %398 = add i32 %394, %397		; visa id: 396
  %399 = add i32 %175, %307		; visa id: 397
  %400 = shl i32 %184, 25		; visa id: 398
  %401 = lshr i32 %185, 7		; visa id: 399
  %402 = or i32 %400, %401		; visa id: 400
  %403 = shl i32 %185, 14		; visa id: 401
  %404 = lshr i32 %180, 18		; visa id: 402
  %405 = or i32 %403, %404		; visa id: 403
  %406 = xor i32 %402, %405
  %407 = lshr i32 %185, 3		; visa id: 404
  %408 = xor i32 %406, %407		; visa id: 405
  %409 = add i32 %399, %408		; visa id: 406
  %rotate184 = call i32 @llvm.fshl.i32(i32 %382, i32 %382, i32 15)		; visa id: 407
  %rotate183 = call i32 @llvm.fshl.i32(i32 %382, i32 %382, i32 13)		; visa id: 408
  %410 = xor i32 %rotate184, %rotate183
  %411 = lshr i32 %382, 10		; visa id: 409
  %412 = xor i32 %410, %411		; visa id: 410
  %413 = add i32 %409, %412		; visa id: 411
  %414 = add i32 %185, %317		; visa id: 412
  %415 = shl i32 %199, 25		; visa id: 413
  %416 = lshr i32 %200, 7		; visa id: 414
  %417 = or i32 %415, %416		; visa id: 415
  %418 = shl i32 %200, 14		; visa id: 416
  %419 = lshr i32 %195, 18		; visa id: 417
  %420 = or i32 %418, %419		; visa id: 418
  %421 = xor i32 %417, %420
  %422 = lshr i32 %200, 3		; visa id: 419
  %423 = xor i32 %421, %422		; visa id: 420
  %424 = add i32 %414, %423		; visa id: 421
  %rotate182 = call i32 @llvm.fshl.i32(i32 %398, i32 %398, i32 15)		; visa id: 422
  %rotate181 = call i32 @llvm.fshl.i32(i32 %398, i32 %398, i32 13)		; visa id: 423
  %425 = xor i32 %rotate182, %rotate181
  %426 = lshr i32 %398, 10		; visa id: 424
  %427 = xor i32 %425, %426		; visa id: 425
  %428 = add i32 %424, %427		; visa id: 426
  %429 = insertelement <4 x i32> undef, i32 %382, i32 0		; visa id: 427
  %430 = insertelement <4 x i32> %429, i32 %398, i32 1		; visa id: 428
  %431 = insertelement <4 x i32> %430, i32 %413, i32 2		; visa id: 429
  %432 = insertelement <4 x i32> %431, i32 %428, i32 3		; visa id: 430
  %433 = inttoptr i32 %383 to <4 x i32> addrspace(131074)*		; visa id: 431
  store <4 x i32> %432, <4 x i32> addrspace(131074)* %433, align 32		; visa id: 431
  %434 = add i32 %200, %332		; visa id: 432
  %435 = shl i32 %210, 25		; visa id: 433
  %436 = lshr i32 %211, 7		; visa id: 434
  %437 = or i32 %435, %436		; visa id: 435
  %438 = shl i32 %211, 14		; visa id: 436
  %439 = lshr i32 %206, 18		; visa id: 437
  %440 = or i32 %438, %439		; visa id: 438
  %441 = xor i32 %437, %440
  %442 = lshr i32 %211, 3		; visa id: 439
  %443 = xor i32 %441, %442		; visa id: 440
  %444 = add i32 %434, %443		; visa id: 441
  %rotate180 = call i32 @llvm.fshl.i32(i32 %413, i32 %413, i32 15)		; visa id: 442
  %rotate179 = call i32 @llvm.fshl.i32(i32 %413, i32 %413, i32 13)		; visa id: 443
  %445 = xor i32 %rotate180, %rotate179
  %446 = lshr i32 %413, 10		; visa id: 444
  %447 = xor i32 %445, %446		; visa id: 445
  %448 = add i32 %444, %447		; visa id: 446
  %449 = add i32 %84, 112		; visa id: 447
  %450 = add i32 %211, %347		; visa id: 448
  %451 = shl i32 %220, 25		; visa id: 449
  %452 = lshr i32 %221, 7		; visa id: 450
  %453 = or i32 %451, %452		; visa id: 451
  %454 = shl i32 %221, 14		; visa id: 452
  %455 = lshr i32 %216, 18		; visa id: 453
  %456 = or i32 %454, %455		; visa id: 454
  %457 = xor i32 %453, %456
  %458 = lshr i32 %221, 3		; visa id: 455
  %459 = xor i32 %457, %458		; visa id: 456
  %460 = add i32 %450, %459		; visa id: 457
  %rotate178 = call i32 @llvm.fshl.i32(i32 %428, i32 %428, i32 15)		; visa id: 458
  %rotate177 = call i32 @llvm.fshl.i32(i32 %428, i32 %428, i32 13)		; visa id: 459
  %461 = xor i32 %rotate178, %rotate177
  %462 = lshr i32 %428, 10		; visa id: 460
  %463 = xor i32 %461, %462		; visa id: 461
  %464 = add i32 %460, %463		; visa id: 462
  %465 = add i32 %221, %362		; visa id: 463
  %466 = shl i32 %230, 25		; visa id: 464
  %467 = lshr i32 %231, 7		; visa id: 465
  %468 = or i32 %466, %467		; visa id: 466
  %469 = shl i32 %231, 14		; visa id: 467
  %470 = lshr i32 %226, 18		; visa id: 468
  %471 = or i32 %469, %470		; visa id: 469
  %472 = xor i32 %468, %471
  %473 = lshr i32 %231, 3		; visa id: 470
  %474 = xor i32 %472, %473		; visa id: 471
  %475 = add i32 %465, %474		; visa id: 472
  %rotate176 = call i32 @llvm.fshl.i32(i32 %448, i32 %448, i32 15)		; visa id: 473
  %rotate175 = call i32 @llvm.fshl.i32(i32 %448, i32 %448, i32 13)		; visa id: 474
  %476 = xor i32 %rotate176, %rotate175
  %477 = lshr i32 %448, 10		; visa id: 475
  %478 = xor i32 %476, %477		; visa id: 476
  %479 = add i32 %475, %478		; visa id: 477
  %480 = add i32 %231, %382		; visa id: 478
  %rotate174 = call i32 @llvm.fshl.i32(i32 %257, i32 %257, i32 25)		; visa id: 479
  %rotate173 = call i32 @llvm.fshl.i32(i32 %257, i32 %257, i32 14)		; visa id: 480
  %481 = xor i32 %rotate174, %rotate173
  %482 = lshr i32 %257, 3		; visa id: 481
  %483 = xor i32 %481, %482		; visa id: 482
  %484 = add i32 %480, %483		; visa id: 483
  %rotate172 = call i32 @llvm.fshl.i32(i32 %464, i32 %464, i32 15)		; visa id: 484
  %rotate171 = call i32 @llvm.fshl.i32(i32 %464, i32 %464, i32 13)		; visa id: 485
  %485 = xor i32 %rotate172, %rotate171
  %486 = lshr i32 %464, 10		; visa id: 486
  %487 = xor i32 %485, %486		; visa id: 487
  %488 = add i32 %484, %487		; visa id: 488
  %489 = insertelement <4 x i32> undef, i32 %448, i32 0		; visa id: 489
  %490 = insertelement <4 x i32> %489, i32 %464, i32 1		; visa id: 490
  %491 = insertelement <4 x i32> %490, i32 %479, i32 2		; visa id: 491
  %492 = insertelement <4 x i32> %491, i32 %488, i32 3		; visa id: 492
  %493 = inttoptr i32 %449 to <4 x i32> addrspace(131074)*		; visa id: 493
  store <4 x i32> %492, <4 x i32> addrspace(131074)* %493, align 16		; visa id: 493
  %494 = add i32 %257, %398		; visa id: 494
  %rotate170 = call i32 @llvm.fshl.i32(i32 %279, i32 %279, i32 25)		; visa id: 495
  %rotate169 = call i32 @llvm.fshl.i32(i32 %279, i32 %279, i32 14)		; visa id: 496
  %495 = xor i32 %rotate170, %rotate169
  %496 = lshr i32 %279, 3		; visa id: 497
  %497 = xor i32 %495, %496		; visa id: 498
  %498 = add i32 %494, %497		; visa id: 499
  %rotate168 = call i32 @llvm.fshl.i32(i32 %479, i32 %479, i32 15)		; visa id: 500
  %rotate167 = call i32 @llvm.fshl.i32(i32 %479, i32 %479, i32 13)		; visa id: 501
  %499 = xor i32 %rotate168, %rotate167
  %500 = lshr i32 %479, 10		; visa id: 502
  %501 = xor i32 %499, %500		; visa id: 503
  %502 = add i32 %498, %501		; visa id: 504
  %503 = add i32 %84, 128		; visa id: 505
  %504 = add i32 %279, %413		; visa id: 506
  %rotate166 = call i32 @llvm.fshl.i32(i32 %294, i32 %294, i32 25)		; visa id: 507
  %rotate165 = call i32 @llvm.fshl.i32(i32 %294, i32 %294, i32 14)		; visa id: 508
  %505 = xor i32 %rotate166, %rotate165
  %506 = lshr i32 %294, 3		; visa id: 509
  %507 = xor i32 %505, %506		; visa id: 510
  %508 = add i32 %504, %507		; visa id: 511
  %rotate164 = call i32 @llvm.fshl.i32(i32 %488, i32 %488, i32 15)		; visa id: 512
  %rotate163 = call i32 @llvm.fshl.i32(i32 %488, i32 %488, i32 13)		; visa id: 513
  %509 = xor i32 %rotate164, %rotate163
  %510 = lshr i32 %488, 10		; visa id: 514
  %511 = xor i32 %509, %510		; visa id: 515
  %512 = add i32 %508, %511		; visa id: 516
  %513 = add i32 %294, %428		; visa id: 517
  %rotate162 = call i32 @llvm.fshl.i32(i32 %307, i32 %307, i32 25)		; visa id: 518
  %rotate161 = call i32 @llvm.fshl.i32(i32 %307, i32 %307, i32 14)		; visa id: 519
  %514 = xor i32 %rotate162, %rotate161
  %515 = lshr i32 %307, 3		; visa id: 520
  %516 = xor i32 %514, %515		; visa id: 521
  %517 = add i32 %513, %516		; visa id: 522
  %rotate160 = call i32 @llvm.fshl.i32(i32 %502, i32 %502, i32 15)		; visa id: 523
  %rotate159 = call i32 @llvm.fshl.i32(i32 %502, i32 %502, i32 13)		; visa id: 524
  %518 = xor i32 %rotate160, %rotate159
  %519 = lshr i32 %502, 10		; visa id: 525
  %520 = xor i32 %518, %519		; visa id: 526
  %521 = add i32 %517, %520		; visa id: 527
  %522 = add i32 %307, %448		; visa id: 528
  %rotate158 = call i32 @llvm.fshl.i32(i32 %317, i32 %317, i32 25)		; visa id: 529
  %rotate157 = call i32 @llvm.fshl.i32(i32 %317, i32 %317, i32 14)		; visa id: 530
  %523 = xor i32 %rotate158, %rotate157
  %524 = lshr i32 %317, 3		; visa id: 531
  %525 = xor i32 %523, %524		; visa id: 532
  %526 = add i32 %522, %525		; visa id: 533
  %rotate156 = call i32 @llvm.fshl.i32(i32 %512, i32 %512, i32 15)		; visa id: 534
  %rotate155 = call i32 @llvm.fshl.i32(i32 %512, i32 %512, i32 13)		; visa id: 535
  %527 = xor i32 %rotate156, %rotate155
  %528 = lshr i32 %512, 10		; visa id: 536
  %529 = xor i32 %527, %528		; visa id: 537
  %530 = add i32 %526, %529		; visa id: 538
  %531 = insertelement <4 x i32> undef, i32 %502, i32 0		; visa id: 539
  %532 = insertelement <4 x i32> %531, i32 %512, i32 1		; visa id: 540
  %533 = insertelement <4 x i32> %532, i32 %521, i32 2		; visa id: 541
  %534 = insertelement <4 x i32> %533, i32 %530, i32 3		; visa id: 542
  %535 = inttoptr i32 %503 to <4 x i32> addrspace(131074)*		; visa id: 543
  store <4 x i32> %534, <4 x i32> addrspace(131074)* %535, align 128		; visa id: 543
  %536 = add i32 %317, %464		; visa id: 544
  %rotate154 = call i32 @llvm.fshl.i32(i32 %332, i32 %332, i32 25)		; visa id: 545
  %rotate153 = call i32 @llvm.fshl.i32(i32 %332, i32 %332, i32 14)		; visa id: 546
  %537 = xor i32 %rotate154, %rotate153
  %538 = lshr i32 %332, 3		; visa id: 547
  %539 = xor i32 %537, %538		; visa id: 548
  %540 = add i32 %536, %539		; visa id: 549
  %rotate152 = call i32 @llvm.fshl.i32(i32 %521, i32 %521, i32 15)		; visa id: 550
  %rotate151 = call i32 @llvm.fshl.i32(i32 %521, i32 %521, i32 13)		; visa id: 551
  %541 = xor i32 %rotate152, %rotate151
  %542 = lshr i32 %521, 10		; visa id: 552
  %543 = xor i32 %541, %542		; visa id: 553
  %544 = add i32 %540, %543		; visa id: 554
  %545 = add i32 %84, 144		; visa id: 555
  %546 = add i32 %332, %479		; visa id: 556
  %rotate150 = call i32 @llvm.fshl.i32(i32 %347, i32 %347, i32 25)		; visa id: 557
  %rotate149 = call i32 @llvm.fshl.i32(i32 %347, i32 %347, i32 14)		; visa id: 558
  %547 = xor i32 %rotate150, %rotate149
  %548 = lshr i32 %347, 3		; visa id: 559
  %549 = xor i32 %547, %548		; visa id: 560
  %550 = add i32 %546, %549		; visa id: 561
  %rotate148 = call i32 @llvm.fshl.i32(i32 %530, i32 %530, i32 15)		; visa id: 562
  %rotate147 = call i32 @llvm.fshl.i32(i32 %530, i32 %530, i32 13)		; visa id: 563
  %551 = xor i32 %rotate148, %rotate147
  %552 = lshr i32 %530, 10		; visa id: 564
  %553 = xor i32 %551, %552		; visa id: 565
  %554 = add i32 %550, %553		; visa id: 566
  %555 = add i32 %347, %488		; visa id: 567
  %rotate146 = call i32 @llvm.fshl.i32(i32 %362, i32 %362, i32 25)		; visa id: 568
  %rotate145 = call i32 @llvm.fshl.i32(i32 %362, i32 %362, i32 14)		; visa id: 569
  %556 = xor i32 %rotate146, %rotate145
  %557 = lshr i32 %362, 3		; visa id: 570
  %558 = xor i32 %556, %557		; visa id: 571
  %559 = add i32 %555, %558		; visa id: 572
  %rotate144 = call i32 @llvm.fshl.i32(i32 %544, i32 %544, i32 15)		; visa id: 573
  %rotate143 = call i32 @llvm.fshl.i32(i32 %544, i32 %544, i32 13)		; visa id: 574
  %560 = xor i32 %rotate144, %rotate143
  %561 = lshr i32 %544, 10		; visa id: 575
  %562 = xor i32 %560, %561		; visa id: 576
  %563 = add i32 %559, %562		; visa id: 577
  %564 = add i32 %362, %502		; visa id: 578
  %rotate142 = call i32 @llvm.fshl.i32(i32 %382, i32 %382, i32 25)		; visa id: 579
  %rotate141 = call i32 @llvm.fshl.i32(i32 %382, i32 %382, i32 14)		; visa id: 580
  %565 = xor i32 %rotate142, %rotate141
  %566 = lshr i32 %382, 3		; visa id: 581
  %567 = xor i32 %565, %566		; visa id: 582
  %568 = add i32 %564, %567		; visa id: 583
  %rotate140 = call i32 @llvm.fshl.i32(i32 %554, i32 %554, i32 15)		; visa id: 584
  %rotate139 = call i32 @llvm.fshl.i32(i32 %554, i32 %554, i32 13)		; visa id: 585
  %569 = xor i32 %rotate140, %rotate139
  %570 = lshr i32 %554, 10		; visa id: 586
  %571 = xor i32 %569, %570		; visa id: 587
  %572 = add i32 %568, %571		; visa id: 588
  %573 = insertelement <4 x i32> undef, i32 %544, i32 0		; visa id: 589
  %574 = insertelement <4 x i32> %573, i32 %554, i32 1		; visa id: 590
  %575 = insertelement <4 x i32> %574, i32 %563, i32 2		; visa id: 591
  %576 = insertelement <4 x i32> %575, i32 %572, i32 3		; visa id: 592
  %577 = inttoptr i32 %545 to <4 x i32> addrspace(131074)*		; visa id: 593
  store <4 x i32> %576, <4 x i32> addrspace(131074)* %577, align 16		; visa id: 593
  %578 = add i32 %382, %512		; visa id: 594
  %rotate138 = call i32 @llvm.fshl.i32(i32 %398, i32 %398, i32 25)		; visa id: 595
  %rotate137 = call i32 @llvm.fshl.i32(i32 %398, i32 %398, i32 14)		; visa id: 596
  %579 = xor i32 %rotate138, %rotate137
  %580 = lshr i32 %398, 3		; visa id: 597
  %581 = xor i32 %579, %580		; visa id: 598
  %582 = add i32 %578, %581		; visa id: 599
  %rotate136 = call i32 @llvm.fshl.i32(i32 %563, i32 %563, i32 15)		; visa id: 600
  %rotate135 = call i32 @llvm.fshl.i32(i32 %563, i32 %563, i32 13)		; visa id: 601
  %583 = xor i32 %rotate136, %rotate135
  %584 = lshr i32 %563, 10		; visa id: 602
  %585 = xor i32 %583, %584		; visa id: 603
  %586 = add i32 %582, %585		; visa id: 604
  %587 = add i32 %84, 160		; visa id: 605
  %588 = add i32 %398, %521		; visa id: 606
  %rotate134 = call i32 @llvm.fshl.i32(i32 %413, i32 %413, i32 25)		; visa id: 607
  %rotate133 = call i32 @llvm.fshl.i32(i32 %413, i32 %413, i32 14)		; visa id: 608
  %589 = xor i32 %rotate134, %rotate133
  %590 = lshr i32 %413, 3		; visa id: 609
  %591 = xor i32 %589, %590		; visa id: 610
  %592 = add i32 %588, %591		; visa id: 611
  %rotate132 = call i32 @llvm.fshl.i32(i32 %572, i32 %572, i32 15)		; visa id: 612
  %rotate131 = call i32 @llvm.fshl.i32(i32 %572, i32 %572, i32 13)		; visa id: 613
  %593 = xor i32 %rotate132, %rotate131
  %594 = lshr i32 %572, 10		; visa id: 614
  %595 = xor i32 %593, %594		; visa id: 615
  %596 = add i32 %592, %595		; visa id: 616
  %597 = add i32 %413, %530		; visa id: 617
  %rotate130 = call i32 @llvm.fshl.i32(i32 %428, i32 %428, i32 25)		; visa id: 618
  %rotate129 = call i32 @llvm.fshl.i32(i32 %428, i32 %428, i32 14)		; visa id: 619
  %598 = xor i32 %rotate130, %rotate129
  %599 = lshr i32 %428, 3		; visa id: 620
  %600 = xor i32 %598, %599		; visa id: 621
  %601 = add i32 %597, %600		; visa id: 622
  %rotate128 = call i32 @llvm.fshl.i32(i32 %586, i32 %586, i32 15)		; visa id: 623
  %rotate127 = call i32 @llvm.fshl.i32(i32 %586, i32 %586, i32 13)		; visa id: 624
  %602 = xor i32 %rotate128, %rotate127
  %603 = lshr i32 %586, 10		; visa id: 625
  %604 = xor i32 %602, %603		; visa id: 626
  %605 = add i32 %601, %604		; visa id: 627
  %606 = add i32 %428, %544		; visa id: 628
  %rotate126 = call i32 @llvm.fshl.i32(i32 %448, i32 %448, i32 25)		; visa id: 629
  %rotate125 = call i32 @llvm.fshl.i32(i32 %448, i32 %448, i32 14)		; visa id: 630
  %607 = xor i32 %rotate126, %rotate125
  %608 = lshr i32 %448, 3		; visa id: 631
  %609 = xor i32 %607, %608		; visa id: 632
  %610 = add i32 %606, %609		; visa id: 633
  %rotate124 = call i32 @llvm.fshl.i32(i32 %596, i32 %596, i32 15)		; visa id: 634
  %rotate123 = call i32 @llvm.fshl.i32(i32 %596, i32 %596, i32 13)		; visa id: 635
  %611 = xor i32 %rotate124, %rotate123
  %612 = lshr i32 %596, 10		; visa id: 636
  %613 = xor i32 %611, %612		; visa id: 637
  %614 = add i32 %610, %613		; visa id: 638
  %615 = insertelement <4 x i32> undef, i32 %586, i32 0		; visa id: 639
  %616 = insertelement <4 x i32> %615, i32 %596, i32 1		; visa id: 640
  %617 = insertelement <4 x i32> %616, i32 %605, i32 2		; visa id: 641
  %618 = insertelement <4 x i32> %617, i32 %614, i32 3		; visa id: 642
  %619 = inttoptr i32 %587 to <4 x i32> addrspace(131074)*		; visa id: 643
  store <4 x i32> %618, <4 x i32> addrspace(131074)* %619, align 32		; visa id: 643
  %620 = add i32 %448, %554		; visa id: 644
  %rotate122 = call i32 @llvm.fshl.i32(i32 %464, i32 %464, i32 25)		; visa id: 645
  %rotate121 = call i32 @llvm.fshl.i32(i32 %464, i32 %464, i32 14)		; visa id: 646
  %621 = xor i32 %rotate122, %rotate121
  %622 = lshr i32 %464, 3		; visa id: 647
  %623 = xor i32 %621, %622		; visa id: 648
  %624 = add i32 %620, %623		; visa id: 649
  %rotate120 = call i32 @llvm.fshl.i32(i32 %605, i32 %605, i32 15)		; visa id: 650
  %rotate119 = call i32 @llvm.fshl.i32(i32 %605, i32 %605, i32 13)		; visa id: 651
  %625 = xor i32 %rotate120, %rotate119
  %626 = lshr i32 %605, 10		; visa id: 652
  %627 = xor i32 %625, %626		; visa id: 653
  %628 = add i32 %624, %627		; visa id: 654
  %629 = add i32 %84, 176		; visa id: 655
  %630 = add i32 %464, %563		; visa id: 656
  %rotate118 = call i32 @llvm.fshl.i32(i32 %479, i32 %479, i32 25)		; visa id: 657
  %rotate117 = call i32 @llvm.fshl.i32(i32 %479, i32 %479, i32 14)		; visa id: 658
  %631 = xor i32 %rotate118, %rotate117
  %632 = lshr i32 %479, 3		; visa id: 659
  %633 = xor i32 %631, %632		; visa id: 660
  %634 = add i32 %630, %633		; visa id: 661
  %rotate116 = call i32 @llvm.fshl.i32(i32 %614, i32 %614, i32 15)		; visa id: 662
  %rotate115 = call i32 @llvm.fshl.i32(i32 %614, i32 %614, i32 13)		; visa id: 663
  %635 = xor i32 %rotate116, %rotate115
  %636 = lshr i32 %614, 10		; visa id: 664
  %637 = xor i32 %635, %636		; visa id: 665
  %638 = add i32 %634, %637		; visa id: 666
  %639 = add i32 %479, %572		; visa id: 667
  %rotate114 = call i32 @llvm.fshl.i32(i32 %488, i32 %488, i32 25)		; visa id: 668
  %rotate113 = call i32 @llvm.fshl.i32(i32 %488, i32 %488, i32 14)		; visa id: 669
  %640 = xor i32 %rotate114, %rotate113
  %641 = lshr i32 %488, 3		; visa id: 670
  %642 = xor i32 %640, %641		; visa id: 671
  %643 = add i32 %639, %642		; visa id: 672
  %rotate112 = call i32 @llvm.fshl.i32(i32 %628, i32 %628, i32 15)		; visa id: 673
  %rotate111 = call i32 @llvm.fshl.i32(i32 %628, i32 %628, i32 13)		; visa id: 674
  %644 = xor i32 %rotate112, %rotate111
  %645 = lshr i32 %628, 10		; visa id: 675
  %646 = xor i32 %644, %645		; visa id: 676
  %647 = add i32 %643, %646		; visa id: 677
  %648 = add i32 %488, %586		; visa id: 678
  %rotate110 = call i32 @llvm.fshl.i32(i32 %502, i32 %502, i32 25)		; visa id: 679
  %rotate109 = call i32 @llvm.fshl.i32(i32 %502, i32 %502, i32 14)		; visa id: 680
  %649 = xor i32 %rotate110, %rotate109
  %650 = lshr i32 %502, 3		; visa id: 681
  %651 = xor i32 %649, %650		; visa id: 682
  %652 = add i32 %648, %651		; visa id: 683
  %rotate108 = call i32 @llvm.fshl.i32(i32 %638, i32 %638, i32 15)		; visa id: 684
  %rotate107 = call i32 @llvm.fshl.i32(i32 %638, i32 %638, i32 13)		; visa id: 685
  %653 = xor i32 %rotate108, %rotate107
  %654 = lshr i32 %638, 10		; visa id: 686
  %655 = xor i32 %653, %654		; visa id: 687
  %656 = add i32 %652, %655		; visa id: 688
  %657 = insertelement <4 x i32> undef, i32 %628, i32 0		; visa id: 689
  %658 = insertelement <4 x i32> %657, i32 %638, i32 1		; visa id: 690
  %659 = insertelement <4 x i32> %658, i32 %647, i32 2		; visa id: 691
  %660 = insertelement <4 x i32> %659, i32 %656, i32 3		; visa id: 692
  %661 = inttoptr i32 %629 to <4 x i32> addrspace(131074)*		; visa id: 693
  store <4 x i32> %660, <4 x i32> addrspace(131074)* %661, align 16		; visa id: 693
  %662 = add i32 %502, %596		; visa id: 694
  %rotate106 = call i32 @llvm.fshl.i32(i32 %512, i32 %512, i32 25)		; visa id: 695
  %rotate105 = call i32 @llvm.fshl.i32(i32 %512, i32 %512, i32 14)		; visa id: 696
  %663 = xor i32 %rotate106, %rotate105
  %664 = lshr i32 %512, 3		; visa id: 697
  %665 = xor i32 %663, %664		; visa id: 698
  %666 = add i32 %662, %665
  %rotate104 = call i32 @llvm.fshl.i32(i32 %647, i32 %647, i32 15)		; visa id: 699
  %rotate103 = call i32 @llvm.fshl.i32(i32 %647, i32 %647, i32 13)		; visa id: 700
  %667 = xor i32 %rotate104, %rotate103
  %668 = lshr i32 %647, 10		; visa id: 701
  %669 = xor i32 %667, %668		; visa id: 702
  %670 = add i32 %666, %669		; visa id: 703
  %671 = add i32 %84, 192		; visa id: 704
  %672 = add i32 %512, %605		; visa id: 705
  %rotate102 = call i32 @llvm.fshl.i32(i32 %521, i32 %521, i32 25)		; visa id: 706
  %rotate101 = call i32 @llvm.fshl.i32(i32 %521, i32 %521, i32 14)		; visa id: 707
  %673 = xor i32 %rotate102, %rotate101
  %674 = lshr i32 %521, 3		; visa id: 708
  %675 = xor i32 %673, %674		; visa id: 709
  %676 = add i32 %672, %675
  %rotate100 = call i32 @llvm.fshl.i32(i32 %656, i32 %656, i32 15)		; visa id: 710
  %rotate99 = call i32 @llvm.fshl.i32(i32 %656, i32 %656, i32 13)		; visa id: 711
  %677 = xor i32 %rotate100, %rotate99
  %678 = lshr i32 %656, 10		; visa id: 712
  %679 = xor i32 %677, %678		; visa id: 713
  %680 = add i32 %676, %679		; visa id: 714
  %681 = add i32 %521, %614		; visa id: 715
  %rotate98 = call i32 @llvm.fshl.i32(i32 %530, i32 %530, i32 25)		; visa id: 716
  %rotate97 = call i32 @llvm.fshl.i32(i32 %530, i32 %530, i32 14)		; visa id: 717
  %682 = xor i32 %rotate98, %rotate97
  %683 = lshr i32 %530, 3		; visa id: 718
  %684 = xor i32 %682, %683		; visa id: 719
  %685 = add i32 %681, %684
  %rotate96 = call i32 @llvm.fshl.i32(i32 %670, i32 %670, i32 15)		; visa id: 720
  %rotate95 = call i32 @llvm.fshl.i32(i32 %670, i32 %670, i32 13)		; visa id: 721
  %686 = xor i32 %rotate96, %rotate95
  %687 = lshr i32 %670, 10		; visa id: 722
  %688 = xor i32 %686, %687		; visa id: 723
  %689 = add i32 %685, %688		; visa id: 724
  %690 = add i32 %530, %628		; visa id: 725
  %rotate94 = call i32 @llvm.fshl.i32(i32 %544, i32 %544, i32 25)		; visa id: 726
  %rotate93 = call i32 @llvm.fshl.i32(i32 %544, i32 %544, i32 14)		; visa id: 727
  %691 = xor i32 %rotate94, %rotate93
  %692 = lshr i32 %544, 3		; visa id: 728
  %693 = xor i32 %691, %692		; visa id: 729
  %694 = add i32 %690, %693
  %rotate92 = call i32 @llvm.fshl.i32(i32 %680, i32 %680, i32 15)		; visa id: 730
  %rotate91 = call i32 @llvm.fshl.i32(i32 %680, i32 %680, i32 13)		; visa id: 731
  %695 = xor i32 %rotate92, %rotate91
  %696 = lshr i32 %680, 10		; visa id: 732
  %697 = xor i32 %695, %696		; visa id: 733
  %698 = add i32 %694, %697		; visa id: 734
  %699 = insertelement <4 x i32> undef, i32 %670, i32 0		; visa id: 735
  %700 = insertelement <4 x i32> %699, i32 %680, i32 1		; visa id: 736
  %701 = insertelement <4 x i32> %700, i32 %689, i32 2		; visa id: 737
  %702 = insertelement <4 x i32> %701, i32 %698, i32 3		; visa id: 738
  %703 = inttoptr i32 %671 to <4 x i32> addrspace(131074)*		; visa id: 739
  store <4 x i32> %702, <4 x i32> addrspace(131074)* %703, align 64		; visa id: 739
  %704 = add i32 %544, %638		; visa id: 740
  %rotate90 = call i32 @llvm.fshl.i32(i32 %554, i32 %554, i32 25)		; visa id: 741
  %rotate89 = call i32 @llvm.fshl.i32(i32 %554, i32 %554, i32 14)		; visa id: 742
  %705 = xor i32 %rotate90, %rotate89
  %706 = lshr i32 %554, 3		; visa id: 743
  %707 = xor i32 %705, %706		; visa id: 744
  %708 = add i32 %704, %707
  %rotate88 = call i32 @llvm.fshl.i32(i32 %689, i32 %689, i32 15)		; visa id: 745
  %rotate87 = call i32 @llvm.fshl.i32(i32 %689, i32 %689, i32 13)		; visa id: 746
  %709 = xor i32 %rotate88, %rotate87
  %710 = lshr i32 %689, 10		; visa id: 747
  %711 = xor i32 %709, %710		; visa id: 748
  %712 = add i32 %708, %711		; visa id: 749
  %713 = add i32 %84, 208		; visa id: 750
  %714 = add i32 %554, %647		; visa id: 751
  %rotate86 = call i32 @llvm.fshl.i32(i32 %563, i32 %563, i32 25)		; visa id: 752
  %rotate85 = call i32 @llvm.fshl.i32(i32 %563, i32 %563, i32 14)		; visa id: 753
  %715 = xor i32 %rotate86, %rotate85
  %716 = lshr i32 %563, 3		; visa id: 754
  %717 = xor i32 %715, %716		; visa id: 755
  %718 = add i32 %714, %717
  %rotate84 = call i32 @llvm.fshl.i32(i32 %698, i32 %698, i32 15)		; visa id: 756
  %rotate83 = call i32 @llvm.fshl.i32(i32 %698, i32 %698, i32 13)		; visa id: 757
  %719 = xor i32 %rotate84, %rotate83
  %720 = lshr i32 %698, 10		; visa id: 758
  %721 = xor i32 %719, %720		; visa id: 759
  %722 = add i32 %718, %721		; visa id: 760
  %723 = add i32 %563, %656		; visa id: 761
  %rotate82 = call i32 @llvm.fshl.i32(i32 %572, i32 %572, i32 25)		; visa id: 762
  %rotate81 = call i32 @llvm.fshl.i32(i32 %572, i32 %572, i32 14)		; visa id: 763
  %724 = xor i32 %rotate82, %rotate81
  %725 = lshr i32 %572, 3		; visa id: 764
  %726 = xor i32 %724, %725		; visa id: 765
  %727 = add i32 %723, %726
  %rotate80 = call i32 @llvm.fshl.i32(i32 %712, i32 %712, i32 15)		; visa id: 766
  %rotate79 = call i32 @llvm.fshl.i32(i32 %712, i32 %712, i32 13)		; visa id: 767
  %728 = xor i32 %rotate80, %rotate79
  %729 = lshr i32 %712, 10		; visa id: 768
  %730 = xor i32 %728, %729		; visa id: 769
  %731 = add i32 %727, %730		; visa id: 770
  %732 = add i32 %572, %670		; visa id: 771
  %rotate78 = call i32 @llvm.fshl.i32(i32 %586, i32 %586, i32 25)		; visa id: 772
  %rotate77 = call i32 @llvm.fshl.i32(i32 %586, i32 %586, i32 14)		; visa id: 773
  %733 = xor i32 %rotate78, %rotate77
  %734 = lshr i32 %586, 3		; visa id: 774
  %735 = xor i32 %733, %734		; visa id: 775
  %736 = add i32 %732, %735
  %rotate76 = call i32 @llvm.fshl.i32(i32 %722, i32 %722, i32 15)		; visa id: 776
  %rotate75 = call i32 @llvm.fshl.i32(i32 %722, i32 %722, i32 13)		; visa id: 777
  %737 = xor i32 %rotate76, %rotate75
  %738 = lshr i32 %722, 10		; visa id: 778
  %739 = xor i32 %737, %738		; visa id: 779
  %740 = add i32 %736, %739		; visa id: 780
  %741 = insertelement <4 x i32> undef, i32 %712, i32 0		; visa id: 781
  %742 = insertelement <4 x i32> %741, i32 %722, i32 1		; visa id: 782
  %743 = insertelement <4 x i32> %742, i32 %731, i32 2		; visa id: 783
  %744 = insertelement <4 x i32> %743, i32 %740, i32 3		; visa id: 784
  %745 = inttoptr i32 %713 to <4 x i32> addrspace(131074)*		; visa id: 785
  store <4 x i32> %744, <4 x i32> addrspace(131074)* %745, align 16		; visa id: 785
  %746 = add i32 %586, %680		; visa id: 786
  %rotate74 = call i32 @llvm.fshl.i32(i32 %596, i32 %596, i32 25)		; visa id: 787
  %rotate73 = call i32 @llvm.fshl.i32(i32 %596, i32 %596, i32 14)		; visa id: 788
  %747 = xor i32 %rotate74, %rotate73
  %748 = lshr i32 %596, 3		; visa id: 789
  %749 = xor i32 %747, %748		; visa id: 790
  %750 = add i32 %746, %749
  %rotate72 = call i32 @llvm.fshl.i32(i32 %731, i32 %731, i32 15)		; visa id: 791
  %rotate71 = call i32 @llvm.fshl.i32(i32 %731, i32 %731, i32 13)		; visa id: 792
  %751 = xor i32 %rotate72, %rotate71
  %752 = lshr i32 %731, 10		; visa id: 793
  %753 = xor i32 %751, %752		; visa id: 794
  %754 = add i32 %750, %753		; visa id: 795
  %755 = add i32 %84, 224		; visa id: 796
  %756 = add i32 %596, %689		; visa id: 797
  %rotate70 = call i32 @llvm.fshl.i32(i32 %605, i32 %605, i32 25)		; visa id: 798
  %rotate69 = call i32 @llvm.fshl.i32(i32 %605, i32 %605, i32 14)		; visa id: 799
  %757 = xor i32 %rotate70, %rotate69
  %758 = lshr i32 %605, 3		; visa id: 800
  %759 = xor i32 %757, %758		; visa id: 801
  %760 = add i32 %756, %759
  %rotate68 = call i32 @llvm.fshl.i32(i32 %740, i32 %740, i32 15)		; visa id: 802
  %rotate67 = call i32 @llvm.fshl.i32(i32 %740, i32 %740, i32 13)		; visa id: 803
  %761 = xor i32 %rotate68, %rotate67
  %762 = lshr i32 %740, 10		; visa id: 804
  %763 = xor i32 %761, %762		; visa id: 805
  %764 = add i32 %760, %763		; visa id: 806
  %765 = add i32 %605, %698		; visa id: 807
  %rotate66 = call i32 @llvm.fshl.i32(i32 %614, i32 %614, i32 25)		; visa id: 808
  %rotate65 = call i32 @llvm.fshl.i32(i32 %614, i32 %614, i32 14)		; visa id: 809
  %766 = xor i32 %rotate66, %rotate65
  %767 = lshr i32 %614, 3		; visa id: 810
  %768 = xor i32 %766, %767		; visa id: 811
  %769 = add i32 %765, %768
  %rotate64 = call i32 @llvm.fshl.i32(i32 %754, i32 %754, i32 15)		; visa id: 812
  %rotate63 = call i32 @llvm.fshl.i32(i32 %754, i32 %754, i32 13)		; visa id: 813
  %770 = xor i32 %rotate64, %rotate63
  %771 = lshr i32 %754, 10		; visa id: 814
  %772 = xor i32 %770, %771		; visa id: 815
  %773 = add i32 %769, %772		; visa id: 816
  %774 = add i32 %614, %712		; visa id: 817
  %rotate62 = call i32 @llvm.fshl.i32(i32 %628, i32 %628, i32 25)		; visa id: 818
  %rotate61 = call i32 @llvm.fshl.i32(i32 %628, i32 %628, i32 14)		; visa id: 819
  %775 = xor i32 %rotate62, %rotate61
  %776 = lshr i32 %628, 3		; visa id: 820
  %777 = xor i32 %775, %776		; visa id: 821
  %778 = add i32 %774, %777
  %rotate60 = call i32 @llvm.fshl.i32(i32 %764, i32 %764, i32 15)		; visa id: 822
  %rotate59 = call i32 @llvm.fshl.i32(i32 %764, i32 %764, i32 13)		; visa id: 823
  %779 = xor i32 %rotate60, %rotate59
  %780 = lshr i32 %764, 10		; visa id: 824
  %781 = xor i32 %779, %780		; visa id: 825
  %782 = add i32 %778, %781		; visa id: 826
  %783 = insertelement <4 x i32> undef, i32 %754, i32 0		; visa id: 827
  %784 = insertelement <4 x i32> %783, i32 %764, i32 1		; visa id: 828
  %785 = insertelement <4 x i32> %784, i32 %773, i32 2		; visa id: 829
  %786 = insertelement <4 x i32> %785, i32 %782, i32 3		; visa id: 830
  %787 = inttoptr i32 %755 to <4 x i32> addrspace(131074)*		; visa id: 831
  store <4 x i32> %786, <4 x i32> addrspace(131074)* %787, align 32		; visa id: 831
  %788 = add i32 %628, %722		; visa id: 832
  %rotate58 = call i32 @llvm.fshl.i32(i32 %638, i32 %638, i32 25)		; visa id: 833
  %rotate57 = call i32 @llvm.fshl.i32(i32 %638, i32 %638, i32 14)		; visa id: 834
  %789 = xor i32 %rotate58, %rotate57
  %790 = lshr i32 %638, 3		; visa id: 835
  %791 = xor i32 %789, %790		; visa id: 836
  %792 = add i32 %788, %791
  %rotate56 = call i32 @llvm.fshl.i32(i32 %773, i32 %773, i32 15)		; visa id: 837
  %rotate55 = call i32 @llvm.fshl.i32(i32 %773, i32 %773, i32 13)		; visa id: 838
  %793 = xor i32 %rotate56, %rotate55
  %794 = lshr i32 %773, 10		; visa id: 839
  %795 = xor i32 %793, %794		; visa id: 840
  %796 = add i32 %792, %795		; visa id: 841
  %797 = add i32 %84, 240		; visa id: 842
  %798 = add i32 %638, %731		; visa id: 843
  %rotate54 = call i32 @llvm.fshl.i32(i32 %647, i32 %647, i32 25)		; visa id: 844
  %rotate53 = call i32 @llvm.fshl.i32(i32 %647, i32 %647, i32 14)		; visa id: 845
  %799 = xor i32 %rotate54, %rotate53
  %800 = lshr i32 %647, 3		; visa id: 846
  %801 = xor i32 %799, %800		; visa id: 847
  %802 = add i32 %798, %801
  %rotate52 = call i32 @llvm.fshl.i32(i32 %782, i32 %782, i32 15)		; visa id: 848
  %rotate51 = call i32 @llvm.fshl.i32(i32 %782, i32 %782, i32 13)		; visa id: 849
  %803 = xor i32 %rotate52, %rotate51
  %804 = lshr i32 %782, 10		; visa id: 850
  %805 = xor i32 %803, %804		; visa id: 851
  %806 = add i32 %802, %805		; visa id: 852
  %807 = add i32 %647, %740		; visa id: 853
  %rotate50 = call i32 @llvm.fshl.i32(i32 %656, i32 %656, i32 25)		; visa id: 854
  %rotate49 = call i32 @llvm.fshl.i32(i32 %656, i32 %656, i32 14)		; visa id: 855
  %808 = xor i32 %rotate50, %rotate49
  %809 = lshr i32 %656, 3		; visa id: 856
  %810 = xor i32 %808, %809		; visa id: 857
  %811 = add i32 %807, %810
  %rotate48 = call i32 @llvm.fshl.i32(i32 %796, i32 %796, i32 15)		; visa id: 858
  %rotate47 = call i32 @llvm.fshl.i32(i32 %796, i32 %796, i32 13)		; visa id: 859
  %812 = xor i32 %rotate48, %rotate47
  %813 = lshr i32 %796, 10		; visa id: 860
  %814 = xor i32 %812, %813		; visa id: 861
  %815 = add i32 %811, %814		; visa id: 862
  %816 = add i32 %656, %754		; visa id: 863
  %rotate46 = call i32 @llvm.fshl.i32(i32 %670, i32 %670, i32 25)		; visa id: 864
  %rotate45 = call i32 @llvm.fshl.i32(i32 %670, i32 %670, i32 14)		; visa id: 865
  %817 = xor i32 %rotate46, %rotate45
  %818 = lshr i32 %670, 3		; visa id: 866
  %819 = xor i32 %817, %818		; visa id: 867
  %820 = add i32 %816, %819
  %rotate44 = call i32 @llvm.fshl.i32(i32 %806, i32 %806, i32 15)		; visa id: 868
  %rotate = call i32 @llvm.fshl.i32(i32 %806, i32 %806, i32 13)		; visa id: 869
  %821 = xor i32 %rotate44, %rotate
  %822 = lshr i32 %806, 10		; visa id: 870
  %823 = xor i32 %821, %822		; visa id: 871
  %824 = add i32 %820, %823		; visa id: 872
  %825 = insertelement <4 x i32> undef, i32 %796, i32 0		; visa id: 873
  %826 = insertelement <4 x i32> %825, i32 %806, i32 1		; visa id: 874
  %827 = insertelement <4 x i32> %826, i32 %815, i32 2		; visa id: 875
  %828 = insertelement <4 x i32> %827, i32 %824, i32 3		; visa id: 876
  %829 = inttoptr i32 %797 to <4 x i32> addrspace(131074)*		; visa id: 877
  store <4 x i32> %828, <4 x i32> addrspace(131074)* %829, align 16		; visa id: 877
  br label %_Z14kernel_w_blockPhS_PjRKN4sycl3_V17nd_itemILi3EEE.exit		; visa id: 878

._Z14kernel_w_blockPhS_PjRKN4sycl3_V17nd_itemILi3EEE.exit_crit_edge: ; preds = %3
; BB:
  br label %_Z14kernel_w_blockPhS_PjRKN4sycl3_V17nd_itemILi3EEE.exit

_Z14kernel_w_blockPhS_PjRKN4sycl3_V17nd_itemILi3EEE.exit: ; preds = %._Z14kernel_w_blockPhS_PjRKN4sycl3_V17nd_itemILi3EEE.exit_crit_edge, %.preheader.i.preheader
; BB3 :
  ret void		; visa id: 879
}
