; ------------------------------------------------
; OCL_asm7a939c6e0788947d_beforeUnification_1.ll
; ------------------------------------------------
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v16:16:16-v24:32:32-v32:32:32-v48:64:64-v64:64:64-v96:128:128-v128:128:128-v192:256:256-v256:256:256-v512:512:512-v1024:1024:1024"
target triple = "spir64-unknown-unknown"

%"class.sycl::_V1::nd_item" = type { %"class.sycl::_V1::item", %"class.sycl::_V1::item.13", %"class.sycl::_V1::group" }
%"class.sycl::_V1::item" = type { %"struct.sycl::_V1::detail::ItemBase" }
%"struct.sycl::_V1::detail::ItemBase" = type { %"class.sycl::_V1::range", %"class.sycl::_V1::range", %"class.sycl::_V1::range" }
%"class.sycl::_V1::range" = type { %"class.sycl::_V1::detail::array" }
%"class.sycl::_V1::detail::array" = type { [3 x i64] }
%"class.sycl::_V1::item.13" = type { %"struct.sycl::_V1::detail::ItemBase.14" }
%"struct.sycl::_V1::detail::ItemBase.14" = type { %"class.sycl::_V1::range", %"class.sycl::_V1::range" }
%"class.sycl::_V1::group" = type { %"class.sycl::_V1::range", %"class.sycl::_V1::range", %"class.sycl::_V1::range", %"class.sycl::_V1::range" }

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.bswap.i32(i32) #0

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.fshl.i32(i32, i32, i32) #0

; Function Attrs: nounwind
define spir_kernel void @_ZTSZZ6attackPcPjPhS1_S1_iRdENKUlRN4sycl3_V17handlerEE_clES6_EUlNS4_7nd_itemILi3EEEE_(i32 %0, i32 addrspace(1)* %1, i8 addrspace(1)* %2, i8 addrspace(1)* %3, i8 addrspace(1)* %4, i8 addrspace(1)* %5, i8 addrspace(1)* %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 addrspace(1)* %11, i32 addrspace(1)* %12, i32 addrspace(1)* %13, i32 addrspace(1)* %14, i32 addrspace(1)* %15, i32 addrspace(1)* %16) #1 {
  call spir_func void @__itt_offload_wi_start_wrapper() #2
  %18 = alloca %"class.sycl::_V1::nd_item", align 8
  %19 = addrspacecast i32 addrspace(1)* %1 to i32 addrspace(4)*
  %20 = addrspacecast i8 addrspace(1)* %2 to i8 addrspace(4)*
  %21 = addrspacecast i8 addrspace(1)* %3 to i8 addrspace(4)*
  %22 = addrspacecast i8 addrspace(1)* %4 to i8 addrspace(4)*
  %23 = addrspacecast i8 addrspace(1)* %5 to i8 addrspace(4)*
  %24 = addrspacecast i8 addrspace(1)* %6 to i8 addrspace(4)*
  %25 = addrspacecast i32 addrspace(1)* %11 to i32 addrspace(4)*
  %26 = addrspacecast i32 addrspace(1)* %12 to i32 addrspace(4)*
  %27 = addrspacecast i32 addrspace(1)* %13 to i32 addrspace(4)*
  %28 = addrspacecast i32 addrspace(1)* %14 to i32 addrspace(4)*
  %29 = addrspacecast i32 addrspace(1)* %15 to i32 addrspace(4)*
  %30 = addrspacecast i32 addrspace(1)* %16 to i32 addrspace(4)*
  %31 = call spir_func <3 x i64> @__builtin_spirv_BuiltInGlobalSize() #6
  %32 = extractelement <3 x i64> %31, i32 2
  %33 = call spir_func <3 x i64> @__builtin_spirv_BuiltInGlobalSize() #6
  %34 = extractelement <3 x i64> %33, i32 1
  %35 = call spir_func <3 x i64> @__builtin_spirv_BuiltInGlobalSize() #6
  %36 = extractelement <3 x i64> %35, i32 0
  %37 = call spir_func <3 x i64> @__builtin_spirv_BuiltInWorkgroupSize() #6
  %38 = extractelement <3 x i64> %37, i32 2
  %39 = call spir_func <3 x i64> @__builtin_spirv_BuiltInWorkgroupSize() #6
  %40 = extractelement <3 x i64> %39, i32 1
  %41 = call spir_func <3 x i64> @__builtin_spirv_BuiltInWorkgroupSize() #6
  %42 = extractelement <3 x i64> %41, i32 0
  %43 = call spir_func <3 x i64> @__builtin_spirv_BuiltInNumWorkgroups() #6
  %44 = extractelement <3 x i64> %43, i32 2
  %45 = call spir_func <3 x i64> @__builtin_spirv_BuiltInNumWorkgroups() #6
  %46 = extractelement <3 x i64> %45, i32 1
  %47 = call spir_func <3 x i64> @__builtin_spirv_BuiltInNumWorkgroups() #6
  %48 = extractelement <3 x i64> %47, i32 0
  %49 = call spir_func <3 x i64> @__builtin_spirv_BuiltInWorkgroupId() #6
  %50 = extractelement <3 x i64> %49, i32 2
  %51 = call spir_func <3 x i64> @__builtin_spirv_BuiltInWorkgroupId() #6
  %52 = extractelement <3 x i64> %51, i32 1
  %53 = call spir_func <3 x i64> @__builtin_spirv_BuiltInWorkgroupId() #6
  %54 = extractelement <3 x i64> %53, i32 0
  %55 = call spir_func <3 x i64> @__builtin_spirv_BuiltInGlobalInvocationId() #6
  %56 = extractelement <3 x i64> %55, i32 2
  %57 = call spir_func <3 x i64> @__builtin_spirv_BuiltInGlobalInvocationId() #6
  %58 = extractelement <3 x i64> %57, i32 1
  %59 = call spir_func <3 x i64> @__builtin_spirv_BuiltInGlobalInvocationId() #6
  %60 = extractelement <3 x i64> %59, i32 0
  %61 = call spir_func <3 x i64> @__builtin_spirv_BuiltInLocalInvocationId() #6
  %62 = extractelement <3 x i64> %61, i32 2
  %63 = call spir_func <3 x i64> @__builtin_spirv_BuiltInLocalInvocationId() #6
  %64 = extractelement <3 x i64> %63, i32 1
  %65 = call spir_func <3 x i64> @__builtin_spirv_BuiltInLocalInvocationId() #6
  %66 = extractelement <3 x i64> %65, i32 0
  %67 = call spir_func <3 x i64> @__builtin_spirv_BuiltInGlobalOffset() #6
  %68 = extractelement <3 x i64> %67, i32 2
  %69 = call spir_func <3 x i64> @__builtin_spirv_BuiltInGlobalOffset() #6
  %70 = extractelement <3 x i64> %69, i32 1
  %71 = call spir_func <3 x i64> @__builtin_spirv_BuiltInGlobalOffset() #6
  %72 = extractelement <3 x i64> %71, i32 0
  %73 = bitcast %"class.sycl::_V1::nd_item"* %18 to i8*
  %74 = bitcast i8* %73 to i8*
  call void @llvm.lifetime.start.p0i8(i64 216, i8* %74)
  %75 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0
  store i64 %32, i64* %75, align 8
  %76 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 1
  store i64 %34, i64* %76, align 8
  %77 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 2
  store i64 %36, i64* %77, align 8
  %78 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  store i64 %56, i64* %78, align 8
  %79 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 1
  store i64 %58, i64* %79, align 8
  %80 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 2
  store i64 %60, i64* %80, align 8
  %81 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0, i64 0
  store i64 %68, i64* %81, align 8
  %82 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0, i64 1
  store i64 %70, i64* %82, align 8
  %83 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0, i64 2
  store i64 %72, i64* %83, align 8
  %84 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0
  store i64 %38, i64* %84, align 8
  %85 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 1
  store i64 %40, i64* %85, align 8
  %86 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 2
  store i64 %42, i64* %86, align 8
  %87 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0, i64 0
  store i64 %62, i64* %87, align 8
  %88 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0, i64 1
  store i64 %64, i64* %88, align 8
  %89 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0, i64 2
  store i64 %66, i64* %89, align 8
  %90 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 2, i32 0, i32 0, i32 0, i64 0
  store i64 %32, i64* %90, align 8
  %91 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 2, i32 0, i32 0, i32 0, i64 1
  store i64 %34, i64* %91, align 8
  %92 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 2, i32 0, i32 0, i32 0, i64 2
  store i64 %36, i64* %92, align 8
  %93 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 2, i32 1, i32 0, i32 0, i64 0
  store i64 %38, i64* %93, align 8
  %94 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 2, i32 1, i32 0, i32 0, i64 1
  store i64 %40, i64* %94, align 8
  %95 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 2, i32 1, i32 0, i32 0, i64 2
  store i64 %42, i64* %95, align 8
  %96 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 2, i32 2, i32 0, i32 0, i64 0
  store i64 %44, i64* %96, align 8
  %97 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 2, i32 2, i32 0, i32 0, i64 1
  store i64 %46, i64* %97, align 8
  %98 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 2, i32 2, i32 0, i32 0, i64 2
  store i64 %48, i64* %98, align 8
  %99 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 2, i32 3, i32 0, i32 0, i64 0
  store i64 %50, i64* %99, align 8
  %100 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 2, i32 3, i32 0, i32 0, i64 1
  store i64 %52, i64* %100, align 8
  %101 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item"* %18, i64 0, i32 2, i32 3, i32 0, i32 0, i64 2
  store i64 %54, i64* %101, align 8
  %102 = addrspacecast %"class.sycl::_V1::nd_item"* %18 to %"class.sycl::_V1::nd_item" addrspace(4)*
  call spir_func void @_Z20decrypt_vmk_with_macjPiPhS0_S0_S0_S0_iiiijjjjPjS1_RKN4sycl3_V17nd_itemILi3EEEPKjS9_S9_S9_(i32 %0, i32 addrspace(4)* nocapture %19, i8 addrspace(4)* nocapture readonly %20, i8 addrspace(4)* nocapture readonly %21, i8 addrspace(4)* nocapture readonly %22, i8 addrspace(4)* nocapture readonly %23, i8 addrspace(4)* nocapture readonly %24, i32 %7, i32 %8, i32 %9, i32 %10, i32 undef, i32 undef, i32 undef, i32 undef, i32 addrspace(4)* nocapture readonly %25, i32 addrspace(4)* nocapture readonly %26, %"class.sycl::_V1::nd_item" addrspace(4)* nocapture readonly %102, i32 addrspace(4)* nocapture readonly %27, i32 addrspace(4)* nocapture readonly %28, i32 addrspace(4)* nocapture readonly %29, i32 addrspace(4)* nocapture readonly %30) #1
  %103 = bitcast i8* %73 to i8*
  call void @llvm.lifetime.end.p0i8(i64 216, i8* %103)
  call spir_func void @__itt_offload_wi_finish_wrapper() #2
  ret void
}

; Function Attrs: alwaysinline nounwind
define spir_func void @__itt_offload_wi_start_wrapper() #2 {
  %1 = alloca [3 x i64], align 8
  %2 = icmp eq i8 0, 0
  br i1 %2, label %25, label %3

3:                                                ; preds = %0
  %4 = bitcast [3 x i64]* %1 to i8*
  %5 = bitcast i8* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %5)
  %6 = getelementptr inbounds [3 x i64], [3 x i64]* %1, i64 0, i64 0
  %7 = addrspacecast i64* %6 to i64 addrspace(4)*
  %8 = call spir_func <3 x i64> @__builtin_spirv_BuiltInWorkgroupId() #6
  %9 = extractelement <3 x i64> %8, i32 0
  store i64 %9, i64* %6, align 8
  %10 = getelementptr inbounds [3 x i64], [3 x i64]* %1, i64 0, i64 1
  %11 = extractelement <3 x i64> %8, i32 1
  store i64 %11, i64* %10, align 8
  %12 = getelementptr inbounds [3 x i64], [3 x i64]* %1, i64 0, i64 2
  %13 = extractelement <3 x i64> %8, i32 2
  store i64 %13, i64* %12, align 8
  %14 = call spir_func i64 @__builtin_spirv_BuiltInGlobalLinearId() #6
  %15 = call spir_func <3 x i64> @__builtin_spirv_BuiltInWorkgroupSize() #6
  %16 = extractelement <3 x i64> %15, i32 0
  %17 = call spir_func <3 x i64> @__builtin_spirv_BuiltInWorkgroupSize() #6
  %18 = extractelement <3 x i64> %17, i32 1
  %19 = mul i64 %16, %18
  %20 = call spir_func <3 x i64> @__builtin_spirv_BuiltInWorkgroupSize() #6
  %21 = extractelement <3 x i64> %20, i32 2
  %22 = mul i64 %19, %21
  %23 = trunc i64 %22 to i32
  call spir_func void @__itt_offload_wi_start_stub(i64 addrspace(4)* %7, i64 %14, i32 %23) #4
  %24 = bitcast i8* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %24)
  br label %25

25:                                               ; preds = %3, %0
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: noinline nounwind optnone
define spir_func void @__itt_offload_wi_start_stub(i64 addrspace(4)* %0, i64 %1, i32 %2) #4 {
  %4 = alloca i64 addrspace(4)*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = addrspacecast i64 addrspace(4)** %4 to i64 addrspace(4)* addrspace(4)*
  %8 = addrspacecast i64* %5 to i64 addrspace(4)*
  %9 = addrspacecast i32* %6 to i32 addrspace(4)*
  store i64 addrspace(4)* %0, i64 addrspace(4)* addrspace(4)* %7, align 8
  store i64 %1, i64 addrspace(4)* %8, align 8
  store i32 %2, i32 addrspace(4)* %9, align 4
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind
define spir_func void @_Z20decrypt_vmk_with_macjPiPhS0_S0_S0_S0_iiiijjjjPjS1_RKN4sycl3_V17nd_itemILi3EEEPKjS9_S9_S9_(i32 %0, i32 addrspace(4)* nocapture %1, i8 addrspace(4)* nocapture readonly %2, i8 addrspace(4)* nocapture readonly %3, i8 addrspace(4)* nocapture readonly %4, i8 addrspace(4)* nocapture readonly %5, i8 addrspace(4)* nocapture readonly %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 %14, i32 addrspace(4)* nocapture readonly %15, i32 addrspace(4)* nocapture readonly %16, %"class.sycl::_V1::nd_item" addrspace(4)* nocapture readonly %17, i32 addrspace(4)* nocapture readonly %18, i32 addrspace(4)* nocapture readonly %19, i32 addrspace(4)* nocapture readonly %20, i32 addrspace(4)* nocapture readonly %21) #1 {
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca i32, align 4
  %43 = addrspacecast i32* %23 to i32 addrspace(4)*
  %44 = addrspacecast i32* %24 to i32 addrspace(4)*
  %45 = addrspacecast i32* %25 to i32 addrspace(4)*
  %46 = addrspacecast i32* %26 to i32 addrspace(4)*
  %47 = addrspacecast i32* %27 to i32 addrspace(4)*
  %48 = addrspacecast i32* %28 to i32 addrspace(4)*
  %49 = addrspacecast i32* %29 to i32 addrspace(4)*
  %50 = addrspacecast i32* %30 to i32 addrspace(4)*
  %51 = addrspacecast i32* %31 to i32 addrspace(4)*
  %52 = addrspacecast i32* %32 to i32 addrspace(4)*
  %53 = addrspacecast i32* %33 to i32 addrspace(4)*
  %54 = addrspacecast i32* %34 to i32 addrspace(4)*
  %55 = addrspacecast i32* %35 to i32 addrspace(4)*
  %56 = addrspacecast i32* %36 to i32 addrspace(4)*
  %57 = addrspacecast i32* %37 to i32 addrspace(4)*
  %58 = addrspacecast i32* %38 to i32 addrspace(4)*
  %59 = addrspacecast i32* %39 to i32 addrspace(4)*
  %60 = addrspacecast i32* %40 to i32 addrspace(4)*
  %61 = addrspacecast i32* %41 to i32 addrspace(4)*
  %62 = addrspacecast i32* %42 to i32 addrspace(4)*
  %63 = bitcast i32* %23 to i8*
  %64 = bitcast i8* %63 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %64)
  %65 = bitcast i32* %24 to i8*
  %66 = bitcast i8* %65 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %66)
  %67 = bitcast i32* %25 to i8*
  %68 = bitcast i8* %67 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %68)
  %69 = bitcast i32* %26 to i8*
  %70 = bitcast i8* %69 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %70)
  %71 = bitcast i32* %27 to i8*
  %72 = bitcast i8* %71 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %72)
  %73 = bitcast i32* %28 to i8*
  %74 = bitcast i8* %73 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %74)
  %75 = bitcast i32* %29 to i8*
  %76 = bitcast i8* %75 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %76)
  %77 = bitcast i32* %30 to i8*
  %78 = bitcast i8* %77 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %78)
  %79 = bitcast i32* %31 to i8*
  %80 = bitcast i8* %79 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %80)
  %81 = bitcast i32* %32 to i8*
  %82 = bitcast i8* %81 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %82)
  %83 = bitcast i32* %33 to i8*
  %84 = bitcast i8* %83 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %84)
  %85 = bitcast i32* %34 to i8*
  %86 = bitcast i8* %85 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %86)
  %87 = bitcast i32* %35 to i8*
  %88 = bitcast i8* %87 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %88)
  %89 = bitcast i32* %36 to i8*
  %90 = bitcast i8* %89 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %90)
  %91 = bitcast i32* %37 to i8*
  %92 = bitcast i8* %91 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %92)
  %93 = bitcast i32* %38 to i8*
  %94 = bitcast i8* %93 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %94)
  %95 = bitcast i32* %39 to i8*
  %96 = bitcast i8* %95 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %96)
  %97 = bitcast i32* %40 to i8*
  %98 = bitcast i8* %97 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %98)
  %99 = bitcast i32* %41 to i8*
  %100 = bitcast i8* %99 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %100)
  %101 = bitcast i32* %42 to i8*
  %102 = bitcast i8* %101 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %102)
  %103 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item" addrspace(4)* %17, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0, i64 2
  %104 = load i64, i64 addrspace(4)* %103, align 8
  %105 = icmp ult i64 %104, 2147483648
  %i1promo = zext i1 %105 to i8
  %106 = trunc i8 %i1promo to i1
  call void @llvm.assume(i1 %106)
  %107 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item" addrspace(4)* %17, i64 0, i32 2, i32 3, i32 0, i32 0, i64 2
  %108 = load i64, i64 addrspace(4)* %107, align 8
  %109 = icmp ult i64 %108, 2147483648
  %i1promo1 = zext i1 %109 to i8
  %110 = trunc i8 %i1promo1 to i1
  call void @llvm.assume(i1 %110)
  %111 = getelementptr inbounds %"class.sycl::_V1::nd_item", %"class.sycl::_V1::nd_item" addrspace(4)* %17, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 2
  %112 = load i64, i64 addrspace(4)* %111, align 8
  %113 = icmp ult i64 %112, 2147483648
  %i1promo2 = zext i1 %113 to i8
  %114 = trunc i8 %i1promo2 to i1
  call void @llvm.assume(i1 %114)
  %115 = mul nuw nsw i64 %108, %112
  %116 = add nuw nsw i64 %104, %115
  %117 = trunc i64 %116 to i32
  %118 = icmp ult i32 %117, %0
  br i1 %118, label %119, label %11084

119:                                              ; preds = %22
  %120 = shl i32 %117, 5
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %121
  %123 = load i32, i32 addrspace(4)* %122, align 4
  store i32 %123, i32* %23, align 4
  %124 = or i32 %120, 1
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %125
  %127 = load i32, i32 addrspace(4)* %126, align 4
  store i32 %127, i32* %24, align 4
  %128 = or i32 %120, 2
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %129
  %131 = load i32, i32 addrspace(4)* %130, align 4
  store i32 %131, i32* %25, align 4
  %132 = or i32 %120, 3
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %133
  %135 = load i32, i32 addrspace(4)* %134, align 4
  store i32 %135, i32* %26, align 4
  %136 = or i32 %120, 4
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %137
  %139 = load i32, i32 addrspace(4)* %138, align 4
  %140 = or i32 %120, 5
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %141
  %143 = load i32, i32 addrspace(4)* %142, align 4
  %144 = or i32 %120, 6
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %145
  %147 = load i32, i32 addrspace(4)* %146, align 4
  %148 = or i32 %120, 7
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %149
  %151 = load i32, i32 addrspace(4)* %150, align 4
  %152 = or i32 %120, 8
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %153
  %155 = load i32, i32 addrspace(4)* %154, align 4
  %156 = or i32 %120, 9
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %157
  %159 = load i32, i32 addrspace(4)* %158, align 4
  %160 = or i32 %120, 10
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %161
  %163 = load i32, i32 addrspace(4)* %162, align 4
  %164 = or i32 %120, 11
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %165
  %167 = load i32, i32 addrspace(4)* %166, align 4
  %168 = or i32 %120, 12
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %169
  %171 = load i32, i32 addrspace(4)* %170, align 4
  %172 = or i32 %120, 13
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %173
  %175 = load i32, i32 addrspace(4)* %174, align 4
  %176 = or i32 %120, 14
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %177
  %179 = load i32, i32 addrspace(4)* %178, align 4
  %180 = icmp eq i32 %179, -1
  %181 = select i1 %180, i32 0, i32 %179
  %182 = or i32 %120, 15
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %183
  %185 = load i32, i32 addrspace(4)* %184, align 4
  %186 = add i32 %123, %159
  %187 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %127, i32 %127, i32 25) #1
  %188 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %127, i32 %127, i32 14) #1
  %189 = lshr i32 %127, 3
  %190 = xor i32 %187, %188
  %191 = xor i32 %190, %189
  %192 = add i32 %186, %191
  %193 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %181, i32 %181, i32 15) #1
  %194 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %181, i32 %181, i32 13) #1
  %195 = lshr i32 %181, 10
  %196 = xor i32 %193, %194
  %197 = xor i32 %196, %195
  %198 = add i32 %192, %197
  %199 = add i32 %127, %163
  %200 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %131, i32 %131, i32 25) #1
  %201 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %131, i32 %131, i32 14) #1
  %202 = lshr i32 %131, 3
  %203 = xor i32 %200, %201
  %204 = xor i32 %203, %202
  %205 = add i32 %199, %204
  %206 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %185, i32 %185, i32 15) #1
  %207 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %185, i32 %185, i32 13) #1
  %208 = lshr i32 %185, 10
  %209 = xor i32 %206, %207
  %210 = xor i32 %209, %208
  %211 = add i32 %205, %210
  %212 = add i32 %131, %167
  %213 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %135, i32 %135, i32 25) #1
  %214 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %135, i32 %135, i32 14) #1
  %215 = lshr i32 %135, 3
  %216 = xor i32 %213, %214
  %217 = xor i32 %216, %215
  %218 = add i32 %212, %217
  %219 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %198, i32 %198, i32 15) #1
  %220 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %198, i32 %198, i32 13) #1
  %221 = lshr i32 %198, 10
  %222 = xor i32 %219, %220
  %223 = xor i32 %222, %221
  %224 = add i32 %218, %223
  %225 = add i32 %135, %171
  %226 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %139, i32 %139, i32 25) #1
  %227 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %139, i32 %139, i32 14) #1
  %228 = lshr i32 %139, 3
  %229 = xor i32 %226, %227
  %230 = xor i32 %229, %228
  %231 = add i32 %225, %230
  %232 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %211, i32 %211, i32 15) #1
  %233 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %211, i32 %211, i32 13) #1
  %234 = lshr i32 %211, 10
  %235 = xor i32 %232, %233
  %236 = xor i32 %235, %234
  %237 = add i32 %231, %236
  %238 = add i32 %139, %175
  %239 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %143, i32 %143, i32 25) #1
  %240 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %143, i32 %143, i32 14) #1
  %241 = lshr i32 %143, 3
  %242 = xor i32 %239, %240
  %243 = xor i32 %242, %241
  %244 = add i32 %238, %243
  %245 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %224, i32 %224, i32 15) #1
  %246 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %224, i32 %224, i32 13) #1
  %247 = lshr i32 %224, 10
  %248 = xor i32 %245, %246
  %249 = xor i32 %248, %247
  %250 = add i32 %244, %249
  %251 = add i32 %143, %181
  %252 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %147, i32 %147, i32 25) #1
  %253 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %147, i32 %147, i32 14) #1
  %254 = lshr i32 %147, 3
  %255 = xor i32 %252, %253
  %256 = xor i32 %255, %254
  %257 = add i32 %251, %256
  %258 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %237, i32 %237, i32 15) #1
  %259 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %237, i32 %237, i32 13) #1
  %260 = lshr i32 %237, 10
  %261 = xor i32 %258, %259
  %262 = xor i32 %261, %260
  %263 = add i32 %257, %262
  %264 = add i32 %147, %185
  %265 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %151, i32 %151, i32 25) #1
  %266 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %151, i32 %151, i32 14) #1
  %267 = lshr i32 %151, 3
  %268 = xor i32 %265, %266
  %269 = xor i32 %268, %267
  %270 = add i32 %264, %269
  %271 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %250, i32 %250, i32 15) #1
  %272 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %250, i32 %250, i32 13) #1
  %273 = lshr i32 %250, 10
  %274 = xor i32 %271, %272
  %275 = xor i32 %274, %273
  %276 = add i32 %270, %275
  %277 = add i32 %151, %198
  %278 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %155, i32 %155, i32 25) #1
  %279 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %155, i32 %155, i32 14) #1
  %280 = lshr i32 %155, 3
  %281 = xor i32 %278, %279
  %282 = xor i32 %281, %280
  %283 = add i32 %277, %282
  %284 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %263, i32 %263, i32 15) #1
  %285 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %263, i32 %263, i32 13) #1
  %286 = lshr i32 %263, 10
  %287 = xor i32 %284, %285
  %288 = xor i32 %287, %286
  %289 = add i32 %283, %288
  %290 = add i32 %155, %211
  %291 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %159, i32 %159, i32 25) #1
  %292 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %159, i32 %159, i32 14) #1
  %293 = lshr i32 %159, 3
  %294 = xor i32 %291, %292
  %295 = xor i32 %294, %293
  %296 = add i32 %290, %295
  %297 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %276, i32 %276, i32 15) #1
  %298 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %276, i32 %276, i32 13) #1
  %299 = lshr i32 %276, 10
  %300 = xor i32 %297, %298
  %301 = xor i32 %300, %299
  %302 = add i32 %296, %301
  %303 = add i32 %159, %224
  %304 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %163, i32 %163, i32 25) #1
  %305 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %163, i32 %163, i32 14) #1
  %306 = lshr i32 %163, 3
  %307 = xor i32 %304, %305
  %308 = xor i32 %307, %306
  %309 = add i32 %303, %308
  %310 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %289, i32 %289, i32 15) #1
  %311 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %289, i32 %289, i32 13) #1
  %312 = lshr i32 %289, 10
  %313 = xor i32 %310, %311
  %314 = xor i32 %313, %312
  %315 = add i32 %309, %314
  %316 = add i32 %163, %237
  %317 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %167, i32 %167, i32 25) #1
  %318 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %167, i32 %167, i32 14) #1
  %319 = lshr i32 %167, 3
  %320 = xor i32 %317, %318
  %321 = xor i32 %320, %319
  %322 = add i32 %316, %321
  %323 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %302, i32 %302, i32 15) #1
  %324 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %302, i32 %302, i32 13) #1
  %325 = lshr i32 %302, 10
  %326 = xor i32 %323, %324
  %327 = xor i32 %326, %325
  %328 = add i32 %322, %327
  %329 = add i32 %167, %250
  %330 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %171, i32 %171, i32 25) #1
  %331 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %171, i32 %171, i32 14) #1
  %332 = lshr i32 %171, 3
  %333 = xor i32 %330, %331
  %334 = xor i32 %333, %332
  %335 = add i32 %329, %334
  %336 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %315, i32 %315, i32 15) #1
  %337 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %315, i32 %315, i32 13) #1
  %338 = lshr i32 %315, 10
  %339 = xor i32 %336, %337
  %340 = xor i32 %339, %338
  %341 = add i32 %335, %340
  %342 = add i32 %171, %263
  %343 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %175, i32 %175, i32 25) #1
  %344 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %175, i32 %175, i32 14) #1
  %345 = lshr i32 %175, 3
  %346 = xor i32 %343, %344
  %347 = xor i32 %346, %345
  %348 = add i32 %342, %347
  %349 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %328, i32 %328, i32 15) #1
  %350 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %328, i32 %328, i32 13) #1
  %351 = lshr i32 %328, 10
  %352 = xor i32 %349, %350
  %353 = xor i32 %352, %351
  %354 = add i32 %348, %353
  %355 = add i32 %175, %276
  %356 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %181, i32 %181, i32 25) #1
  %357 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %181, i32 %181, i32 14) #1
  %358 = lshr i32 %181, 3
  %359 = xor i32 %356, %357
  %360 = xor i32 %359, %358
  %361 = add i32 %355, %360
  %362 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %341, i32 %341, i32 15) #1
  %363 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %341, i32 %341, i32 13) #1
  %364 = lshr i32 %341, 10
  %365 = xor i32 %362, %363
  %366 = xor i32 %365, %364
  %367 = add i32 %361, %366
  %368 = add i32 %181, %289
  %369 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %185, i32 %185, i32 25) #1
  %370 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %185, i32 %185, i32 14) #1
  %371 = lshr i32 %185, 3
  %372 = xor i32 %369, %370
  %373 = xor i32 %372, %371
  %374 = add i32 %368, %373
  %375 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %354, i32 %354, i32 15) #1
  %376 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %354, i32 %354, i32 13) #1
  %377 = lshr i32 %354, 10
  %378 = xor i32 %375, %376
  %379 = xor i32 %378, %377
  %380 = add i32 %374, %379
  %381 = add i32 %185, %302
  %382 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %198, i32 %198, i32 25) #1
  %383 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %198, i32 %198, i32 14) #1
  %384 = lshr i32 %198, 3
  %385 = xor i32 %382, %383
  %386 = xor i32 %385, %384
  %387 = add i32 %381, %386
  %388 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %367, i32 %367, i32 15) #1
  %389 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %367, i32 %367, i32 13) #1
  %390 = lshr i32 %367, 10
  %391 = xor i32 %388, %389
  %392 = xor i32 %391, %390
  %393 = add i32 %387, %392
  %394 = add i32 %123, -1731730782
  %395 = add i32 %123, -66549683
  %396 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %394, i32 %394, i32 26) #1
  %397 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %394, i32 %394, i32 21) #1
  %398 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %394, i32 %394, i32 7) #1
  %399 = xor i32 %396, %397
  %400 = xor i32 %399, %398
  %401 = and i32 %394, -905233677
  %402 = xor i32 %401, -1694144372
  %403 = add i32 %400, %402
  %404 = add i32 %403, 1899447441
  %405 = add i32 %404, %127
  %406 = add i32 %405, 528734635
  %407 = add i32 %405, 1542638877
  %408 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %395, i32 %395, i32 30) #1
  %409 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %395, i32 %395, i32 19) #1
  %410 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %395, i32 %395, i32 10) #1
  %411 = xor i32 %408, %409
  %412 = xor i32 %411, %410
  %413 = and i32 %395, -781301534
  %414 = or i32 %413, 704751109
  %415 = add i32 %412, %414
  %416 = add i32 %406, %415
  %417 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %407, i32 %407, i32 26) #1
  %418 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %407, i32 %407, i32 21) #1
  %419 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %407, i32 %407, i32 7) #1
  %420 = xor i32 %417, %418
  %421 = xor i32 %420, %419
  %422 = xor i32 %394, 1359893119
  %423 = and i32 %422, %407
  %424 = xor i32 %423, 1359893119
  %425 = add i32 %421, %424
  %426 = add i32 %425, -1245643825
  %427 = add i32 %426, %131
  %428 = add i32 %427, -1694144372
  %429 = add i32 %427, 1449989905
  %430 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %416, i32 %416, i32 30) #1
  %431 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %416, i32 %416, i32 19) #1
  %432 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %416, i32 %416, i32 10) #1
  %433 = xor i32 %430, %431
  %434 = xor i32 %433, %432
  %435 = or i32 %395, 1779033703
  %436 = and i32 %435, %416
  %437 = and i32 %395, 1779033703
  %438 = or i32 %436, %437
  %439 = add i32 %434, %438
  %440 = add i32 %428, %439
  %441 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %429, i32 %429, i32 26) #1
  %442 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %429, i32 %429, i32 21) #1
  %443 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %429, i32 %429, i32 7) #1
  %444 = xor i32 %441, %442
  %445 = xor i32 %444, %443
  %446 = xor i32 %407, %394
  %447 = and i32 %446, %429
  %448 = xor i32 %447, %394
  %449 = add i32 %445, %448
  %450 = add i32 %449, -373957723
  %451 = add i32 %450, %135
  %452 = add i32 %451, 1359893119
  %453 = add i32 %451, -1156040474
  %454 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %440, i32 %440, i32 30) #1
  %455 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %440, i32 %440, i32 19) #1
  %456 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %440, i32 %440, i32 10) #1
  %457 = xor i32 %454, %455
  %458 = xor i32 %457, %456
  %459 = or i32 %416, %395
  %460 = and i32 %459, %440
  %461 = and i32 %416, %395
  %462 = or i32 %460, %461
  %463 = add i32 %458, %462
  %464 = add i32 %452, %463
  %465 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %453, i32 %453, i32 26) #1
  %466 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %453, i32 %453, i32 21) #1
  %467 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %453, i32 %453, i32 7) #1
  %468 = xor i32 %465, %466
  %469 = xor i32 %468, %467
  %470 = xor i32 %429, %407
  %471 = and i32 %470, %453
  %472 = xor i32 %471, %407
  %473 = add i32 %469, %472
  %474 = add i32 %473, 961987163
  %475 = add i32 %474, %139
  %476 = add i32 %394, %475
  %477 = add i32 %395, %476
  %478 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %464, i32 %464, i32 30) #1
  %479 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %464, i32 %464, i32 19) #1
  %480 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %464, i32 %464, i32 10) #1
  %481 = xor i32 %478, %479
  %482 = xor i32 %481, %480
  %483 = or i32 %440, %416
  %484 = and i32 %483, %464
  %485 = and i32 %440, %416
  %486 = or i32 %484, %485
  %487 = add i32 %482, %486
  %488 = add i32 %476, %487
  %489 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %477, i32 %477, i32 26) #1
  %490 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %477, i32 %477, i32 21) #1
  %491 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %477, i32 %477, i32 7) #1
  %492 = xor i32 %489, %490
  %493 = xor i32 %492, %491
  %494 = xor i32 %453, %429
  %495 = and i32 %494, %477
  %496 = xor i32 %495, %429
  %497 = add i32 %493, %496
  %498 = add i32 %497, 1508970993
  %499 = add i32 %498, %143
  %500 = add i32 %407, %499
  %501 = add i32 %416, %500
  %502 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %488, i32 %488, i32 30) #1
  %503 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %488, i32 %488, i32 19) #1
  %504 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %488, i32 %488, i32 10) #1
  %505 = xor i32 %502, %503
  %506 = xor i32 %505, %504
  %507 = or i32 %464, %440
  %508 = and i32 %507, %488
  %509 = and i32 %464, %440
  %510 = or i32 %508, %509
  %511 = add i32 %506, %510
  %512 = add i32 %500, %511
  %513 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %501, i32 %501, i32 26) #1
  %514 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %501, i32 %501, i32 21) #1
  %515 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %501, i32 %501, i32 7) #1
  %516 = xor i32 %513, %514
  %517 = xor i32 %516, %515
  %518 = xor i32 %477, %453
  %519 = and i32 %518, %501
  %520 = xor i32 %519, %453
  %521 = add i32 %517, %520
  %522 = add i32 %521, -1841331548
  %523 = add i32 %522, %147
  %524 = add i32 %429, %523
  %525 = add i32 %440, %524
  %526 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %512, i32 %512, i32 30) #1
  %527 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %512, i32 %512, i32 19) #1
  %528 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %512, i32 %512, i32 10) #1
  %529 = xor i32 %526, %527
  %530 = xor i32 %529, %528
  %531 = or i32 %488, %464
  %532 = and i32 %531, %512
  %533 = and i32 %488, %464
  %534 = or i32 %532, %533
  %535 = add i32 %530, %534
  %536 = add i32 %524, %535
  %537 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %525, i32 %525, i32 26) #1
  %538 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %525, i32 %525, i32 21) #1
  %539 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %525, i32 %525, i32 7) #1
  %540 = xor i32 %537, %538
  %541 = xor i32 %540, %539
  %542 = xor i32 %501, %477
  %543 = and i32 %542, %525
  %544 = xor i32 %543, %477
  %545 = add i32 %541, %544
  %546 = add i32 %545, -1424204075
  %547 = add i32 %546, %151
  %548 = add i32 %453, %547
  %549 = add i32 %464, %548
  %550 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %536, i32 %536, i32 30) #1
  %551 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %536, i32 %536, i32 19) #1
  %552 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %536, i32 %536, i32 10) #1
  %553 = xor i32 %550, %551
  %554 = xor i32 %553, %552
  %555 = or i32 %512, %488
  %556 = and i32 %555, %536
  %557 = and i32 %512, %488
  %558 = or i32 %556, %557
  %559 = add i32 %554, %558
  %560 = add i32 %548, %559
  %561 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %549, i32 %549, i32 26) #1
  %562 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %549, i32 %549, i32 21) #1
  %563 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %549, i32 %549, i32 7) #1
  %564 = xor i32 %561, %562
  %565 = xor i32 %564, %563
  %566 = xor i32 %525, %501
  %567 = and i32 %566, %549
  %568 = xor i32 %567, %501
  %569 = add i32 %565, %568
  %570 = add i32 %569, -670586216
  %571 = add i32 %570, %155
  %572 = add i32 %477, %571
  %573 = add i32 %488, %572
  %574 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %560, i32 %560, i32 30) #1
  %575 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %560, i32 %560, i32 19) #1
  %576 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %560, i32 %560, i32 10) #1
  %577 = xor i32 %574, %575
  %578 = xor i32 %577, %576
  %579 = or i32 %536, %512
  %580 = and i32 %579, %560
  %581 = and i32 %536, %512
  %582 = or i32 %580, %581
  %583 = add i32 %578, %582
  %584 = add i32 %572, %583
  %585 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %573, i32 %573, i32 26) #1
  %586 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %573, i32 %573, i32 21) #1
  %587 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %573, i32 %573, i32 7) #1
  %588 = xor i32 %585, %586
  %589 = xor i32 %588, %587
  %590 = xor i32 %549, %525
  %591 = and i32 %590, %573
  %592 = xor i32 %591, %525
  %593 = add i32 %589, %592
  %594 = add i32 %593, 310598401
  %595 = add i32 %594, %159
  %596 = add i32 %501, %595
  %597 = add i32 %512, %596
  %598 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %584, i32 %584, i32 30) #1
  %599 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %584, i32 %584, i32 19) #1
  %600 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %584, i32 %584, i32 10) #1
  %601 = xor i32 %598, %599
  %602 = xor i32 %601, %600
  %603 = or i32 %560, %536
  %604 = and i32 %603, %584
  %605 = and i32 %560, %536
  %606 = or i32 %604, %605
  %607 = add i32 %602, %606
  %608 = add i32 %596, %607
  %609 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %597, i32 %597, i32 26) #1
  %610 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %597, i32 %597, i32 21) #1
  %611 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %597, i32 %597, i32 7) #1
  %612 = xor i32 %609, %610
  %613 = xor i32 %612, %611
  %614 = xor i32 %573, %549
  %615 = and i32 %614, %597
  %616 = xor i32 %615, %549
  %617 = add i32 %613, %616
  %618 = add i32 %617, 607225278
  %619 = add i32 %618, %163
  %620 = add i32 %525, %619
  %621 = add i32 %536, %620
  %622 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %608, i32 %608, i32 30) #1
  %623 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %608, i32 %608, i32 19) #1
  %624 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %608, i32 %608, i32 10) #1
  %625 = xor i32 %622, %623
  %626 = xor i32 %625, %624
  %627 = or i32 %584, %560
  %628 = and i32 %627, %608
  %629 = and i32 %584, %560
  %630 = or i32 %628, %629
  %631 = add i32 %626, %630
  %632 = add i32 %620, %631
  %633 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %621, i32 %621, i32 26) #1
  %634 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %621, i32 %621, i32 21) #1
  %635 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %621, i32 %621, i32 7) #1
  %636 = xor i32 %633, %634
  %637 = xor i32 %636, %635
  %638 = xor i32 %597, %573
  %639 = and i32 %638, %621
  %640 = xor i32 %639, %573
  %641 = add i32 %637, %640
  %642 = add i32 %641, 1426881987
  %643 = add i32 %642, %167
  %644 = add i32 %549, %643
  %645 = add i32 %560, %644
  %646 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %632, i32 %632, i32 30) #1
  %647 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %632, i32 %632, i32 19) #1
  %648 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %632, i32 %632, i32 10) #1
  %649 = xor i32 %646, %647
  %650 = xor i32 %649, %648
  %651 = or i32 %608, %584
  %652 = and i32 %651, %632
  %653 = and i32 %608, %584
  %654 = or i32 %652, %653
  %655 = add i32 %650, %654
  %656 = add i32 %644, %655
  %657 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %645, i32 %645, i32 26) #1
  %658 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %645, i32 %645, i32 21) #1
  %659 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %645, i32 %645, i32 7) #1
  %660 = xor i32 %657, %658
  %661 = xor i32 %660, %659
  %662 = xor i32 %621, %597
  %663 = and i32 %662, %645
  %664 = xor i32 %663, %597
  %665 = add i32 %661, %664
  %666 = add i32 %665, 1925078388
  %667 = add i32 %666, %171
  %668 = add i32 %573, %667
  %669 = add i32 %584, %668
  %670 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %656, i32 %656, i32 30) #1
  %671 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %656, i32 %656, i32 19) #1
  %672 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %656, i32 %656, i32 10) #1
  %673 = xor i32 %670, %671
  %674 = xor i32 %673, %672
  %675 = or i32 %632, %608
  %676 = and i32 %675, %656
  %677 = and i32 %632, %608
  %678 = or i32 %676, %677
  %679 = add i32 %674, %678
  %680 = add i32 %668, %679
  %681 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %669, i32 %669, i32 26) #1
  %682 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %669, i32 %669, i32 21) #1
  %683 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %669, i32 %669, i32 7) #1
  %684 = xor i32 %681, %682
  %685 = xor i32 %684, %683
  %686 = xor i32 %645, %621
  %687 = and i32 %686, %669
  %688 = xor i32 %687, %621
  %689 = add i32 %685, %688
  %690 = add i32 %689, -2132889090
  %691 = add i32 %690, %175
  %692 = add i32 %597, %691
  %693 = add i32 %608, %692
  %694 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %680, i32 %680, i32 30) #1
  %695 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %680, i32 %680, i32 19) #1
  %696 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %680, i32 %680, i32 10) #1
  %697 = xor i32 %694, %695
  %698 = xor i32 %697, %696
  %699 = or i32 %656, %632
  %700 = and i32 %699, %680
  %701 = and i32 %656, %632
  %702 = or i32 %700, %701
  %703 = add i32 %698, %702
  %704 = add i32 %692, %703
  %705 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %693, i32 %693, i32 26) #1
  %706 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %693, i32 %693, i32 21) #1
  %707 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %693, i32 %693, i32 7) #1
  %708 = xor i32 %705, %706
  %709 = xor i32 %708, %707
  %710 = xor i32 %669, %645
  %711 = and i32 %710, %693
  %712 = xor i32 %711, %645
  %713 = add i32 %709, %712
  %714 = add i32 %713, -1680079193
  %715 = add i32 %714, %181
  %716 = add i32 %621, %715
  %717 = add i32 %632, %716
  %718 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %704, i32 %704, i32 30) #1
  %719 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %704, i32 %704, i32 19) #1
  %720 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %704, i32 %704, i32 10) #1
  %721 = xor i32 %718, %719
  %722 = xor i32 %721, %720
  %723 = or i32 %680, %656
  %724 = and i32 %723, %704
  %725 = and i32 %680, %656
  %726 = or i32 %724, %725
  %727 = add i32 %722, %726
  %728 = add i32 %716, %727
  %729 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %717, i32 %717, i32 26) #1
  %730 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %717, i32 %717, i32 21) #1
  %731 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %717, i32 %717, i32 7) #1
  %732 = xor i32 %729, %730
  %733 = xor i32 %732, %731
  %734 = xor i32 %693, %669
  %735 = and i32 %734, %717
  %736 = xor i32 %735, %669
  %737 = add i32 %733, %736
  %738 = add i32 %737, -1046744716
  %739 = add i32 %738, %185
  %740 = add i32 %645, %739
  %741 = add i32 %656, %740
  %742 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %728, i32 %728, i32 30) #1
  %743 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %728, i32 %728, i32 19) #1
  %744 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %728, i32 %728, i32 10) #1
  %745 = xor i32 %742, %743
  %746 = xor i32 %745, %744
  %747 = or i32 %704, %680
  %748 = and i32 %747, %728
  %749 = and i32 %704, %680
  %750 = or i32 %748, %749
  %751 = add i32 %746, %750
  %752 = add i32 %740, %751
  %753 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %741, i32 %741, i32 26) #1
  %754 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %741, i32 %741, i32 21) #1
  %755 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %741, i32 %741, i32 7) #1
  %756 = xor i32 %753, %754
  %757 = xor i32 %756, %755
  %758 = xor i32 %717, %693
  %759 = and i32 %758, %741
  %760 = xor i32 %759, %693
  %761 = add i32 %757, %760
  %762 = add i32 %761, -459576895
  %763 = add i32 %762, %198
  %764 = add i32 %669, %763
  %765 = add i32 %680, %764
  %766 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %752, i32 %752, i32 30) #1
  %767 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %752, i32 %752, i32 19) #1
  %768 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %752, i32 %752, i32 10) #1
  %769 = xor i32 %766, %767
  %770 = xor i32 %769, %768
  %771 = or i32 %728, %704
  %772 = and i32 %771, %752
  %773 = and i32 %728, %704
  %774 = or i32 %772, %773
  %775 = add i32 %770, %774
  %776 = add i32 %764, %775
  %777 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %765, i32 %765, i32 26) #1
  %778 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %765, i32 %765, i32 21) #1
  %779 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %765, i32 %765, i32 7) #1
  %780 = xor i32 %777, %778
  %781 = xor i32 %780, %779
  %782 = xor i32 %741, %717
  %783 = and i32 %782, %765
  %784 = xor i32 %783, %717
  %785 = add i32 %781, %784
  %786 = add i32 %785, -272742522
  %787 = add i32 %786, %211
  %788 = add i32 %693, %787
  %789 = add i32 %704, %788
  %790 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %776, i32 %776, i32 30) #1
  %791 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %776, i32 %776, i32 19) #1
  %792 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %776, i32 %776, i32 10) #1
  %793 = xor i32 %790, %791
  %794 = xor i32 %793, %792
  %795 = or i32 %752, %728
  %796 = and i32 %795, %776
  %797 = and i32 %752, %728
  %798 = or i32 %796, %797
  %799 = add i32 %794, %798
  %800 = add i32 %788, %799
  %801 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %789, i32 %789, i32 26) #1
  %802 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %789, i32 %789, i32 21) #1
  %803 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %789, i32 %789, i32 7) #1
  %804 = xor i32 %801, %802
  %805 = xor i32 %804, %803
  %806 = xor i32 %765, %741
  %807 = and i32 %806, %789
  %808 = xor i32 %807, %741
  %809 = add i32 %805, %808
  %810 = add i32 %809, 264347078
  %811 = add i32 %810, %224
  %812 = add i32 %717, %811
  %813 = add i32 %728, %812
  %814 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %800, i32 %800, i32 30) #1
  %815 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %800, i32 %800, i32 19) #1
  %816 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %800, i32 %800, i32 10) #1
  %817 = xor i32 %814, %815
  %818 = xor i32 %817, %816
  %819 = or i32 %776, %752
  %820 = and i32 %819, %800
  %821 = and i32 %776, %752
  %822 = or i32 %820, %821
  %823 = add i32 %818, %822
  %824 = add i32 %812, %823
  %825 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %813, i32 %813, i32 26) #1
  %826 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %813, i32 %813, i32 21) #1
  %827 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %813, i32 %813, i32 7) #1
  %828 = xor i32 %825, %826
  %829 = xor i32 %828, %827
  %830 = xor i32 %789, %765
  %831 = and i32 %830, %813
  %832 = xor i32 %831, %765
  %833 = add i32 %829, %832
  %834 = add i32 %833, 604807628
  %835 = add i32 %834, %237
  %836 = add i32 %741, %835
  %837 = add i32 %752, %836
  %838 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %824, i32 %824, i32 30) #1
  %839 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %824, i32 %824, i32 19) #1
  %840 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %824, i32 %824, i32 10) #1
  %841 = xor i32 %838, %839
  %842 = xor i32 %841, %840
  %843 = or i32 %800, %776
  %844 = and i32 %843, %824
  %845 = and i32 %800, %776
  %846 = or i32 %844, %845
  %847 = add i32 %842, %846
  %848 = add i32 %836, %847
  %849 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %837, i32 %837, i32 26) #1
  %850 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %837, i32 %837, i32 21) #1
  %851 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %837, i32 %837, i32 7) #1
  %852 = xor i32 %849, %850
  %853 = xor i32 %852, %851
  %854 = xor i32 %813, %789
  %855 = and i32 %854, %837
  %856 = xor i32 %855, %789
  %857 = add i32 %853, %856
  %858 = add i32 %857, 770255983
  %859 = add i32 %858, %250
  %860 = add i32 %765, %859
  %861 = add i32 %776, %860
  %862 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %848, i32 %848, i32 30) #1
  %863 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %848, i32 %848, i32 19) #1
  %864 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %848, i32 %848, i32 10) #1
  %865 = xor i32 %862, %863
  %866 = xor i32 %865, %864
  %867 = or i32 %824, %800
  %868 = and i32 %867, %848
  %869 = and i32 %824, %800
  %870 = or i32 %868, %869
  %871 = add i32 %866, %870
  %872 = add i32 %860, %871
  %873 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %861, i32 %861, i32 26) #1
  %874 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %861, i32 %861, i32 21) #1
  %875 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %861, i32 %861, i32 7) #1
  %876 = xor i32 %873, %874
  %877 = xor i32 %876, %875
  %878 = xor i32 %837, %813
  %879 = and i32 %878, %861
  %880 = xor i32 %879, %813
  %881 = add i32 %877, %880
  %882 = add i32 %881, 1249150122
  %883 = add i32 %882, %263
  %884 = add i32 %789, %883
  %885 = add i32 %800, %884
  %886 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %872, i32 %872, i32 30) #1
  %887 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %872, i32 %872, i32 19) #1
  %888 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %872, i32 %872, i32 10) #1
  %889 = xor i32 %886, %887
  %890 = xor i32 %889, %888
  %891 = or i32 %848, %824
  %892 = and i32 %891, %872
  %893 = and i32 %848, %824
  %894 = or i32 %892, %893
  %895 = add i32 %890, %894
  %896 = add i32 %884, %895
  %897 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %885, i32 %885, i32 26) #1
  %898 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %885, i32 %885, i32 21) #1
  %899 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %885, i32 %885, i32 7) #1
  %900 = xor i32 %897, %898
  %901 = xor i32 %900, %899
  %902 = xor i32 %861, %837
  %903 = and i32 %902, %885
  %904 = xor i32 %903, %837
  %905 = add i32 %901, %904
  %906 = add i32 %905, 1555081692
  %907 = add i32 %906, %276
  %908 = add i32 %813, %907
  %909 = add i32 %824, %908
  %910 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %896, i32 %896, i32 30) #1
  %911 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %896, i32 %896, i32 19) #1
  %912 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %896, i32 %896, i32 10) #1
  %913 = xor i32 %910, %911
  %914 = xor i32 %913, %912
  %915 = or i32 %872, %848
  %916 = and i32 %915, %896
  %917 = and i32 %872, %848
  %918 = or i32 %916, %917
  %919 = add i32 %914, %918
  %920 = add i32 %908, %919
  %921 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %909, i32 %909, i32 26) #1
  %922 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %909, i32 %909, i32 21) #1
  %923 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %909, i32 %909, i32 7) #1
  %924 = xor i32 %921, %922
  %925 = xor i32 %924, %923
  %926 = xor i32 %885, %861
  %927 = and i32 %926, %909
  %928 = xor i32 %927, %861
  %929 = add i32 %925, %928
  %930 = add i32 %929, 1996064986
  %931 = add i32 %930, %289
  %932 = add i32 %837, %931
  %933 = add i32 %848, %932
  %934 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %920, i32 %920, i32 30) #1
  %935 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %920, i32 %920, i32 19) #1
  %936 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %920, i32 %920, i32 10) #1
  %937 = xor i32 %934, %935
  %938 = xor i32 %937, %936
  %939 = or i32 %896, %872
  %940 = and i32 %939, %920
  %941 = and i32 %896, %872
  %942 = or i32 %940, %941
  %943 = add i32 %938, %942
  %944 = add i32 %932, %943
  %945 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %933, i32 %933, i32 26) #1
  %946 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %933, i32 %933, i32 21) #1
  %947 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %933, i32 %933, i32 7) #1
  %948 = xor i32 %945, %946
  %949 = xor i32 %948, %947
  %950 = xor i32 %909, %885
  %951 = and i32 %950, %933
  %952 = xor i32 %951, %885
  %953 = add i32 %949, %952
  %954 = add i32 %953, -1740746414
  %955 = add i32 %954, %302
  %956 = add i32 %861, %955
  %957 = add i32 %872, %956
  %958 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %944, i32 %944, i32 30) #1
  %959 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %944, i32 %944, i32 19) #1
  %960 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %944, i32 %944, i32 10) #1
  %961 = xor i32 %958, %959
  %962 = xor i32 %961, %960
  %963 = or i32 %920, %896
  %964 = and i32 %963, %944
  %965 = and i32 %920, %896
  %966 = or i32 %964, %965
  %967 = add i32 %962, %966
  %968 = add i32 %956, %967
  %969 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %957, i32 %957, i32 26) #1
  %970 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %957, i32 %957, i32 21) #1
  %971 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %957, i32 %957, i32 7) #1
  %972 = xor i32 %969, %970
  %973 = xor i32 %972, %971
  %974 = xor i32 %933, %909
  %975 = and i32 %974, %957
  %976 = xor i32 %975, %909
  %977 = add i32 %973, %976
  %978 = add i32 %977, -1473132947
  %979 = add i32 %978, %315
  %980 = add i32 %885, %979
  %981 = add i32 %896, %980
  %982 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %968, i32 %968, i32 30) #1
  %983 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %968, i32 %968, i32 19) #1
  %984 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %968, i32 %968, i32 10) #1
  %985 = xor i32 %982, %983
  %986 = xor i32 %985, %984
  %987 = or i32 %944, %920
  %988 = and i32 %987, %968
  %989 = and i32 %944, %920
  %990 = or i32 %988, %989
  %991 = add i32 %986, %990
  %992 = add i32 %980, %991
  %993 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %981, i32 %981, i32 26) #1
  %994 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %981, i32 %981, i32 21) #1
  %995 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %981, i32 %981, i32 7) #1
  %996 = xor i32 %993, %994
  %997 = xor i32 %996, %995
  %998 = xor i32 %957, %933
  %999 = and i32 %998, %981
  %1000 = xor i32 %999, %933
  %1001 = add i32 %997, %1000
  %1002 = add i32 %1001, -1341970488
  %1003 = add i32 %1002, %328
  %1004 = add i32 %909, %1003
  %1005 = add i32 %920, %1004
  %1006 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %992, i32 %992, i32 30) #1
  %1007 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %992, i32 %992, i32 19) #1
  %1008 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %992, i32 %992, i32 10) #1
  %1009 = xor i32 %1006, %1007
  %1010 = xor i32 %1009, %1008
  %1011 = or i32 %968, %944
  %1012 = and i32 %1011, %992
  %1013 = and i32 %968, %944
  %1014 = or i32 %1012, %1013
  %1015 = add i32 %1010, %1014
  %1016 = add i32 %1004, %1015
  %1017 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1005, i32 %1005, i32 26) #1
  %1018 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1005, i32 %1005, i32 21) #1
  %1019 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1005, i32 %1005, i32 7) #1
  %1020 = xor i32 %1017, %1018
  %1021 = xor i32 %1020, %1019
  %1022 = xor i32 %981, %957
  %1023 = and i32 %1022, %1005
  %1024 = xor i32 %1023, %957
  %1025 = add i32 %1021, %1024
  %1026 = add i32 %1025, -1084653625
  %1027 = add i32 %1026, %341
  %1028 = add i32 %933, %1027
  %1029 = add i32 %944, %1028
  %1030 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1016, i32 %1016, i32 30) #1
  %1031 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1016, i32 %1016, i32 19) #1
  %1032 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1016, i32 %1016, i32 10) #1
  %1033 = xor i32 %1030, %1031
  %1034 = xor i32 %1033, %1032
  %1035 = or i32 %992, %968
  %1036 = and i32 %1035, %1016
  %1037 = and i32 %992, %968
  %1038 = or i32 %1036, %1037
  %1039 = add i32 %1034, %1038
  %1040 = add i32 %1028, %1039
  %1041 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1029, i32 %1029, i32 26) #1
  %1042 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1029, i32 %1029, i32 21) #1
  %1043 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1029, i32 %1029, i32 7) #1
  %1044 = xor i32 %1041, %1042
  %1045 = xor i32 %1044, %1043
  %1046 = xor i32 %1005, %981
  %1047 = and i32 %1046, %1029
  %1048 = xor i32 %1047, %981
  %1049 = add i32 %1045, %1048
  %1050 = add i32 %1049, -958395405
  %1051 = add i32 %1050, %354
  %1052 = add i32 %957, %1051
  %1053 = add i32 %968, %1052
  %1054 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1040, i32 %1040, i32 30) #1
  %1055 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1040, i32 %1040, i32 19) #1
  %1056 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1040, i32 %1040, i32 10) #1
  %1057 = xor i32 %1054, %1055
  %1058 = xor i32 %1057, %1056
  %1059 = or i32 %1016, %992
  %1060 = and i32 %1059, %1040
  %1061 = and i32 %1016, %992
  %1062 = or i32 %1060, %1061
  %1063 = add i32 %1058, %1062
  %1064 = add i32 %1052, %1063
  %1065 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1053, i32 %1053, i32 26) #1
  %1066 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1053, i32 %1053, i32 21) #1
  %1067 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1053, i32 %1053, i32 7) #1
  %1068 = xor i32 %1065, %1066
  %1069 = xor i32 %1068, %1067
  %1070 = xor i32 %1029, %1005
  %1071 = and i32 %1070, %1053
  %1072 = xor i32 %1071, %1005
  %1073 = add i32 %1069, %1072
  %1074 = add i32 %1073, -710438585
  %1075 = add i32 %1074, %367
  %1076 = add i32 %981, %1075
  %1077 = add i32 %992, %1076
  %1078 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1064, i32 %1064, i32 30) #1
  %1079 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1064, i32 %1064, i32 19) #1
  %1080 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1064, i32 %1064, i32 10) #1
  %1081 = xor i32 %1078, %1079
  %1082 = xor i32 %1081, %1080
  %1083 = or i32 %1040, %1016
  %1084 = and i32 %1083, %1064
  %1085 = and i32 %1040, %1016
  %1086 = or i32 %1084, %1085
  %1087 = add i32 %1082, %1086
  %1088 = add i32 %1076, %1087
  %1089 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1077, i32 %1077, i32 26) #1
  %1090 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1077, i32 %1077, i32 21) #1
  %1091 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1077, i32 %1077, i32 7) #1
  %1092 = xor i32 %1089, %1090
  %1093 = xor i32 %1092, %1091
  %1094 = xor i32 %1053, %1029
  %1095 = and i32 %1094, %1077
  %1096 = xor i32 %1095, %1029
  %1097 = add i32 %1093, %1096
  %1098 = add i32 %1097, 113926993
  %1099 = add i32 %1098, %380
  %1100 = add i32 %1005, %1099
  %1101 = add i32 %1016, %1100
  %1102 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1088, i32 %1088, i32 30) #1
  %1103 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1088, i32 %1088, i32 19) #1
  %1104 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1088, i32 %1088, i32 10) #1
  %1105 = xor i32 %1102, %1103
  %1106 = xor i32 %1105, %1104
  %1107 = or i32 %1064, %1040
  %1108 = and i32 %1107, %1088
  %1109 = and i32 %1064, %1040
  %1110 = or i32 %1108, %1109
  %1111 = add i32 %1106, %1110
  %1112 = add i32 %1100, %1111
  %1113 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1101, i32 %1101, i32 26) #1
  %1114 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1101, i32 %1101, i32 21) #1
  %1115 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1101, i32 %1101, i32 7) #1
  %1116 = xor i32 %1113, %1114
  %1117 = xor i32 %1116, %1115
  %1118 = xor i32 %1077, %1053
  %1119 = and i32 %1118, %1101
  %1120 = xor i32 %1119, %1053
  %1121 = add i32 %1117, %1120
  %1122 = add i32 %1121, 338241895
  %1123 = add i32 %1122, %393
  %1124 = add i32 %1029, %1123
  %1125 = add i32 %1040, %1124
  %1126 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1112, i32 %1112, i32 30) #1
  %1127 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1112, i32 %1112, i32 19) #1
  %1128 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1112, i32 %1112, i32 10) #1
  %1129 = xor i32 %1126, %1127
  %1130 = xor i32 %1129, %1128
  %1131 = or i32 %1088, %1064
  %1132 = and i32 %1131, %1112
  %1133 = and i32 %1088, %1064
  %1134 = or i32 %1132, %1133
  %1135 = add i32 %1130, %1134
  %1136 = add i32 %1124, %1135
  %1137 = add i32 %198, %315
  %1138 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %211, i32 %211, i32 25) #1
  %1139 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %211, i32 %211, i32 14) #1
  %1140 = lshr i32 %211, 3
  %1141 = xor i32 %1138, %1139
  %1142 = xor i32 %1141, %1140
  %1143 = add i32 %1137, %1142
  %1144 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %380, i32 %380, i32 15) #1
  %1145 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %380, i32 %380, i32 13) #1
  %1146 = lshr i32 %380, 10
  %1147 = xor i32 %1144, %1145
  %1148 = xor i32 %1147, %1146
  %1149 = add i32 %1143, %1148
  %1150 = add i32 %211, %328
  %1151 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %224, i32 %224, i32 25) #1
  %1152 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %224, i32 %224, i32 14) #1
  %1153 = lshr i32 %224, 3
  %1154 = xor i32 %1151, %1152
  %1155 = xor i32 %1154, %1153
  %1156 = add i32 %1150, %1155
  %1157 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %393, i32 %393, i32 15) #1
  %1158 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %393, i32 %393, i32 13) #1
  %1159 = lshr i32 %393, 10
  %1160 = xor i32 %1157, %1158
  %1161 = xor i32 %1160, %1159
  %1162 = add i32 %1156, %1161
  %1163 = add i32 %224, %341
  %1164 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %237, i32 %237, i32 25) #1
  %1165 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %237, i32 %237, i32 14) #1
  %1166 = lshr i32 %237, 3
  %1167 = xor i32 %1164, %1165
  %1168 = xor i32 %1167, %1166
  %1169 = add i32 %1163, %1168
  %1170 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1149, i32 %1149, i32 15) #1
  %1171 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1149, i32 %1149, i32 13) #1
  %1172 = lshr i32 %1149, 10
  %1173 = xor i32 %1170, %1171
  %1174 = xor i32 %1173, %1172
  %1175 = add i32 %1169, %1174
  %1176 = add i32 %237, %354
  %1177 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %250, i32 %250, i32 25) #1
  %1178 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %250, i32 %250, i32 14) #1
  %1179 = lshr i32 %250, 3
  %1180 = xor i32 %1177, %1178
  %1181 = xor i32 %1180, %1179
  %1182 = add i32 %1176, %1181
  %1183 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1162, i32 %1162, i32 15) #1
  %1184 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1162, i32 %1162, i32 13) #1
  %1185 = lshr i32 %1162, 10
  %1186 = xor i32 %1183, %1184
  %1187 = xor i32 %1186, %1185
  %1188 = add i32 %1182, %1187
  %1189 = add i32 %250, %367
  %1190 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %263, i32 %263, i32 25) #1
  %1191 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %263, i32 %263, i32 14) #1
  %1192 = lshr i32 %263, 3
  %1193 = xor i32 %1190, %1191
  %1194 = xor i32 %1193, %1192
  %1195 = add i32 %1189, %1194
  %1196 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1175, i32 %1175, i32 15) #1
  %1197 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1175, i32 %1175, i32 13) #1
  %1198 = lshr i32 %1175, 10
  %1199 = xor i32 %1196, %1197
  %1200 = xor i32 %1199, %1198
  %1201 = add i32 %1195, %1200
  %1202 = add i32 %263, %380
  %1203 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %276, i32 %276, i32 25) #1
  %1204 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %276, i32 %276, i32 14) #1
  %1205 = lshr i32 %276, 3
  %1206 = xor i32 %1203, %1204
  %1207 = xor i32 %1206, %1205
  %1208 = add i32 %1202, %1207
  %1209 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1188, i32 %1188, i32 15) #1
  %1210 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1188, i32 %1188, i32 13) #1
  %1211 = lshr i32 %1188, 10
  %1212 = xor i32 %1209, %1210
  %1213 = xor i32 %1212, %1211
  %1214 = add i32 %1208, %1213
  %1215 = add i32 %276, %393
  %1216 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %289, i32 %289, i32 25) #1
  %1217 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %289, i32 %289, i32 14) #1
  %1218 = lshr i32 %289, 3
  %1219 = xor i32 %1216, %1217
  %1220 = xor i32 %1219, %1218
  %1221 = add i32 %1215, %1220
  %1222 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1201, i32 %1201, i32 15) #1
  %1223 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1201, i32 %1201, i32 13) #1
  %1224 = lshr i32 %1201, 10
  %1225 = xor i32 %1222, %1223
  %1226 = xor i32 %1225, %1224
  %1227 = add i32 %1221, %1226
  %1228 = add i32 %289, %1149
  %1229 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %302, i32 %302, i32 25) #1
  %1230 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %302, i32 %302, i32 14) #1
  %1231 = lshr i32 %302, 3
  %1232 = xor i32 %1229, %1230
  %1233 = xor i32 %1232, %1231
  %1234 = add i32 %1228, %1233
  %1235 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1214, i32 %1214, i32 15) #1
  %1236 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1214, i32 %1214, i32 13) #1
  %1237 = lshr i32 %1214, 10
  %1238 = xor i32 %1235, %1236
  %1239 = xor i32 %1238, %1237
  %1240 = add i32 %1234, %1239
  %1241 = add i32 %302, %1162
  %1242 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %315, i32 %315, i32 25) #1
  %1243 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %315, i32 %315, i32 14) #1
  %1244 = lshr i32 %315, 3
  %1245 = xor i32 %1242, %1243
  %1246 = xor i32 %1245, %1244
  %1247 = add i32 %1241, %1246
  %1248 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1227, i32 %1227, i32 15) #1
  %1249 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1227, i32 %1227, i32 13) #1
  %1250 = lshr i32 %1227, 10
  %1251 = xor i32 %1248, %1249
  %1252 = xor i32 %1251, %1250
  %1253 = add i32 %1247, %1252
  %1254 = add i32 %315, %1175
  %1255 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %328, i32 %328, i32 25) #1
  %1256 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %328, i32 %328, i32 14) #1
  %1257 = lshr i32 %328, 3
  %1258 = xor i32 %1255, %1256
  %1259 = xor i32 %1258, %1257
  %1260 = add i32 %1254, %1259
  %1261 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1240, i32 %1240, i32 15) #1
  %1262 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1240, i32 %1240, i32 13) #1
  %1263 = lshr i32 %1240, 10
  %1264 = xor i32 %1261, %1262
  %1265 = xor i32 %1264, %1263
  %1266 = add i32 %1260, %1265
  %1267 = add i32 %328, %1188
  %1268 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %341, i32 %341, i32 25) #1
  %1269 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %341, i32 %341, i32 14) #1
  %1270 = lshr i32 %341, 3
  %1271 = xor i32 %1268, %1269
  %1272 = xor i32 %1271, %1270
  %1273 = add i32 %1267, %1272
  %1274 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1253, i32 %1253, i32 15) #1
  %1275 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1253, i32 %1253, i32 13) #1
  %1276 = lshr i32 %1253, 10
  %1277 = xor i32 %1274, %1275
  %1278 = xor i32 %1277, %1276
  %1279 = add i32 %1273, %1278
  %1280 = add i32 %341, %1201
  %1281 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %354, i32 %354, i32 25) #1
  %1282 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %354, i32 %354, i32 14) #1
  %1283 = lshr i32 %354, 3
  %1284 = xor i32 %1281, %1282
  %1285 = xor i32 %1284, %1283
  %1286 = add i32 %1280, %1285
  %1287 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1266, i32 %1266, i32 15) #1
  %1288 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1266, i32 %1266, i32 13) #1
  %1289 = lshr i32 %1266, 10
  %1290 = xor i32 %1287, %1288
  %1291 = xor i32 %1290, %1289
  %1292 = add i32 %1286, %1291
  %1293 = add i32 %354, %1214
  %1294 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %367, i32 %367, i32 25) #1
  %1295 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %367, i32 %367, i32 14) #1
  %1296 = lshr i32 %367, 3
  %1297 = xor i32 %1294, %1295
  %1298 = xor i32 %1297, %1296
  %1299 = add i32 %1293, %1298
  %1300 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1279, i32 %1279, i32 15) #1
  %1301 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1279, i32 %1279, i32 13) #1
  %1302 = lshr i32 %1279, 10
  %1303 = xor i32 %1300, %1301
  %1304 = xor i32 %1303, %1302
  %1305 = add i32 %1299, %1304
  %1306 = add i32 %367, %1227
  %1307 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %380, i32 %380, i32 25) #1
  %1308 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %380, i32 %380, i32 14) #1
  %1309 = lshr i32 %380, 3
  %1310 = xor i32 %1307, %1308
  %1311 = xor i32 %1310, %1309
  %1312 = add i32 %1306, %1311
  %1313 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1292, i32 %1292, i32 15) #1
  %1314 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1292, i32 %1292, i32 13) #1
  %1315 = lshr i32 %1292, 10
  %1316 = xor i32 %1313, %1314
  %1317 = xor i32 %1316, %1315
  %1318 = add i32 %1312, %1317
  %1319 = add i32 %380, %1240
  %1320 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %393, i32 %393, i32 25) #1
  %1321 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %393, i32 %393, i32 14) #1
  %1322 = lshr i32 %393, 3
  %1323 = xor i32 %1320, %1321
  %1324 = xor i32 %1323, %1322
  %1325 = add i32 %1319, %1324
  %1326 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1305, i32 %1305, i32 15) #1
  %1327 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1305, i32 %1305, i32 13) #1
  %1328 = lshr i32 %1305, 10
  %1329 = xor i32 %1326, %1327
  %1330 = xor i32 %1329, %1328
  %1331 = add i32 %1325, %1330
  %1332 = add i32 %393, %1253
  %1333 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1149, i32 %1149, i32 25) #1
  %1334 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1149, i32 %1149, i32 14) #1
  %1335 = lshr i32 %1149, 3
  %1336 = xor i32 %1333, %1334
  %1337 = xor i32 %1336, %1335
  %1338 = add i32 %1332, %1337
  %1339 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1318, i32 %1318, i32 15) #1
  %1340 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1318, i32 %1318, i32 13) #1
  %1341 = lshr i32 %1318, 10
  %1342 = xor i32 %1339, %1340
  %1343 = xor i32 %1342, %1341
  %1344 = add i32 %1338, %1343
  %1345 = add i32 %1149, %1266
  %1346 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1162, i32 %1162, i32 25) #1
  %1347 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1162, i32 %1162, i32 14) #1
  %1348 = lshr i32 %1162, 3
  %1349 = xor i32 %1346, %1347
  %1350 = xor i32 %1349, %1348
  %1351 = add i32 %1345, %1350
  %1352 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1331, i32 %1331, i32 15) #1
  %1353 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1331, i32 %1331, i32 13) #1
  %1354 = lshr i32 %1331, 10
  %1355 = xor i32 %1352, %1353
  %1356 = xor i32 %1355, %1354
  %1357 = add i32 %1351, %1356
  %1358 = add i32 %1162, %1279
  %1359 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1175, i32 %1175, i32 25) #1
  %1360 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1175, i32 %1175, i32 14) #1
  %1361 = lshr i32 %1175, 3
  %1362 = xor i32 %1359, %1360
  %1363 = xor i32 %1362, %1361
  %1364 = add i32 %1358, %1363
  %1365 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1344, i32 %1344, i32 15) #1
  %1366 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1344, i32 %1344, i32 13) #1
  %1367 = lshr i32 %1344, 10
  %1368 = xor i32 %1365, %1366
  %1369 = xor i32 %1368, %1367
  %1370 = add i32 %1364, %1369
  %1371 = add i32 %1175, %1292
  %1372 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1188, i32 %1188, i32 25) #1
  %1373 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1188, i32 %1188, i32 14) #1
  %1374 = lshr i32 %1188, 3
  %1375 = xor i32 %1372, %1373
  %1376 = xor i32 %1375, %1374
  %1377 = add i32 %1371, %1376
  %1378 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1357, i32 %1357, i32 15) #1
  %1379 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1357, i32 %1357, i32 13) #1
  %1380 = lshr i32 %1357, 10
  %1381 = xor i32 %1378, %1379
  %1382 = xor i32 %1381, %1380
  %1383 = add i32 %1377, %1382
  %1384 = add i32 %1188, %1305
  %1385 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1201, i32 %1201, i32 25) #1
  %1386 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1201, i32 %1201, i32 14) #1
  %1387 = lshr i32 %1201, 3
  %1388 = xor i32 %1385, %1386
  %1389 = xor i32 %1388, %1387
  %1390 = add i32 %1384, %1389
  %1391 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1370, i32 %1370, i32 15) #1
  %1392 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1370, i32 %1370, i32 13) #1
  %1393 = lshr i32 %1370, 10
  %1394 = xor i32 %1391, %1392
  %1395 = xor i32 %1394, %1393
  %1396 = add i32 %1390, %1395
  %1397 = add i32 %1201, %1318
  %1398 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1214, i32 %1214, i32 25) #1
  %1399 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1214, i32 %1214, i32 14) #1
  %1400 = lshr i32 %1214, 3
  %1401 = xor i32 %1398, %1399
  %1402 = xor i32 %1401, %1400
  %1403 = add i32 %1397, %1402
  %1404 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1383, i32 %1383, i32 15) #1
  %1405 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1383, i32 %1383, i32 13) #1
  %1406 = lshr i32 %1383, 10
  %1407 = xor i32 %1404, %1405
  %1408 = xor i32 %1407, %1406
  %1409 = add i32 %1403, %1408
  %1410 = add i32 %1214, %1331
  %1411 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1227, i32 %1227, i32 25) #1
  %1412 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1227, i32 %1227, i32 14) #1
  %1413 = lshr i32 %1227, 3
  %1414 = xor i32 %1411, %1412
  %1415 = xor i32 %1414, %1413
  %1416 = add i32 %1410, %1415
  %1417 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1396, i32 %1396, i32 15) #1
  %1418 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1396, i32 %1396, i32 13) #1
  %1419 = lshr i32 %1396, 10
  %1420 = xor i32 %1417, %1418
  %1421 = xor i32 %1420, %1419
  %1422 = add i32 %1416, %1421
  %1423 = add i32 %1227, %1344
  %1424 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1240, i32 %1240, i32 25) #1
  %1425 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1240, i32 %1240, i32 14) #1
  %1426 = lshr i32 %1240, 3
  %1427 = xor i32 %1424, %1425
  %1428 = xor i32 %1427, %1426
  %1429 = add i32 %1423, %1428
  %1430 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1409, i32 %1409, i32 15) #1
  %1431 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1409, i32 %1409, i32 13) #1
  %1432 = lshr i32 %1409, 10
  %1433 = xor i32 %1430, %1431
  %1434 = xor i32 %1433, %1432
  %1435 = add i32 %1429, %1434
  %1436 = add i32 %1240, %1357
  %1437 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1253, i32 %1253, i32 25) #1
  %1438 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1253, i32 %1253, i32 14) #1
  %1439 = lshr i32 %1253, 3
  %1440 = xor i32 %1437, %1438
  %1441 = xor i32 %1440, %1439
  %1442 = add i32 %1436, %1441
  %1443 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1422, i32 %1422, i32 15) #1
  %1444 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1422, i32 %1422, i32 13) #1
  %1445 = lshr i32 %1422, 10
  %1446 = xor i32 %1443, %1444
  %1447 = xor i32 %1446, %1445
  %1448 = add i32 %1442, %1447
  %1449 = add i32 %1253, %1370
  %1450 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1266, i32 %1266, i32 25) #1
  %1451 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1266, i32 %1266, i32 14) #1
  %1452 = lshr i32 %1266, 3
  %1453 = xor i32 %1450, %1451
  %1454 = xor i32 %1453, %1452
  %1455 = add i32 %1449, %1454
  %1456 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1435, i32 %1435, i32 15) #1
  %1457 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1435, i32 %1435, i32 13) #1
  %1458 = lshr i32 %1435, 10
  %1459 = xor i32 %1456, %1457
  %1460 = xor i32 %1459, %1458
  %1461 = add i32 %1455, %1460
  %1462 = add i32 %1266, %1383
  %1463 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1279, i32 %1279, i32 25) #1
  %1464 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1279, i32 %1279, i32 14) #1
  %1465 = lshr i32 %1279, 3
  %1466 = xor i32 %1463, %1464
  %1467 = xor i32 %1466, %1465
  %1468 = add i32 %1462, %1467
  %1469 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1448, i32 %1448, i32 15) #1
  %1470 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1448, i32 %1448, i32 13) #1
  %1471 = lshr i32 %1448, 10
  %1472 = xor i32 %1469, %1470
  %1473 = xor i32 %1472, %1471
  %1474 = add i32 %1468, %1473
  %1475 = add i32 %1279, %1396
  %1476 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1292, i32 %1292, i32 25) #1
  %1477 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1292, i32 %1292, i32 14) #1
  %1478 = lshr i32 %1292, 3
  %1479 = xor i32 %1476, %1477
  %1480 = xor i32 %1479, %1478
  %1481 = add i32 %1475, %1480
  %1482 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1461, i32 %1461, i32 15) #1
  %1483 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1461, i32 %1461, i32 13) #1
  %1484 = lshr i32 %1461, 10
  %1485 = xor i32 %1482, %1483
  %1486 = xor i32 %1485, %1484
  %1487 = add i32 %1481, %1486
  %1488 = add i32 %1292, %1409
  %1489 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1305, i32 %1305, i32 25) #1
  %1490 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1305, i32 %1305, i32 14) #1
  %1491 = lshr i32 %1305, 3
  %1492 = xor i32 %1489, %1490
  %1493 = xor i32 %1492, %1491
  %1494 = add i32 %1488, %1493
  %1495 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1474, i32 %1474, i32 15) #1
  %1496 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1474, i32 %1474, i32 13) #1
  %1497 = lshr i32 %1474, 10
  %1498 = xor i32 %1495, %1496
  %1499 = xor i32 %1498, %1497
  %1500 = add i32 %1494, %1499
  %1501 = add i32 %1305, %1422
  %1502 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1318, i32 %1318, i32 25) #1
  %1503 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1318, i32 %1318, i32 14) #1
  %1504 = lshr i32 %1318, 3
  %1505 = xor i32 %1502, %1503
  %1506 = xor i32 %1505, %1504
  %1507 = add i32 %1501, %1506
  %1508 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1487, i32 %1487, i32 15) #1
  %1509 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1487, i32 %1487, i32 13) #1
  %1510 = lshr i32 %1487, 10
  %1511 = xor i32 %1508, %1509
  %1512 = xor i32 %1511, %1510
  %1513 = add i32 %1507, %1512
  %1514 = add i32 %1318, %1435
  %1515 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1331, i32 %1331, i32 25) #1
  %1516 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1331, i32 %1331, i32 14) #1
  %1517 = lshr i32 %1331, 3
  %1518 = xor i32 %1515, %1516
  %1519 = xor i32 %1518, %1517
  %1520 = add i32 %1514, %1519
  %1521 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1500, i32 %1500, i32 15) #1
  %1522 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1500, i32 %1500, i32 13) #1
  %1523 = lshr i32 %1500, 10
  %1524 = xor i32 %1521, %1522
  %1525 = xor i32 %1524, %1523
  %1526 = add i32 %1520, %1525
  %1527 = add i32 %1331, %1448
  %1528 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1344, i32 %1344, i32 25) #1
  %1529 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1344, i32 %1344, i32 14) #1
  %1530 = lshr i32 %1344, 3
  %1531 = xor i32 %1528, %1529
  %1532 = xor i32 %1531, %1530
  %1533 = add i32 %1527, %1532
  %1534 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1513, i32 %1513, i32 15) #1
  %1535 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1513, i32 %1513, i32 13) #1
  %1536 = lshr i32 %1513, 10
  %1537 = xor i32 %1534, %1535
  %1538 = xor i32 %1537, %1536
  %1539 = add i32 %1533, %1538
  %1540 = add i32 %1344, %1461
  %1541 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1357, i32 %1357, i32 25) #1
  %1542 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1357, i32 %1357, i32 14) #1
  %1543 = lshr i32 %1357, 3
  %1544 = xor i32 %1541, %1542
  %1545 = xor i32 %1544, %1543
  %1546 = add i32 %1540, %1545
  %1547 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1526, i32 %1526, i32 15) #1
  %1548 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1526, i32 %1526, i32 13) #1
  %1549 = lshr i32 %1526, 10
  %1550 = xor i32 %1547, %1548
  %1551 = xor i32 %1550, %1549
  %1552 = add i32 %1546, %1551
  %1553 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1125, i32 %1125, i32 26) #1
  %1554 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1125, i32 %1125, i32 21) #1
  %1555 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1125, i32 %1125, i32 7) #1
  %1556 = xor i32 %1553, %1554
  %1557 = xor i32 %1556, %1555
  %1558 = xor i32 %1101, %1077
  %1559 = and i32 %1558, %1125
  %1560 = xor i32 %1559, %1077
  %1561 = add i32 %1557, %1560
  %1562 = add i32 %1561, 666307205
  %1563 = add i32 %1562, %1149
  %1564 = add i32 %1053, %1563
  %1565 = add i32 %1064, %1564
  %1566 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1136, i32 %1136, i32 30) #1
  %1567 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1136, i32 %1136, i32 19) #1
  %1568 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1136, i32 %1136, i32 10) #1
  %1569 = xor i32 %1566, %1567
  %1570 = xor i32 %1569, %1568
  %1571 = or i32 %1112, %1088
  %1572 = and i32 %1571, %1136
  %1573 = and i32 %1112, %1088
  %1574 = or i32 %1572, %1573
  %1575 = add i32 %1570, %1574
  %1576 = add i32 %1564, %1575
  %1577 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1565, i32 %1565, i32 26) #1
  %1578 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1565, i32 %1565, i32 21) #1
  %1579 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1565, i32 %1565, i32 7) #1
  %1580 = xor i32 %1577, %1578
  %1581 = xor i32 %1580, %1579
  %1582 = xor i32 %1125, %1101
  %1583 = and i32 %1582, %1565
  %1584 = xor i32 %1583, %1101
  %1585 = add i32 %1581, %1584
  %1586 = add i32 %1585, 773529912
  %1587 = add i32 %1586, %1162
  %1588 = add i32 %1077, %1587
  %1589 = add i32 %1088, %1588
  %1590 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1576, i32 %1576, i32 30) #1
  %1591 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1576, i32 %1576, i32 19) #1
  %1592 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1576, i32 %1576, i32 10) #1
  %1593 = xor i32 %1590, %1591
  %1594 = xor i32 %1593, %1592
  %1595 = or i32 %1136, %1112
  %1596 = and i32 %1595, %1576
  %1597 = and i32 %1136, %1112
  %1598 = or i32 %1596, %1597
  %1599 = add i32 %1594, %1598
  %1600 = add i32 %1588, %1599
  %1601 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1589, i32 %1589, i32 26) #1
  %1602 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1589, i32 %1589, i32 21) #1
  %1603 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1589, i32 %1589, i32 7) #1
  %1604 = xor i32 %1601, %1602
  %1605 = xor i32 %1604, %1603
  %1606 = xor i32 %1565, %1125
  %1607 = and i32 %1606, %1589
  %1608 = xor i32 %1607, %1125
  %1609 = add i32 %1605, %1608
  %1610 = add i32 %1609, 1294757372
  %1611 = add i32 %1610, %1175
  %1612 = add i32 %1101, %1611
  %1613 = add i32 %1112, %1612
  %1614 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1600, i32 %1600, i32 30) #1
  %1615 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1600, i32 %1600, i32 19) #1
  %1616 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1600, i32 %1600, i32 10) #1
  %1617 = xor i32 %1614, %1615
  %1618 = xor i32 %1617, %1616
  %1619 = or i32 %1576, %1136
  %1620 = and i32 %1619, %1600
  %1621 = and i32 %1576, %1136
  %1622 = or i32 %1620, %1621
  %1623 = add i32 %1618, %1622
  %1624 = add i32 %1612, %1623
  %1625 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1613, i32 %1613, i32 26) #1
  %1626 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1613, i32 %1613, i32 21) #1
  %1627 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1613, i32 %1613, i32 7) #1
  %1628 = xor i32 %1625, %1626
  %1629 = xor i32 %1628, %1627
  %1630 = xor i32 %1589, %1565
  %1631 = and i32 %1630, %1613
  %1632 = xor i32 %1631, %1565
  %1633 = add i32 %1629, %1632
  %1634 = add i32 %1633, 1396182291
  %1635 = add i32 %1634, %1188
  %1636 = add i32 %1125, %1635
  %1637 = add i32 %1136, %1636
  %1638 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1624, i32 %1624, i32 30) #1
  %1639 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1624, i32 %1624, i32 19) #1
  %1640 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1624, i32 %1624, i32 10) #1
  %1641 = xor i32 %1638, %1639
  %1642 = xor i32 %1641, %1640
  %1643 = or i32 %1600, %1576
  %1644 = and i32 %1643, %1624
  %1645 = and i32 %1600, %1576
  %1646 = or i32 %1644, %1645
  %1647 = add i32 %1642, %1646
  %1648 = add i32 %1636, %1647
  %1649 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1637, i32 %1637, i32 26) #1
  %1650 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1637, i32 %1637, i32 21) #1
  %1651 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1637, i32 %1637, i32 7) #1
  %1652 = xor i32 %1649, %1650
  %1653 = xor i32 %1652, %1651
  %1654 = xor i32 %1613, %1589
  %1655 = and i32 %1654, %1637
  %1656 = xor i32 %1655, %1589
  %1657 = add i32 %1653, %1656
  %1658 = add i32 %1657, 1695183700
  %1659 = add i32 %1658, %1201
  %1660 = add i32 %1565, %1659
  %1661 = add i32 %1576, %1660
  %1662 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1648, i32 %1648, i32 30) #1
  %1663 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1648, i32 %1648, i32 19) #1
  %1664 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1648, i32 %1648, i32 10) #1
  %1665 = xor i32 %1662, %1663
  %1666 = xor i32 %1665, %1664
  %1667 = or i32 %1624, %1600
  %1668 = and i32 %1667, %1648
  %1669 = and i32 %1624, %1600
  %1670 = or i32 %1668, %1669
  %1671 = add i32 %1666, %1670
  %1672 = add i32 %1660, %1671
  %1673 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1661, i32 %1661, i32 26) #1
  %1674 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1661, i32 %1661, i32 21) #1
  %1675 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1661, i32 %1661, i32 7) #1
  %1676 = xor i32 %1673, %1674
  %1677 = xor i32 %1676, %1675
  %1678 = xor i32 %1637, %1613
  %1679 = and i32 %1678, %1661
  %1680 = xor i32 %1679, %1613
  %1681 = add i32 %1677, %1680
  %1682 = add i32 %1681, 1986661051
  %1683 = add i32 %1682, %1214
  %1684 = add i32 %1589, %1683
  %1685 = add i32 %1600, %1684
  %1686 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1672, i32 %1672, i32 30) #1
  %1687 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1672, i32 %1672, i32 19) #1
  %1688 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1672, i32 %1672, i32 10) #1
  %1689 = xor i32 %1686, %1687
  %1690 = xor i32 %1689, %1688
  %1691 = or i32 %1648, %1624
  %1692 = and i32 %1691, %1672
  %1693 = and i32 %1648, %1624
  %1694 = or i32 %1692, %1693
  %1695 = add i32 %1690, %1694
  %1696 = add i32 %1684, %1695
  %1697 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1685, i32 %1685, i32 26) #1
  %1698 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1685, i32 %1685, i32 21) #1
  %1699 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1685, i32 %1685, i32 7) #1
  %1700 = xor i32 %1697, %1698
  %1701 = xor i32 %1700, %1699
  %1702 = xor i32 %1661, %1637
  %1703 = and i32 %1702, %1685
  %1704 = xor i32 %1703, %1637
  %1705 = add i32 %1701, %1704
  %1706 = add i32 %1705, -2117940946
  %1707 = add i32 %1706, %1227
  %1708 = add i32 %1613, %1707
  %1709 = add i32 %1624, %1708
  %1710 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1696, i32 %1696, i32 30) #1
  %1711 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1696, i32 %1696, i32 19) #1
  %1712 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1696, i32 %1696, i32 10) #1
  %1713 = xor i32 %1710, %1711
  %1714 = xor i32 %1713, %1712
  %1715 = or i32 %1672, %1648
  %1716 = and i32 %1715, %1696
  %1717 = and i32 %1672, %1648
  %1718 = or i32 %1716, %1717
  %1719 = add i32 %1714, %1718
  %1720 = add i32 %1708, %1719
  %1721 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1709, i32 %1709, i32 26) #1
  %1722 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1709, i32 %1709, i32 21) #1
  %1723 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1709, i32 %1709, i32 7) #1
  %1724 = xor i32 %1721, %1722
  %1725 = xor i32 %1724, %1723
  %1726 = xor i32 %1685, %1661
  %1727 = and i32 %1726, %1709
  %1728 = xor i32 %1727, %1661
  %1729 = add i32 %1725, %1728
  %1730 = add i32 %1729, -1838011259
  %1731 = add i32 %1730, %1240
  %1732 = add i32 %1637, %1731
  %1733 = add i32 %1648, %1732
  %1734 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1720, i32 %1720, i32 30) #1
  %1735 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1720, i32 %1720, i32 19) #1
  %1736 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1720, i32 %1720, i32 10) #1
  %1737 = xor i32 %1734, %1735
  %1738 = xor i32 %1737, %1736
  %1739 = or i32 %1696, %1672
  %1740 = and i32 %1739, %1720
  %1741 = and i32 %1696, %1672
  %1742 = or i32 %1740, %1741
  %1743 = add i32 %1738, %1742
  %1744 = add i32 %1732, %1743
  %1745 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1733, i32 %1733, i32 26) #1
  %1746 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1733, i32 %1733, i32 21) #1
  %1747 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1733, i32 %1733, i32 7) #1
  %1748 = xor i32 %1745, %1746
  %1749 = xor i32 %1748, %1747
  %1750 = xor i32 %1709, %1685
  %1751 = and i32 %1750, %1733
  %1752 = xor i32 %1751, %1685
  %1753 = add i32 %1749, %1752
  %1754 = add i32 %1753, -1564481375
  %1755 = add i32 %1754, %1253
  %1756 = add i32 %1661, %1755
  %1757 = add i32 %1672, %1756
  %1758 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1744, i32 %1744, i32 30) #1
  %1759 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1744, i32 %1744, i32 19) #1
  %1760 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1744, i32 %1744, i32 10) #1
  %1761 = xor i32 %1758, %1759
  %1762 = xor i32 %1761, %1760
  %1763 = or i32 %1720, %1696
  %1764 = and i32 %1763, %1744
  %1765 = and i32 %1720, %1696
  %1766 = or i32 %1764, %1765
  %1767 = add i32 %1762, %1766
  %1768 = add i32 %1756, %1767
  %1769 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1757, i32 %1757, i32 26) #1
  %1770 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1757, i32 %1757, i32 21) #1
  %1771 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1757, i32 %1757, i32 7) #1
  %1772 = xor i32 %1769, %1770
  %1773 = xor i32 %1772, %1771
  %1774 = xor i32 %1733, %1709
  %1775 = and i32 %1774, %1757
  %1776 = xor i32 %1775, %1709
  %1777 = add i32 %1773, %1776
  %1778 = add i32 %1777, -1474664885
  %1779 = add i32 %1778, %1266
  %1780 = add i32 %1685, %1779
  %1781 = add i32 %1696, %1780
  %1782 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1768, i32 %1768, i32 30) #1
  %1783 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1768, i32 %1768, i32 19) #1
  %1784 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1768, i32 %1768, i32 10) #1
  %1785 = xor i32 %1782, %1783
  %1786 = xor i32 %1785, %1784
  %1787 = or i32 %1744, %1720
  %1788 = and i32 %1787, %1768
  %1789 = and i32 %1744, %1720
  %1790 = or i32 %1788, %1789
  %1791 = add i32 %1786, %1790
  %1792 = add i32 %1780, %1791
  %1793 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1781, i32 %1781, i32 26) #1
  %1794 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1781, i32 %1781, i32 21) #1
  %1795 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1781, i32 %1781, i32 7) #1
  %1796 = xor i32 %1793, %1794
  %1797 = xor i32 %1796, %1795
  %1798 = xor i32 %1757, %1733
  %1799 = and i32 %1798, %1781
  %1800 = xor i32 %1799, %1733
  %1801 = add i32 %1797, %1800
  %1802 = add i32 %1801, -1035236496
  %1803 = add i32 %1802, %1279
  %1804 = add i32 %1709, %1803
  %1805 = add i32 %1720, %1804
  %1806 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1792, i32 %1792, i32 30) #1
  %1807 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1792, i32 %1792, i32 19) #1
  %1808 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1792, i32 %1792, i32 10) #1
  %1809 = xor i32 %1806, %1807
  %1810 = xor i32 %1809, %1808
  %1811 = or i32 %1768, %1744
  %1812 = and i32 %1811, %1792
  %1813 = and i32 %1768, %1744
  %1814 = or i32 %1812, %1813
  %1815 = add i32 %1810, %1814
  %1816 = add i32 %1804, %1815
  %1817 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1805, i32 %1805, i32 26) #1
  %1818 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1805, i32 %1805, i32 21) #1
  %1819 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1805, i32 %1805, i32 7) #1
  %1820 = xor i32 %1817, %1818
  %1821 = xor i32 %1820, %1819
  %1822 = xor i32 %1781, %1757
  %1823 = and i32 %1822, %1805
  %1824 = xor i32 %1823, %1757
  %1825 = add i32 %1821, %1824
  %1826 = add i32 %1825, -949202525
  %1827 = add i32 %1826, %1292
  %1828 = add i32 %1733, %1827
  %1829 = add i32 %1744, %1828
  %1830 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1816, i32 %1816, i32 30) #1
  %1831 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1816, i32 %1816, i32 19) #1
  %1832 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1816, i32 %1816, i32 10) #1
  %1833 = xor i32 %1830, %1831
  %1834 = xor i32 %1833, %1832
  %1835 = or i32 %1792, %1768
  %1836 = and i32 %1835, %1816
  %1837 = and i32 %1792, %1768
  %1838 = or i32 %1836, %1837
  %1839 = add i32 %1834, %1838
  %1840 = add i32 %1828, %1839
  %1841 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1829, i32 %1829, i32 26) #1
  %1842 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1829, i32 %1829, i32 21) #1
  %1843 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1829, i32 %1829, i32 7) #1
  %1844 = xor i32 %1841, %1842
  %1845 = xor i32 %1844, %1843
  %1846 = xor i32 %1805, %1781
  %1847 = and i32 %1846, %1829
  %1848 = xor i32 %1847, %1781
  %1849 = add i32 %1845, %1848
  %1850 = add i32 %1849, -778901479
  %1851 = add i32 %1850, %1305
  %1852 = add i32 %1757, %1851
  %1853 = add i32 %1768, %1852
  %1854 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1840, i32 %1840, i32 30) #1
  %1855 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1840, i32 %1840, i32 19) #1
  %1856 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1840, i32 %1840, i32 10) #1
  %1857 = xor i32 %1854, %1855
  %1858 = xor i32 %1857, %1856
  %1859 = or i32 %1816, %1792
  %1860 = and i32 %1859, %1840
  %1861 = and i32 %1816, %1792
  %1862 = or i32 %1860, %1861
  %1863 = add i32 %1858, %1862
  %1864 = add i32 %1852, %1863
  %1865 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1853, i32 %1853, i32 26) #1
  %1866 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1853, i32 %1853, i32 21) #1
  %1867 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1853, i32 %1853, i32 7) #1
  %1868 = xor i32 %1865, %1866
  %1869 = xor i32 %1868, %1867
  %1870 = xor i32 %1829, %1805
  %1871 = and i32 %1870, %1853
  %1872 = xor i32 %1871, %1805
  %1873 = add i32 %1869, %1872
  %1874 = add i32 %1873, -694614492
  %1875 = add i32 %1874, %1318
  %1876 = add i32 %1781, %1875
  %1877 = add i32 %1792, %1876
  %1878 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1864, i32 %1864, i32 30) #1
  %1879 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1864, i32 %1864, i32 19) #1
  %1880 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1864, i32 %1864, i32 10) #1
  %1881 = xor i32 %1878, %1879
  %1882 = xor i32 %1881, %1880
  %1883 = or i32 %1840, %1816
  %1884 = and i32 %1883, %1864
  %1885 = and i32 %1840, %1816
  %1886 = or i32 %1884, %1885
  %1887 = add i32 %1882, %1886
  %1888 = add i32 %1876, %1887
  %1889 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1877, i32 %1877, i32 26) #1
  %1890 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1877, i32 %1877, i32 21) #1
  %1891 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1877, i32 %1877, i32 7) #1
  %1892 = xor i32 %1889, %1890
  %1893 = xor i32 %1892, %1891
  %1894 = xor i32 %1853, %1829
  %1895 = and i32 %1894, %1877
  %1896 = xor i32 %1895, %1829
  %1897 = add i32 %1893, %1896
  %1898 = add i32 %1897, -200395387
  %1899 = add i32 %1898, %1331
  %1900 = add i32 %1805, %1899
  %1901 = add i32 %1816, %1900
  %1902 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1888, i32 %1888, i32 30) #1
  %1903 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1888, i32 %1888, i32 19) #1
  %1904 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1888, i32 %1888, i32 10) #1
  %1905 = xor i32 %1902, %1903
  %1906 = xor i32 %1905, %1904
  %1907 = or i32 %1864, %1840
  %1908 = and i32 %1907, %1888
  %1909 = and i32 %1864, %1840
  %1910 = or i32 %1908, %1909
  %1911 = add i32 %1906, %1910
  %1912 = add i32 %1900, %1911
  %1913 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1901, i32 %1901, i32 26) #1
  %1914 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1901, i32 %1901, i32 21) #1
  %1915 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1901, i32 %1901, i32 7) #1
  %1916 = xor i32 %1913, %1914
  %1917 = xor i32 %1916, %1915
  %1918 = xor i32 %1877, %1853
  %1919 = and i32 %1918, %1901
  %1920 = xor i32 %1919, %1853
  %1921 = add i32 %1917, %1920
  %1922 = add i32 %1921, 275423344
  %1923 = add i32 %1922, %1344
  %1924 = add i32 %1829, %1923
  %1925 = add i32 %1840, %1924
  %1926 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1912, i32 %1912, i32 30) #1
  %1927 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1912, i32 %1912, i32 19) #1
  %1928 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1912, i32 %1912, i32 10) #1
  %1929 = xor i32 %1926, %1927
  %1930 = xor i32 %1929, %1928
  %1931 = or i32 %1888, %1864
  %1932 = and i32 %1931, %1912
  %1933 = and i32 %1888, %1864
  %1934 = or i32 %1932, %1933
  %1935 = add i32 %1930, %1934
  %1936 = add i32 %1924, %1935
  %1937 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1925, i32 %1925, i32 26) #1
  %1938 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1925, i32 %1925, i32 21) #1
  %1939 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1925, i32 %1925, i32 7) #1
  %1940 = xor i32 %1937, %1938
  %1941 = xor i32 %1940, %1939
  %1942 = xor i32 %1901, %1877
  %1943 = and i32 %1942, %1925
  %1944 = xor i32 %1943, %1877
  %1945 = add i32 %1941, %1944
  %1946 = add i32 %1945, 430227734
  %1947 = add i32 %1946, %1357
  %1948 = add i32 %1853, %1947
  %1949 = add i32 %1864, %1948
  %1950 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1936, i32 %1936, i32 30) #1
  %1951 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1936, i32 %1936, i32 19) #1
  %1952 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1936, i32 %1936, i32 10) #1
  %1953 = xor i32 %1950, %1951
  %1954 = xor i32 %1953, %1952
  %1955 = or i32 %1912, %1888
  %1956 = and i32 %1955, %1936
  %1957 = and i32 %1912, %1888
  %1958 = or i32 %1956, %1957
  %1959 = add i32 %1954, %1958
  %1960 = add i32 %1948, %1959
  %1961 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1949, i32 %1949, i32 26) #1
  %1962 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1949, i32 %1949, i32 21) #1
  %1963 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1949, i32 %1949, i32 7) #1
  %1964 = xor i32 %1961, %1962
  %1965 = xor i32 %1964, %1963
  %1966 = xor i32 %1925, %1901
  %1967 = and i32 %1966, %1949
  %1968 = xor i32 %1967, %1901
  %1969 = add i32 %1965, %1968
  %1970 = add i32 %1969, 506948616
  %1971 = add i32 %1970, %1370
  %1972 = add i32 %1877, %1971
  %1973 = add i32 %1888, %1972
  %1974 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1960, i32 %1960, i32 30) #1
  %1975 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1960, i32 %1960, i32 19) #1
  %1976 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1960, i32 %1960, i32 10) #1
  %1977 = xor i32 %1974, %1975
  %1978 = xor i32 %1977, %1976
  %1979 = or i32 %1936, %1912
  %1980 = and i32 %1979, %1960
  %1981 = and i32 %1936, %1912
  %1982 = or i32 %1980, %1981
  %1983 = add i32 %1978, %1982
  %1984 = add i32 %1972, %1983
  %1985 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1973, i32 %1973, i32 26) #1
  %1986 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1973, i32 %1973, i32 21) #1
  %1987 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1973, i32 %1973, i32 7) #1
  %1988 = xor i32 %1985, %1986
  %1989 = xor i32 %1988, %1987
  %1990 = xor i32 %1949, %1925
  %1991 = and i32 %1990, %1973
  %1992 = xor i32 %1991, %1925
  %1993 = add i32 %1989, %1992
  %1994 = add i32 %1993, 659060556
  %1995 = add i32 %1994, %1383
  %1996 = add i32 %1901, %1995
  %1997 = add i32 %1912, %1996
  %1998 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1984, i32 %1984, i32 30) #1
  %1999 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1984, i32 %1984, i32 19) #1
  %2000 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1984, i32 %1984, i32 10) #1
  %2001 = xor i32 %1998, %1999
  %2002 = xor i32 %2001, %2000
  %2003 = or i32 %1960, %1936
  %2004 = and i32 %2003, %1984
  %2005 = and i32 %1960, %1936
  %2006 = or i32 %2004, %2005
  %2007 = add i32 %2002, %2006
  %2008 = add i32 %1996, %2007
  %2009 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1997, i32 %1997, i32 26) #1
  %2010 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1997, i32 %1997, i32 21) #1
  %2011 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %1997, i32 %1997, i32 7) #1
  %2012 = xor i32 %2009, %2010
  %2013 = xor i32 %2012, %2011
  %2014 = xor i32 %1973, %1949
  %2015 = and i32 %2014, %1997
  %2016 = xor i32 %2015, %1949
  %2017 = add i32 %2013, %2016
  %2018 = add i32 %2017, 883997877
  %2019 = add i32 %2018, %1396
  %2020 = add i32 %1925, %2019
  %2021 = add i32 %1936, %2020
  %2022 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2008, i32 %2008, i32 30) #1
  %2023 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2008, i32 %2008, i32 19) #1
  %2024 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2008, i32 %2008, i32 10) #1
  %2025 = xor i32 %2022, %2023
  %2026 = xor i32 %2025, %2024
  %2027 = or i32 %1984, %1960
  %2028 = and i32 %2027, %2008
  %2029 = and i32 %1984, %1960
  %2030 = or i32 %2028, %2029
  %2031 = add i32 %2026, %2030
  %2032 = add i32 %2020, %2031
  %2033 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2021, i32 %2021, i32 26) #1
  %2034 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2021, i32 %2021, i32 21) #1
  %2035 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2021, i32 %2021, i32 7) #1
  %2036 = xor i32 %2033, %2034
  %2037 = xor i32 %2036, %2035
  %2038 = xor i32 %1997, %1973
  %2039 = and i32 %2038, %2021
  %2040 = xor i32 %2039, %1973
  %2041 = add i32 %2037, %2040
  %2042 = add i32 %2041, 958139571
  %2043 = add i32 %2042, %1409
  %2044 = add i32 %1949, %2043
  %2045 = add i32 %1960, %2044
  %2046 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2032, i32 %2032, i32 30) #1
  %2047 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2032, i32 %2032, i32 19) #1
  %2048 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2032, i32 %2032, i32 10) #1
  %2049 = xor i32 %2046, %2047
  %2050 = xor i32 %2049, %2048
  %2051 = or i32 %2008, %1984
  %2052 = and i32 %2051, %2032
  %2053 = and i32 %2008, %1984
  %2054 = or i32 %2052, %2053
  %2055 = add i32 %2050, %2054
  %2056 = add i32 %2044, %2055
  %2057 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2045, i32 %2045, i32 26) #1
  %2058 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2045, i32 %2045, i32 21) #1
  %2059 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2045, i32 %2045, i32 7) #1
  %2060 = xor i32 %2057, %2058
  %2061 = xor i32 %2060, %2059
  %2062 = xor i32 %2021, %1997
  %2063 = and i32 %2062, %2045
  %2064 = xor i32 %2063, %1997
  %2065 = add i32 %2061, %2064
  %2066 = add i32 %2065, 1322822218
  %2067 = add i32 %2066, %1422
  %2068 = add i32 %1973, %2067
  %2069 = add i32 %1984, %2068
  %2070 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2056, i32 %2056, i32 30) #1
  %2071 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2056, i32 %2056, i32 19) #1
  %2072 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2056, i32 %2056, i32 10) #1
  %2073 = xor i32 %2070, %2071
  %2074 = xor i32 %2073, %2072
  %2075 = or i32 %2032, %2008
  %2076 = and i32 %2075, %2056
  %2077 = and i32 %2032, %2008
  %2078 = or i32 %2076, %2077
  %2079 = add i32 %2074, %2078
  %2080 = add i32 %2068, %2079
  %2081 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2069, i32 %2069, i32 26) #1
  %2082 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2069, i32 %2069, i32 21) #1
  %2083 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2069, i32 %2069, i32 7) #1
  %2084 = xor i32 %2081, %2082
  %2085 = xor i32 %2084, %2083
  %2086 = xor i32 %2045, %2021
  %2087 = and i32 %2086, %2069
  %2088 = xor i32 %2087, %2021
  %2089 = add i32 %2085, %2088
  %2090 = add i32 %2089, 1537002063
  %2091 = add i32 %2090, %1435
  %2092 = add i32 %1997, %2091
  %2093 = add i32 %2008, %2092
  %2094 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2080, i32 %2080, i32 30) #1
  %2095 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2080, i32 %2080, i32 19) #1
  %2096 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2080, i32 %2080, i32 10) #1
  %2097 = xor i32 %2094, %2095
  %2098 = xor i32 %2097, %2096
  %2099 = or i32 %2056, %2032
  %2100 = and i32 %2099, %2080
  %2101 = and i32 %2056, %2032
  %2102 = or i32 %2100, %2101
  %2103 = add i32 %2098, %2102
  %2104 = add i32 %2092, %2103
  %2105 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2093, i32 %2093, i32 26) #1
  %2106 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2093, i32 %2093, i32 21) #1
  %2107 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2093, i32 %2093, i32 7) #1
  %2108 = xor i32 %2105, %2106
  %2109 = xor i32 %2108, %2107
  %2110 = xor i32 %2069, %2045
  %2111 = and i32 %2110, %2093
  %2112 = xor i32 %2111, %2045
  %2113 = add i32 %2109, %2112
  %2114 = add i32 %2113, 1747873779
  %2115 = add i32 %2114, %1448
  %2116 = add i32 %2021, %2115
  %2117 = add i32 %2032, %2116
  %2118 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2104, i32 %2104, i32 30) #1
  %2119 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2104, i32 %2104, i32 19) #1
  %2120 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2104, i32 %2104, i32 10) #1
  %2121 = xor i32 %2118, %2119
  %2122 = xor i32 %2121, %2120
  %2123 = or i32 %2080, %2056
  %2124 = and i32 %2123, %2104
  %2125 = and i32 %2080, %2056
  %2126 = or i32 %2124, %2125
  %2127 = add i32 %2122, %2126
  %2128 = add i32 %2116, %2127
  %2129 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2117, i32 %2117, i32 26) #1
  %2130 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2117, i32 %2117, i32 21) #1
  %2131 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2117, i32 %2117, i32 7) #1
  %2132 = xor i32 %2129, %2130
  %2133 = xor i32 %2132, %2131
  %2134 = xor i32 %2093, %2069
  %2135 = and i32 %2134, %2117
  %2136 = xor i32 %2135, %2069
  %2137 = add i32 %2133, %2136
  %2138 = add i32 %2137, 1955562222
  %2139 = add i32 %2138, %1461
  %2140 = add i32 %2045, %2139
  %2141 = add i32 %2056, %2140
  %2142 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2128, i32 %2128, i32 30) #1
  %2143 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2128, i32 %2128, i32 19) #1
  %2144 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2128, i32 %2128, i32 10) #1
  %2145 = xor i32 %2142, %2143
  %2146 = xor i32 %2145, %2144
  %2147 = or i32 %2104, %2080
  %2148 = and i32 %2147, %2128
  %2149 = and i32 %2104, %2080
  %2150 = or i32 %2148, %2149
  %2151 = add i32 %2146, %2150
  %2152 = add i32 %2140, %2151
  %2153 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2141, i32 %2141, i32 26) #1
  %2154 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2141, i32 %2141, i32 21) #1
  %2155 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2141, i32 %2141, i32 7) #1
  %2156 = xor i32 %2153, %2154
  %2157 = xor i32 %2156, %2155
  %2158 = xor i32 %2117, %2093
  %2159 = and i32 %2158, %2141
  %2160 = xor i32 %2159, %2093
  %2161 = add i32 %2157, %2160
  %2162 = add i32 %2161, 2024104815
  %2163 = add i32 %2162, %1474
  %2164 = add i32 %2069, %2163
  %2165 = add i32 %2080, %2164
  %2166 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2152, i32 %2152, i32 30) #1
  %2167 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2152, i32 %2152, i32 19) #1
  %2168 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2152, i32 %2152, i32 10) #1
  %2169 = xor i32 %2166, %2167
  %2170 = xor i32 %2169, %2168
  %2171 = or i32 %2128, %2104
  %2172 = and i32 %2171, %2152
  %2173 = and i32 %2128, %2104
  %2174 = or i32 %2172, %2173
  %2175 = add i32 %2170, %2174
  %2176 = add i32 %2164, %2175
  %2177 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2165, i32 %2165, i32 26) #1
  %2178 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2165, i32 %2165, i32 21) #1
  %2179 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2165, i32 %2165, i32 7) #1
  %2180 = xor i32 %2177, %2178
  %2181 = xor i32 %2180, %2179
  %2182 = xor i32 %2141, %2117
  %2183 = and i32 %2182, %2165
  %2184 = xor i32 %2183, %2117
  %2185 = add i32 %2181, %2184
  %2186 = add i32 %2185, -2067236844
  %2187 = add i32 %2186, %1487
  %2188 = add i32 %2093, %2187
  %2189 = add i32 %2104, %2188
  %2190 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2176, i32 %2176, i32 30) #1
  %2191 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2176, i32 %2176, i32 19) #1
  %2192 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2176, i32 %2176, i32 10) #1
  %2193 = xor i32 %2190, %2191
  %2194 = xor i32 %2193, %2192
  %2195 = or i32 %2152, %2128
  %2196 = and i32 %2195, %2176
  %2197 = and i32 %2152, %2128
  %2198 = or i32 %2196, %2197
  %2199 = add i32 %2194, %2198
  %2200 = add i32 %2188, %2199
  %2201 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2189, i32 %2189, i32 26) #1
  %2202 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2189, i32 %2189, i32 21) #1
  %2203 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2189, i32 %2189, i32 7) #1
  %2204 = xor i32 %2201, %2202
  %2205 = xor i32 %2204, %2203
  %2206 = xor i32 %2165, %2141
  %2207 = and i32 %2206, %2189
  %2208 = xor i32 %2207, %2141
  %2209 = add i32 %2205, %2208
  %2210 = add i32 %2209, -1933114872
  %2211 = add i32 %2210, %1500
  %2212 = add i32 %2117, %2211
  %2213 = add i32 %2128, %2212
  %2214 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2200, i32 %2200, i32 30) #1
  %2215 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2200, i32 %2200, i32 19) #1
  %2216 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2200, i32 %2200, i32 10) #1
  %2217 = xor i32 %2214, %2215
  %2218 = xor i32 %2217, %2216
  %2219 = or i32 %2176, %2152
  %2220 = and i32 %2219, %2200
  %2221 = and i32 %2176, %2152
  %2222 = or i32 %2220, %2221
  %2223 = add i32 %2218, %2222
  %2224 = add i32 %2212, %2223
  %2225 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2213, i32 %2213, i32 26) #1
  %2226 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2213, i32 %2213, i32 21) #1
  %2227 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2213, i32 %2213, i32 7) #1
  %2228 = xor i32 %2225, %2226
  %2229 = xor i32 %2228, %2227
  %2230 = xor i32 %2189, %2165
  %2231 = and i32 %2230, %2213
  %2232 = xor i32 %2231, %2165
  %2233 = add i32 %2229, %2232
  %2234 = add i32 %2233, -1866530822
  %2235 = add i32 %2234, %1513
  %2236 = add i32 %2141, %2235
  %2237 = add i32 %2152, %2236
  %2238 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2224, i32 %2224, i32 30) #1
  %2239 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2224, i32 %2224, i32 19) #1
  %2240 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2224, i32 %2224, i32 10) #1
  %2241 = xor i32 %2238, %2239
  %2242 = xor i32 %2241, %2240
  %2243 = or i32 %2200, %2176
  %2244 = and i32 %2243, %2224
  %2245 = and i32 %2200, %2176
  %2246 = or i32 %2244, %2245
  %2247 = add i32 %2242, %2246
  %2248 = add i32 %2236, %2247
  %2249 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2237, i32 %2237, i32 26) #1
  %2250 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2237, i32 %2237, i32 21) #1
  %2251 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2237, i32 %2237, i32 7) #1
  %2252 = xor i32 %2249, %2250
  %2253 = xor i32 %2252, %2251
  %2254 = xor i32 %2213, %2189
  %2255 = and i32 %2254, %2237
  %2256 = xor i32 %2255, %2189
  %2257 = add i32 %2253, %2256
  %2258 = add i32 %2257, -1538233109
  %2259 = add i32 %2258, %1526
  %2260 = add i32 %2165, %2259
  %2261 = add i32 %2176, %2260
  %2262 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2248, i32 %2248, i32 30) #1
  %2263 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2248, i32 %2248, i32 19) #1
  %2264 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2248, i32 %2248, i32 10) #1
  %2265 = xor i32 %2262, %2263
  %2266 = xor i32 %2265, %2264
  %2267 = or i32 %2224, %2200
  %2268 = and i32 %2267, %2248
  %2269 = and i32 %2224, %2200
  %2270 = or i32 %2268, %2269
  %2271 = add i32 %2266, %2270
  %2272 = add i32 %2260, %2271
  %2273 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2261, i32 %2261, i32 26) #1
  %2274 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2261, i32 %2261, i32 21) #1
  %2275 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2261, i32 %2261, i32 7) #1
  %2276 = xor i32 %2273, %2274
  %2277 = xor i32 %2276, %2275
  %2278 = xor i32 %2237, %2213
  %2279 = and i32 %2278, %2261
  %2280 = xor i32 %2279, %2213
  %2281 = add i32 %2277, %2280
  %2282 = add i32 %2281, -1090935817
  %2283 = add i32 %2282, %1539
  %2284 = add i32 %2189, %2283
  %2285 = add i32 %2200, %2284
  %2286 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2272, i32 %2272, i32 30) #1
  %2287 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2272, i32 %2272, i32 19) #1
  %2288 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2272, i32 %2272, i32 10) #1
  %2289 = xor i32 %2286, %2287
  %2290 = xor i32 %2289, %2288
  %2291 = or i32 %2248, %2224
  %2292 = and i32 %2291, %2272
  %2293 = and i32 %2248, %2224
  %2294 = or i32 %2292, %2293
  %2295 = add i32 %2290, %2294
  %2296 = add i32 %2284, %2295
  %2297 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2285, i32 %2285, i32 26) #1
  %2298 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2285, i32 %2285, i32 21) #1
  %2299 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2285, i32 %2285, i32 7) #1
  %2300 = xor i32 %2297, %2298
  %2301 = xor i32 %2300, %2299
  %2302 = xor i32 %2261, %2237
  %2303 = and i32 %2302, %2285
  %2304 = xor i32 %2303, %2237
  %2305 = add i32 %2301, %2304
  %2306 = add i32 %2305, -965641998
  %2307 = add i32 %2306, %1552
  %2308 = add i32 %2213, %2307
  %2309 = add i32 %2224, %2308
  %2310 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2296, i32 %2296, i32 30) #1
  %2311 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2296, i32 %2296, i32 19) #1
  %2312 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2296, i32 %2296, i32 10) #1
  %2313 = xor i32 %2310, %2311
  %2314 = xor i32 %2313, %2312
  %2315 = or i32 %2272, %2248
  %2316 = and i32 %2315, %2296
  %2317 = and i32 %2272, %2248
  %2318 = or i32 %2316, %2317
  %2319 = add i32 %2314, %2318
  %2320 = add i32 %2308, %2319
  %2321 = add i32 %2320, 1779033703
  %2322 = add i32 %2296, -1150833019
  %2323 = add i32 %2272, 1013904242
  %2324 = add i32 %2248, -1521486534
  %2325 = add i32 %2309, 1359893119
  %2326 = add i32 %2285, -1694144372
  %2327 = add i32 %2261, 528734635
  %2328 = add i32 %2237, 1541459225
  br i1 %180, label %4562, label %2329

2329:                                             ; preds = %119
  %2330 = or i32 %120, 16
  %2331 = sext i32 %2330 to i64
  %2332 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %2331
  %2333 = load i32, i32 addrspace(4)* %2332, align 4
  %2334 = or i32 %120, 17
  %2335 = sext i32 %2334 to i64
  %2336 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %2335
  %2337 = load i32, i32 addrspace(4)* %2336, align 4
  %2338 = or i32 %120, 18
  %2339 = sext i32 %2338 to i64
  %2340 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %2339
  %2341 = load i32, i32 addrspace(4)* %2340, align 4
  store i32 %2341, i32* %25, align 4
  %2342 = or i32 %120, 19
  %2343 = sext i32 %2342 to i64
  %2344 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %2343
  %2345 = load i32, i32 addrspace(4)* %2344, align 4
  %2346 = or i32 %120, 20
  %2347 = sext i32 %2346 to i64
  %2348 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %2347
  %2349 = load i32, i32 addrspace(4)* %2348, align 4
  %2350 = or i32 %120, 21
  %2351 = sext i32 %2350 to i64
  %2352 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %2351
  %2353 = load i32, i32 addrspace(4)* %2352, align 4
  %2354 = or i32 %120, 22
  %2355 = sext i32 %2354 to i64
  %2356 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %2355
  %2357 = load i32, i32 addrspace(4)* %2356, align 4
  %2358 = or i32 %120, 23
  %2359 = sext i32 %2358 to i64
  %2360 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %2359
  %2361 = load i32, i32 addrspace(4)* %2360, align 4
  %2362 = or i32 %120, 24
  %2363 = sext i32 %2362 to i64
  %2364 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %2363
  %2365 = load i32, i32 addrspace(4)* %2364, align 4
  %2366 = or i32 %120, 25
  %2367 = sext i32 %2366 to i64
  %2368 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %2367
  %2369 = load i32, i32 addrspace(4)* %2368, align 4
  store i32 %2369, i32* %32, align 4
  %2370 = or i32 %120, 26
  %2371 = sext i32 %2370 to i64
  %2372 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %2371
  %2373 = load i32, i32 addrspace(4)* %2372, align 4
  store i32 %2373, i32* %33, align 4
  %2374 = or i32 %120, 27
  %2375 = sext i32 %2374 to i64
  %2376 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %2375
  %2377 = load i32, i32 addrspace(4)* %2376, align 4
  store i32 %2377, i32* %34, align 4
  %2378 = or i32 %120, 28
  %2379 = sext i32 %2378 to i64
  %2380 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %2379
  %2381 = load i32, i32 addrspace(4)* %2380, align 4
  store i32 %2381, i32* %35, align 4
  %2382 = or i32 %120, 29
  %2383 = sext i32 %2382 to i64
  %2384 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %2383
  %2385 = load i32, i32 addrspace(4)* %2384, align 4
  store i32 %2385, i32* %36, align 4
  %2386 = or i32 %120, 30
  %2387 = sext i32 %2386 to i64
  %2388 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %2387
  %2389 = load i32, i32 addrspace(4)* %2388, align 4
  store i32 %2389, i32* %37, align 4
  %2390 = or i32 %120, 31
  %2391 = sext i32 %2390 to i64
  %2392 = getelementptr inbounds i32, i32 addrspace(4)* %15, i64 %2391
  %2393 = load i32, i32 addrspace(4)* %2392, align 4
  store i32 %2393, i32* %38, align 4
  %2394 = add i32 %2333, %2369
  %2395 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2337, i32 %2337, i32 25) #1
  %2396 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2337, i32 %2337, i32 14) #1
  %2397 = lshr i32 %2337, 3
  %2398 = xor i32 %2395, %2396
  %2399 = xor i32 %2398, %2397
  %2400 = add i32 %2394, %2399
  %2401 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2389, i32 %2389, i32 15) #1
  %2402 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2389, i32 %2389, i32 13) #1
  %2403 = lshr i32 %2389, 10
  %2404 = xor i32 %2401, %2402
  %2405 = xor i32 %2404, %2403
  %2406 = add i32 %2400, %2405
  %2407 = add i32 %2337, %2373
  %2408 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2341, i32 %2341, i32 25) #1
  %2409 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2341, i32 %2341, i32 14) #1
  %2410 = lshr i32 %2341, 3
  %2411 = xor i32 %2408, %2409
  %2412 = xor i32 %2411, %2410
  %2413 = add i32 %2407, %2412
  %2414 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2393, i32 %2393, i32 15) #1
  %2415 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2393, i32 %2393, i32 13) #1
  %2416 = lshr i32 %2393, 10
  %2417 = xor i32 %2414, %2415
  %2418 = xor i32 %2417, %2416
  %2419 = add i32 %2413, %2418
  store i32 %2419, i32* %40, align 4
  %2420 = add i32 %2341, %2377
  %2421 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2345, i32 %2345, i32 25) #1
  %2422 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2345, i32 %2345, i32 14) #1
  %2423 = lshr i32 %2345, 3
  %2424 = xor i32 %2421, %2422
  %2425 = xor i32 %2424, %2423
  %2426 = add i32 %2420, %2425
  %2427 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2406, i32 %2406, i32 15) #1
  %2428 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2406, i32 %2406, i32 13) #1
  %2429 = lshr i32 %2406, 10
  %2430 = xor i32 %2427, %2428
  %2431 = xor i32 %2430, %2429
  %2432 = add i32 %2426, %2431
  store i32 %2432, i32* %41, align 4
  %2433 = add i32 %2345, %2381
  %2434 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2349, i32 %2349, i32 25) #1
  %2435 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2349, i32 %2349, i32 14) #1
  %2436 = lshr i32 %2349, 3
  %2437 = xor i32 %2434, %2435
  %2438 = xor i32 %2437, %2436
  %2439 = add i32 %2433, %2438
  %2440 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2419, i32 %2419, i32 15) #1
  %2441 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2419, i32 %2419, i32 13) #1
  %2442 = lshr i32 %2419, 10
  %2443 = xor i32 %2440, %2441
  %2444 = xor i32 %2443, %2442
  %2445 = add i32 %2439, %2444
  store i32 %2445, i32* %42, align 4
  %2446 = add i32 %2349, %2385
  %2447 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2353, i32 %2353, i32 25) #1
  %2448 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2353, i32 %2353, i32 14) #1
  %2449 = lshr i32 %2353, 3
  %2450 = xor i32 %2447, %2448
  %2451 = xor i32 %2450, %2449
  %2452 = add i32 %2446, %2451
  %2453 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2432, i32 %2432, i32 15) #1
  %2454 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2432, i32 %2432, i32 13) #1
  %2455 = lshr i32 %2432, 10
  %2456 = xor i32 %2453, %2454
  %2457 = xor i32 %2456, %2455
  %2458 = add i32 %2452, %2457
  %2459 = add i32 %2353, %2389
  %2460 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2357, i32 %2357, i32 25) #1
  %2461 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2357, i32 %2357, i32 14) #1
  %2462 = lshr i32 %2357, 3
  %2463 = xor i32 %2460, %2461
  %2464 = xor i32 %2463, %2462
  %2465 = add i32 %2459, %2464
  %2466 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2445, i32 %2445, i32 15) #1
  %2467 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2445, i32 %2445, i32 13) #1
  %2468 = lshr i32 %2445, 10
  %2469 = xor i32 %2466, %2467
  %2470 = xor i32 %2469, %2468
  %2471 = add i32 %2465, %2470
  %2472 = add i32 %2357, %2393
  %2473 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2361, i32 %2361, i32 25) #1
  %2474 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2361, i32 %2361, i32 14) #1
  %2475 = lshr i32 %2361, 3
  %2476 = xor i32 %2473, %2474
  %2477 = xor i32 %2476, %2475
  %2478 = add i32 %2472, %2477
  %2479 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2458, i32 %2458, i32 15) #1
  %2480 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2458, i32 %2458, i32 13) #1
  %2481 = lshr i32 %2458, 10
  %2482 = xor i32 %2479, %2480
  %2483 = xor i32 %2482, %2481
  %2484 = add i32 %2478, %2483
  %2485 = add i32 %2361, %2406
  %2486 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2365, i32 %2365, i32 25) #1
  %2487 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2365, i32 %2365, i32 14) #1
  %2488 = lshr i32 %2365, 3
  %2489 = xor i32 %2486, %2487
  %2490 = xor i32 %2489, %2488
  %2491 = add i32 %2485, %2490
  %2492 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2471, i32 %2471, i32 15) #1
  %2493 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2471, i32 %2471, i32 13) #1
  %2494 = lshr i32 %2471, 10
  %2495 = xor i32 %2492, %2493
  %2496 = xor i32 %2495, %2494
  %2497 = add i32 %2491, %2496
  %2498 = add i32 %2365, %2419
  %2499 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2369, i32 %2369, i32 25) #1
  %2500 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2369, i32 %2369, i32 14) #1
  %2501 = lshr i32 %2369, 3
  %2502 = xor i32 %2499, %2500
  %2503 = xor i32 %2502, %2501
  %2504 = add i32 %2498, %2503
  %2505 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2484, i32 %2484, i32 15) #1
  %2506 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2484, i32 %2484, i32 13) #1
  %2507 = lshr i32 %2484, 10
  %2508 = xor i32 %2505, %2506
  %2509 = xor i32 %2508, %2507
  %2510 = add i32 %2504, %2509
  %2511 = add i32 %2369, %2432
  %2512 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2373, i32 %2373, i32 25) #1
  %2513 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2373, i32 %2373, i32 14) #1
  %2514 = lshr i32 %2373, 3
  %2515 = xor i32 %2512, %2513
  %2516 = xor i32 %2515, %2514
  %2517 = add i32 %2511, %2516
  %2518 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2497, i32 %2497, i32 15) #1
  %2519 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2497, i32 %2497, i32 13) #1
  %2520 = lshr i32 %2497, 10
  %2521 = xor i32 %2518, %2519
  %2522 = xor i32 %2521, %2520
  %2523 = add i32 %2517, %2522
  %2524 = add i32 %2373, %2445
  %2525 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2377, i32 %2377, i32 25) #1
  %2526 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2377, i32 %2377, i32 14) #1
  %2527 = lshr i32 %2377, 3
  %2528 = xor i32 %2525, %2526
  %2529 = xor i32 %2528, %2527
  %2530 = add i32 %2524, %2529
  %2531 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2510, i32 %2510, i32 15) #1
  %2532 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2510, i32 %2510, i32 13) #1
  %2533 = lshr i32 %2510, 10
  %2534 = xor i32 %2531, %2532
  %2535 = xor i32 %2534, %2533
  %2536 = add i32 %2530, %2535
  %2537 = add i32 %2377, %2458
  %2538 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2381, i32 %2381, i32 25) #1
  %2539 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2381, i32 %2381, i32 14) #1
  %2540 = lshr i32 %2381, 3
  %2541 = xor i32 %2538, %2539
  %2542 = xor i32 %2541, %2540
  %2543 = add i32 %2537, %2542
  %2544 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2523, i32 %2523, i32 15) #1
  %2545 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2523, i32 %2523, i32 13) #1
  %2546 = lshr i32 %2523, 10
  %2547 = xor i32 %2544, %2545
  %2548 = xor i32 %2547, %2546
  %2549 = add i32 %2543, %2548
  %2550 = add i32 %2381, %2471
  %2551 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2385, i32 %2385, i32 25) #1
  %2552 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2385, i32 %2385, i32 14) #1
  %2553 = lshr i32 %2385, 3
  %2554 = xor i32 %2551, %2552
  %2555 = xor i32 %2554, %2553
  %2556 = add i32 %2550, %2555
  %2557 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2536, i32 %2536, i32 15) #1
  %2558 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2536, i32 %2536, i32 13) #1
  %2559 = lshr i32 %2536, 10
  %2560 = xor i32 %2557, %2558
  %2561 = xor i32 %2560, %2559
  %2562 = add i32 %2556, %2561
  %2563 = add i32 %2385, %2484
  %2564 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2389, i32 %2389, i32 25) #1
  %2565 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2389, i32 %2389, i32 14) #1
  %2566 = lshr i32 %2389, 3
  %2567 = xor i32 %2564, %2565
  %2568 = xor i32 %2567, %2566
  %2569 = add i32 %2563, %2568
  %2570 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2549, i32 %2549, i32 15) #1
  %2571 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2549, i32 %2549, i32 13) #1
  %2572 = lshr i32 %2549, 10
  %2573 = xor i32 %2570, %2571
  %2574 = xor i32 %2573, %2572
  %2575 = add i32 %2569, %2574
  %2576 = add i32 %2389, %2497
  %2577 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2393, i32 %2393, i32 25) #1
  %2578 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2393, i32 %2393, i32 14) #1
  %2579 = lshr i32 %2393, 3
  %2580 = xor i32 %2577, %2578
  %2581 = xor i32 %2580, %2579
  %2582 = add i32 %2576, %2581
  %2583 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2562, i32 %2562, i32 15) #1
  %2584 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2562, i32 %2562, i32 13) #1
  %2585 = lshr i32 %2562, 10
  %2586 = xor i32 %2583, %2584
  %2587 = xor i32 %2586, %2585
  %2588 = add i32 %2582, %2587
  %2589 = add i32 %2393, %2510
  %2590 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2406, i32 %2406, i32 25) #1
  %2591 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2406, i32 %2406, i32 14) #1
  %2592 = lshr i32 %2406, 3
  %2593 = xor i32 %2590, %2591
  %2594 = xor i32 %2593, %2592
  %2595 = add i32 %2589, %2594
  %2596 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2575, i32 %2575, i32 15) #1
  %2597 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2575, i32 %2575, i32 13) #1
  %2598 = lshr i32 %2575, 10
  %2599 = xor i32 %2596, %2597
  %2600 = xor i32 %2599, %2598
  %2601 = add i32 %2595, %2600
  %2602 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2325, i32 %2325, i32 26) #1
  %2603 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2325, i32 %2325, i32 21) #1
  %2604 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2325, i32 %2325, i32 7) #1
  %2605 = xor i32 %2602, %2603
  %2606 = xor i32 %2605, %2604
  %2607 = xor i32 %2326, %2327
  %2608 = and i32 %2607, %2325
  %2609 = xor i32 %2608, %2327
  %2610 = add i32 %2606, %2609
  %2611 = add i32 %2610, 1116352408
  %2612 = add i32 %2611, %2333
  %2613 = add i32 %2328, %2612
  %2614 = add i32 %2324, %2613
  %2615 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2321, i32 %2321, i32 30) #1
  %2616 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2321, i32 %2321, i32 19) #1
  %2617 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2321, i32 %2321, i32 10) #1
  %2618 = xor i32 %2615, %2616
  %2619 = xor i32 %2618, %2617
  %2620 = or i32 %2322, %2323
  %2621 = and i32 %2620, %2321
  %2622 = and i32 %2322, %2323
  %2623 = or i32 %2621, %2622
  %2624 = add i32 %2619, %2623
  %2625 = add i32 %2613, %2624
  %2626 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2614, i32 %2614, i32 26) #1
  %2627 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2614, i32 %2614, i32 21) #1
  %2628 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2614, i32 %2614, i32 7) #1
  %2629 = xor i32 %2626, %2627
  %2630 = xor i32 %2629, %2628
  %2631 = xor i32 %2325, %2326
  %2632 = and i32 %2631, %2614
  %2633 = xor i32 %2632, %2326
  %2634 = add i32 %2630, %2633
  %2635 = add i32 %2634, 1899447441
  %2636 = add i32 %2635, %2337
  %2637 = add i32 %2327, %2636
  %2638 = add i32 %2323, %2637
  %2639 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2625, i32 %2625, i32 30) #1
  %2640 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2625, i32 %2625, i32 19) #1
  %2641 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2625, i32 %2625, i32 10) #1
  %2642 = xor i32 %2639, %2640
  %2643 = xor i32 %2642, %2641
  %2644 = or i32 %2321, %2322
  %2645 = and i32 %2644, %2625
  %2646 = and i32 %2321, %2322
  %2647 = or i32 %2645, %2646
  %2648 = add i32 %2643, %2647
  %2649 = add i32 %2637, %2648
  %2650 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2638, i32 %2638, i32 26) #1
  %2651 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2638, i32 %2638, i32 21) #1
  %2652 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2638, i32 %2638, i32 7) #1
  %2653 = xor i32 %2650, %2651
  %2654 = xor i32 %2653, %2652
  %2655 = xor i32 %2614, %2325
  %2656 = and i32 %2655, %2638
  %2657 = xor i32 %2656, %2325
  %2658 = add i32 %2654, %2657
  %2659 = add i32 %2658, -1245643825
  %2660 = add i32 %2659, %2341
  %2661 = add i32 %2326, %2660
  %2662 = add i32 %2322, %2661
  %2663 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2649, i32 %2649, i32 30) #1
  %2664 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2649, i32 %2649, i32 19) #1
  %2665 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2649, i32 %2649, i32 10) #1
  %2666 = xor i32 %2663, %2664
  %2667 = xor i32 %2666, %2665
  %2668 = or i32 %2625, %2321
  %2669 = and i32 %2668, %2649
  %2670 = and i32 %2625, %2321
  %2671 = or i32 %2669, %2670
  %2672 = add i32 %2667, %2671
  %2673 = add i32 %2661, %2672
  %2674 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2662, i32 %2662, i32 26) #1
  %2675 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2662, i32 %2662, i32 21) #1
  %2676 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2662, i32 %2662, i32 7) #1
  %2677 = xor i32 %2674, %2675
  %2678 = xor i32 %2677, %2676
  %2679 = xor i32 %2638, %2614
  %2680 = and i32 %2679, %2662
  %2681 = xor i32 %2680, %2614
  %2682 = add i32 %2678, %2681
  %2683 = add i32 %2682, -373957723
  %2684 = add i32 %2683, %2345
  %2685 = add i32 %2325, %2684
  %2686 = add i32 %2321, %2685
  %2687 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2673, i32 %2673, i32 30) #1
  %2688 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2673, i32 %2673, i32 19) #1
  %2689 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2673, i32 %2673, i32 10) #1
  %2690 = xor i32 %2687, %2688
  %2691 = xor i32 %2690, %2689
  %2692 = or i32 %2649, %2625
  %2693 = and i32 %2692, %2673
  %2694 = and i32 %2649, %2625
  %2695 = or i32 %2693, %2694
  %2696 = add i32 %2691, %2695
  %2697 = add i32 %2685, %2696
  %2698 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2686, i32 %2686, i32 26) #1
  %2699 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2686, i32 %2686, i32 21) #1
  %2700 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2686, i32 %2686, i32 7) #1
  %2701 = xor i32 %2698, %2699
  %2702 = xor i32 %2701, %2700
  %2703 = xor i32 %2662, %2638
  %2704 = and i32 %2703, %2686
  %2705 = xor i32 %2704, %2638
  %2706 = add i32 %2702, %2705
  %2707 = add i32 %2706, 961987163
  %2708 = add i32 %2707, %2349
  %2709 = add i32 %2614, %2708
  %2710 = add i32 %2625, %2709
  %2711 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2697, i32 %2697, i32 30) #1
  %2712 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2697, i32 %2697, i32 19) #1
  %2713 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2697, i32 %2697, i32 10) #1
  %2714 = xor i32 %2711, %2712
  %2715 = xor i32 %2714, %2713
  %2716 = or i32 %2673, %2649
  %2717 = and i32 %2716, %2697
  %2718 = and i32 %2673, %2649
  %2719 = or i32 %2717, %2718
  %2720 = add i32 %2715, %2719
  %2721 = add i32 %2709, %2720
  %2722 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2710, i32 %2710, i32 26) #1
  %2723 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2710, i32 %2710, i32 21) #1
  %2724 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2710, i32 %2710, i32 7) #1
  %2725 = xor i32 %2722, %2723
  %2726 = xor i32 %2725, %2724
  %2727 = xor i32 %2686, %2662
  %2728 = and i32 %2727, %2710
  %2729 = xor i32 %2728, %2662
  %2730 = add i32 %2726, %2729
  %2731 = add i32 %2730, 1508970993
  %2732 = add i32 %2731, %2353
  %2733 = add i32 %2638, %2732
  %2734 = add i32 %2649, %2733
  %2735 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2721, i32 %2721, i32 30) #1
  %2736 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2721, i32 %2721, i32 19) #1
  %2737 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2721, i32 %2721, i32 10) #1
  %2738 = xor i32 %2735, %2736
  %2739 = xor i32 %2738, %2737
  %2740 = or i32 %2697, %2673
  %2741 = and i32 %2740, %2721
  %2742 = and i32 %2697, %2673
  %2743 = or i32 %2741, %2742
  %2744 = add i32 %2739, %2743
  %2745 = add i32 %2733, %2744
  %2746 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2734, i32 %2734, i32 26) #1
  %2747 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2734, i32 %2734, i32 21) #1
  %2748 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2734, i32 %2734, i32 7) #1
  %2749 = xor i32 %2746, %2747
  %2750 = xor i32 %2749, %2748
  %2751 = xor i32 %2710, %2686
  %2752 = and i32 %2751, %2734
  %2753 = xor i32 %2752, %2686
  %2754 = add i32 %2750, %2753
  %2755 = add i32 %2754, -1841331548
  %2756 = add i32 %2755, %2357
  %2757 = add i32 %2662, %2756
  %2758 = add i32 %2673, %2757
  %2759 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2745, i32 %2745, i32 30) #1
  %2760 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2745, i32 %2745, i32 19) #1
  %2761 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2745, i32 %2745, i32 10) #1
  %2762 = xor i32 %2759, %2760
  %2763 = xor i32 %2762, %2761
  %2764 = or i32 %2721, %2697
  %2765 = and i32 %2764, %2745
  %2766 = and i32 %2721, %2697
  %2767 = or i32 %2765, %2766
  %2768 = add i32 %2763, %2767
  %2769 = add i32 %2757, %2768
  %2770 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2758, i32 %2758, i32 26) #1
  %2771 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2758, i32 %2758, i32 21) #1
  %2772 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2758, i32 %2758, i32 7) #1
  %2773 = xor i32 %2770, %2771
  %2774 = xor i32 %2773, %2772
  %2775 = xor i32 %2734, %2710
  %2776 = and i32 %2775, %2758
  %2777 = xor i32 %2776, %2710
  %2778 = add i32 %2774, %2777
  %2779 = add i32 %2778, -1424204075
  %2780 = add i32 %2779, %2361
  %2781 = add i32 %2686, %2780
  %2782 = add i32 %2697, %2781
  %2783 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2769, i32 %2769, i32 30) #1
  %2784 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2769, i32 %2769, i32 19) #1
  %2785 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2769, i32 %2769, i32 10) #1
  %2786 = xor i32 %2783, %2784
  %2787 = xor i32 %2786, %2785
  %2788 = or i32 %2745, %2721
  %2789 = and i32 %2788, %2769
  %2790 = and i32 %2745, %2721
  %2791 = or i32 %2789, %2790
  %2792 = add i32 %2787, %2791
  %2793 = add i32 %2781, %2792
  %2794 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2782, i32 %2782, i32 26) #1
  %2795 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2782, i32 %2782, i32 21) #1
  %2796 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2782, i32 %2782, i32 7) #1
  %2797 = xor i32 %2794, %2795
  %2798 = xor i32 %2797, %2796
  %2799 = xor i32 %2758, %2734
  %2800 = and i32 %2799, %2782
  %2801 = xor i32 %2800, %2734
  %2802 = add i32 %2798, %2801
  %2803 = add i32 %2802, -670586216
  %2804 = add i32 %2803, %2365
  %2805 = add i32 %2710, %2804
  %2806 = add i32 %2721, %2805
  %2807 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2793, i32 %2793, i32 30) #1
  %2808 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2793, i32 %2793, i32 19) #1
  %2809 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2793, i32 %2793, i32 10) #1
  %2810 = xor i32 %2807, %2808
  %2811 = xor i32 %2810, %2809
  %2812 = or i32 %2769, %2745
  %2813 = and i32 %2812, %2793
  %2814 = and i32 %2769, %2745
  %2815 = or i32 %2813, %2814
  %2816 = add i32 %2811, %2815
  %2817 = add i32 %2805, %2816
  %2818 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2806, i32 %2806, i32 26) #1
  %2819 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2806, i32 %2806, i32 21) #1
  %2820 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2806, i32 %2806, i32 7) #1
  %2821 = xor i32 %2818, %2819
  %2822 = xor i32 %2821, %2820
  %2823 = xor i32 %2782, %2758
  %2824 = and i32 %2823, %2806
  %2825 = xor i32 %2824, %2758
  %2826 = add i32 %2822, %2825
  %2827 = add i32 %2826, 310598401
  %2828 = add i32 %2827, %2369
  %2829 = add i32 %2734, %2828
  %2830 = add i32 %2745, %2829
  %2831 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2817, i32 %2817, i32 30) #1
  %2832 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2817, i32 %2817, i32 19) #1
  %2833 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2817, i32 %2817, i32 10) #1
  %2834 = xor i32 %2831, %2832
  %2835 = xor i32 %2834, %2833
  %2836 = or i32 %2793, %2769
  %2837 = and i32 %2836, %2817
  %2838 = and i32 %2793, %2769
  %2839 = or i32 %2837, %2838
  %2840 = add i32 %2835, %2839
  %2841 = add i32 %2829, %2840
  %2842 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2830, i32 %2830, i32 26) #1
  %2843 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2830, i32 %2830, i32 21) #1
  %2844 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2830, i32 %2830, i32 7) #1
  %2845 = xor i32 %2842, %2843
  %2846 = xor i32 %2845, %2844
  %2847 = xor i32 %2806, %2782
  %2848 = and i32 %2847, %2830
  %2849 = xor i32 %2848, %2782
  %2850 = add i32 %2846, %2849
  %2851 = add i32 %2850, 607225278
  %2852 = add i32 %2851, %2373
  %2853 = add i32 %2758, %2852
  %2854 = add i32 %2769, %2853
  %2855 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2841, i32 %2841, i32 30) #1
  %2856 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2841, i32 %2841, i32 19) #1
  %2857 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2841, i32 %2841, i32 10) #1
  %2858 = xor i32 %2855, %2856
  %2859 = xor i32 %2858, %2857
  %2860 = or i32 %2817, %2793
  %2861 = and i32 %2860, %2841
  %2862 = and i32 %2817, %2793
  %2863 = or i32 %2861, %2862
  %2864 = add i32 %2859, %2863
  %2865 = add i32 %2853, %2864
  %2866 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2854, i32 %2854, i32 26) #1
  %2867 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2854, i32 %2854, i32 21) #1
  %2868 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2854, i32 %2854, i32 7) #1
  %2869 = xor i32 %2866, %2867
  %2870 = xor i32 %2869, %2868
  %2871 = xor i32 %2830, %2806
  %2872 = and i32 %2871, %2854
  %2873 = xor i32 %2872, %2806
  %2874 = add i32 %2870, %2873
  %2875 = add i32 %2874, 1426881987
  %2876 = add i32 %2875, %2377
  %2877 = add i32 %2782, %2876
  %2878 = add i32 %2793, %2877
  %2879 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2865, i32 %2865, i32 30) #1
  %2880 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2865, i32 %2865, i32 19) #1
  %2881 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2865, i32 %2865, i32 10) #1
  %2882 = xor i32 %2879, %2880
  %2883 = xor i32 %2882, %2881
  %2884 = or i32 %2841, %2817
  %2885 = and i32 %2884, %2865
  %2886 = and i32 %2841, %2817
  %2887 = or i32 %2885, %2886
  %2888 = add i32 %2883, %2887
  %2889 = add i32 %2877, %2888
  %2890 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2878, i32 %2878, i32 26) #1
  %2891 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2878, i32 %2878, i32 21) #1
  %2892 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2878, i32 %2878, i32 7) #1
  %2893 = xor i32 %2890, %2891
  %2894 = xor i32 %2893, %2892
  %2895 = xor i32 %2854, %2830
  %2896 = and i32 %2895, %2878
  %2897 = xor i32 %2896, %2830
  %2898 = add i32 %2894, %2897
  %2899 = add i32 %2898, 1925078388
  %2900 = add i32 %2899, %2381
  %2901 = add i32 %2806, %2900
  %2902 = add i32 %2817, %2901
  %2903 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2889, i32 %2889, i32 30) #1
  %2904 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2889, i32 %2889, i32 19) #1
  %2905 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2889, i32 %2889, i32 10) #1
  %2906 = xor i32 %2903, %2904
  %2907 = xor i32 %2906, %2905
  %2908 = or i32 %2865, %2841
  %2909 = and i32 %2908, %2889
  %2910 = and i32 %2865, %2841
  %2911 = or i32 %2909, %2910
  %2912 = add i32 %2907, %2911
  %2913 = add i32 %2901, %2912
  %2914 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2902, i32 %2902, i32 26) #1
  %2915 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2902, i32 %2902, i32 21) #1
  %2916 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2902, i32 %2902, i32 7) #1
  %2917 = xor i32 %2914, %2915
  %2918 = xor i32 %2917, %2916
  %2919 = xor i32 %2878, %2854
  %2920 = and i32 %2919, %2902
  %2921 = xor i32 %2920, %2854
  %2922 = add i32 %2918, %2921
  %2923 = add i32 %2922, -2132889090
  %2924 = add i32 %2923, %2385
  %2925 = add i32 %2830, %2924
  %2926 = add i32 %2841, %2925
  %2927 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2913, i32 %2913, i32 30) #1
  %2928 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2913, i32 %2913, i32 19) #1
  %2929 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2913, i32 %2913, i32 10) #1
  %2930 = xor i32 %2927, %2928
  %2931 = xor i32 %2930, %2929
  %2932 = or i32 %2889, %2865
  %2933 = and i32 %2932, %2913
  %2934 = and i32 %2889, %2865
  %2935 = or i32 %2933, %2934
  %2936 = add i32 %2931, %2935
  %2937 = add i32 %2925, %2936
  %2938 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2926, i32 %2926, i32 26) #1
  %2939 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2926, i32 %2926, i32 21) #1
  %2940 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2926, i32 %2926, i32 7) #1
  %2941 = xor i32 %2938, %2939
  %2942 = xor i32 %2941, %2940
  %2943 = xor i32 %2902, %2878
  %2944 = and i32 %2943, %2926
  %2945 = xor i32 %2944, %2878
  %2946 = add i32 %2942, %2945
  %2947 = add i32 %2946, -1680079193
  %2948 = add i32 %2947, %2389
  %2949 = add i32 %2854, %2948
  %2950 = add i32 %2865, %2949
  %2951 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2937, i32 %2937, i32 30) #1
  %2952 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2937, i32 %2937, i32 19) #1
  %2953 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2937, i32 %2937, i32 10) #1
  %2954 = xor i32 %2951, %2952
  %2955 = xor i32 %2954, %2953
  %2956 = or i32 %2913, %2889
  %2957 = and i32 %2956, %2937
  %2958 = and i32 %2913, %2889
  %2959 = or i32 %2957, %2958
  %2960 = add i32 %2955, %2959
  %2961 = add i32 %2949, %2960
  %2962 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2950, i32 %2950, i32 26) #1
  %2963 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2950, i32 %2950, i32 21) #1
  %2964 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2950, i32 %2950, i32 7) #1
  %2965 = xor i32 %2962, %2963
  %2966 = xor i32 %2965, %2964
  %2967 = xor i32 %2926, %2902
  %2968 = and i32 %2967, %2950
  %2969 = xor i32 %2968, %2902
  %2970 = add i32 %2966, %2969
  %2971 = add i32 %2970, -1046744716
  %2972 = add i32 %2971, %2393
  %2973 = add i32 %2878, %2972
  %2974 = add i32 %2889, %2973
  %2975 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2961, i32 %2961, i32 30) #1
  %2976 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2961, i32 %2961, i32 19) #1
  %2977 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2961, i32 %2961, i32 10) #1
  %2978 = xor i32 %2975, %2976
  %2979 = xor i32 %2978, %2977
  %2980 = or i32 %2937, %2913
  %2981 = and i32 %2980, %2961
  %2982 = and i32 %2937, %2913
  %2983 = or i32 %2981, %2982
  %2984 = add i32 %2979, %2983
  %2985 = add i32 %2973, %2984
  %2986 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2974, i32 %2974, i32 26) #1
  %2987 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2974, i32 %2974, i32 21) #1
  %2988 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2974, i32 %2974, i32 7) #1
  %2989 = xor i32 %2986, %2987
  %2990 = xor i32 %2989, %2988
  %2991 = xor i32 %2950, %2926
  %2992 = and i32 %2991, %2974
  %2993 = xor i32 %2992, %2926
  %2994 = add i32 %2990, %2993
  %2995 = add i32 %2994, -459576895
  %2996 = add i32 %2995, %2406
  %2997 = add i32 %2902, %2996
  %2998 = add i32 %2913, %2997
  %2999 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2985, i32 %2985, i32 30) #1
  %3000 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2985, i32 %2985, i32 19) #1
  %3001 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2985, i32 %2985, i32 10) #1
  %3002 = xor i32 %2999, %3000
  %3003 = xor i32 %3002, %3001
  %3004 = or i32 %2961, %2937
  %3005 = and i32 %3004, %2985
  %3006 = and i32 %2961, %2937
  %3007 = or i32 %3005, %3006
  %3008 = add i32 %3003, %3007
  %3009 = add i32 %2997, %3008
  %3010 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2998, i32 %2998, i32 26) #1
  %3011 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2998, i32 %2998, i32 21) #1
  %3012 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2998, i32 %2998, i32 7) #1
  %3013 = xor i32 %3010, %3011
  %3014 = xor i32 %3013, %3012
  %3015 = xor i32 %2974, %2950
  %3016 = and i32 %3015, %2998
  %3017 = xor i32 %3016, %2950
  %3018 = add i32 %3014, %3017
  %3019 = add i32 %3018, -272742522
  %3020 = add i32 %3019, %2419
  %3021 = add i32 %2926, %3020
  %3022 = add i32 %2937, %3021
  %3023 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3009, i32 %3009, i32 30) #1
  %3024 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3009, i32 %3009, i32 19) #1
  %3025 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3009, i32 %3009, i32 10) #1
  %3026 = xor i32 %3023, %3024
  %3027 = xor i32 %3026, %3025
  %3028 = or i32 %2985, %2961
  %3029 = and i32 %3028, %3009
  %3030 = and i32 %2985, %2961
  %3031 = or i32 %3029, %3030
  %3032 = add i32 %3027, %3031
  %3033 = add i32 %3021, %3032
  %3034 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3022, i32 %3022, i32 26) #1
  %3035 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3022, i32 %3022, i32 21) #1
  %3036 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3022, i32 %3022, i32 7) #1
  %3037 = xor i32 %3034, %3035
  %3038 = xor i32 %3037, %3036
  %3039 = xor i32 %2998, %2974
  %3040 = and i32 %3039, %3022
  %3041 = xor i32 %3040, %2974
  %3042 = add i32 %3038, %3041
  %3043 = add i32 %3042, 264347078
  %3044 = add i32 %3043, %2432
  %3045 = add i32 %2950, %3044
  %3046 = add i32 %2961, %3045
  %3047 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3033, i32 %3033, i32 30) #1
  %3048 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3033, i32 %3033, i32 19) #1
  %3049 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3033, i32 %3033, i32 10) #1
  %3050 = xor i32 %3047, %3048
  %3051 = xor i32 %3050, %3049
  %3052 = or i32 %3009, %2985
  %3053 = and i32 %3052, %3033
  %3054 = and i32 %3009, %2985
  %3055 = or i32 %3053, %3054
  %3056 = add i32 %3051, %3055
  %3057 = add i32 %3045, %3056
  %3058 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3046, i32 %3046, i32 26) #1
  %3059 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3046, i32 %3046, i32 21) #1
  %3060 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3046, i32 %3046, i32 7) #1
  %3061 = xor i32 %3058, %3059
  %3062 = xor i32 %3061, %3060
  %3063 = xor i32 %3022, %2998
  %3064 = and i32 %3063, %3046
  %3065 = xor i32 %3064, %2998
  %3066 = add i32 %3062, %3065
  %3067 = add i32 %3066, 604807628
  %3068 = add i32 %3067, %2445
  %3069 = add i32 %2974, %3068
  %3070 = add i32 %2985, %3069
  %3071 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3057, i32 %3057, i32 30) #1
  %3072 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3057, i32 %3057, i32 19) #1
  %3073 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3057, i32 %3057, i32 10) #1
  %3074 = xor i32 %3071, %3072
  %3075 = xor i32 %3074, %3073
  %3076 = or i32 %3033, %3009
  %3077 = and i32 %3076, %3057
  %3078 = and i32 %3033, %3009
  %3079 = or i32 %3077, %3078
  %3080 = add i32 %3075, %3079
  %3081 = add i32 %3069, %3080
  %3082 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3070, i32 %3070, i32 26) #1
  %3083 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3070, i32 %3070, i32 21) #1
  %3084 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3070, i32 %3070, i32 7) #1
  %3085 = xor i32 %3082, %3083
  %3086 = xor i32 %3085, %3084
  %3087 = xor i32 %3046, %3022
  %3088 = and i32 %3087, %3070
  %3089 = xor i32 %3088, %3022
  %3090 = add i32 %3086, %3089
  %3091 = add i32 %3090, 770255983
  %3092 = add i32 %3091, %2458
  %3093 = add i32 %2998, %3092
  %3094 = add i32 %3009, %3093
  %3095 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3081, i32 %3081, i32 30) #1
  %3096 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3081, i32 %3081, i32 19) #1
  %3097 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3081, i32 %3081, i32 10) #1
  %3098 = xor i32 %3095, %3096
  %3099 = xor i32 %3098, %3097
  %3100 = or i32 %3057, %3033
  %3101 = and i32 %3100, %3081
  %3102 = and i32 %3057, %3033
  %3103 = or i32 %3101, %3102
  %3104 = add i32 %3099, %3103
  %3105 = add i32 %3093, %3104
  %3106 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3094, i32 %3094, i32 26) #1
  %3107 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3094, i32 %3094, i32 21) #1
  %3108 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3094, i32 %3094, i32 7) #1
  %3109 = xor i32 %3106, %3107
  %3110 = xor i32 %3109, %3108
  %3111 = xor i32 %3070, %3046
  %3112 = and i32 %3111, %3094
  %3113 = xor i32 %3112, %3046
  %3114 = add i32 %3110, %3113
  %3115 = add i32 %3114, 1249150122
  %3116 = add i32 %3115, %2471
  %3117 = add i32 %3022, %3116
  %3118 = add i32 %3033, %3117
  %3119 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3105, i32 %3105, i32 30) #1
  %3120 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3105, i32 %3105, i32 19) #1
  %3121 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3105, i32 %3105, i32 10) #1
  %3122 = xor i32 %3119, %3120
  %3123 = xor i32 %3122, %3121
  %3124 = or i32 %3081, %3057
  %3125 = and i32 %3124, %3105
  %3126 = and i32 %3081, %3057
  %3127 = or i32 %3125, %3126
  %3128 = add i32 %3123, %3127
  %3129 = add i32 %3117, %3128
  %3130 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3118, i32 %3118, i32 26) #1
  %3131 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3118, i32 %3118, i32 21) #1
  %3132 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3118, i32 %3118, i32 7) #1
  %3133 = xor i32 %3130, %3131
  %3134 = xor i32 %3133, %3132
  %3135 = xor i32 %3094, %3070
  %3136 = and i32 %3135, %3118
  %3137 = xor i32 %3136, %3070
  %3138 = add i32 %3134, %3137
  %3139 = add i32 %3138, 1555081692
  %3140 = add i32 %3139, %2484
  %3141 = add i32 %3046, %3140
  %3142 = add i32 %3057, %3141
  %3143 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3129, i32 %3129, i32 30) #1
  %3144 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3129, i32 %3129, i32 19) #1
  %3145 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3129, i32 %3129, i32 10) #1
  %3146 = xor i32 %3143, %3144
  %3147 = xor i32 %3146, %3145
  %3148 = or i32 %3105, %3081
  %3149 = and i32 %3148, %3129
  %3150 = and i32 %3105, %3081
  %3151 = or i32 %3149, %3150
  %3152 = add i32 %3147, %3151
  %3153 = add i32 %3141, %3152
  %3154 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3142, i32 %3142, i32 26) #1
  %3155 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3142, i32 %3142, i32 21) #1
  %3156 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3142, i32 %3142, i32 7) #1
  %3157 = xor i32 %3154, %3155
  %3158 = xor i32 %3157, %3156
  %3159 = xor i32 %3118, %3094
  %3160 = and i32 %3159, %3142
  %3161 = xor i32 %3160, %3094
  %3162 = add i32 %3158, %3161
  %3163 = add i32 %3162, 1996064986
  %3164 = add i32 %3163, %2497
  %3165 = add i32 %3070, %3164
  %3166 = add i32 %3081, %3165
  %3167 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3153, i32 %3153, i32 30) #1
  %3168 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3153, i32 %3153, i32 19) #1
  %3169 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3153, i32 %3153, i32 10) #1
  %3170 = xor i32 %3167, %3168
  %3171 = xor i32 %3170, %3169
  %3172 = or i32 %3129, %3105
  %3173 = and i32 %3172, %3153
  %3174 = and i32 %3129, %3105
  %3175 = or i32 %3173, %3174
  %3176 = add i32 %3171, %3175
  %3177 = add i32 %3165, %3176
  %3178 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3166, i32 %3166, i32 26) #1
  %3179 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3166, i32 %3166, i32 21) #1
  %3180 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3166, i32 %3166, i32 7) #1
  %3181 = xor i32 %3178, %3179
  %3182 = xor i32 %3181, %3180
  %3183 = xor i32 %3142, %3118
  %3184 = and i32 %3183, %3166
  %3185 = xor i32 %3184, %3118
  %3186 = add i32 %3182, %3185
  %3187 = add i32 %3186, -1740746414
  %3188 = add i32 %3187, %2510
  %3189 = add i32 %3094, %3188
  %3190 = add i32 %3105, %3189
  %3191 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3177, i32 %3177, i32 30) #1
  %3192 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3177, i32 %3177, i32 19) #1
  %3193 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3177, i32 %3177, i32 10) #1
  %3194 = xor i32 %3191, %3192
  %3195 = xor i32 %3194, %3193
  %3196 = or i32 %3153, %3129
  %3197 = and i32 %3196, %3177
  %3198 = and i32 %3153, %3129
  %3199 = or i32 %3197, %3198
  %3200 = add i32 %3195, %3199
  %3201 = add i32 %3189, %3200
  %3202 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3190, i32 %3190, i32 26) #1
  %3203 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3190, i32 %3190, i32 21) #1
  %3204 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3190, i32 %3190, i32 7) #1
  %3205 = xor i32 %3202, %3203
  %3206 = xor i32 %3205, %3204
  %3207 = xor i32 %3166, %3142
  %3208 = and i32 %3207, %3190
  %3209 = xor i32 %3208, %3142
  %3210 = add i32 %3206, %3209
  %3211 = add i32 %3210, -1473132947
  %3212 = add i32 %3211, %2523
  %3213 = add i32 %3118, %3212
  %3214 = add i32 %3129, %3213
  %3215 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3201, i32 %3201, i32 30) #1
  %3216 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3201, i32 %3201, i32 19) #1
  %3217 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3201, i32 %3201, i32 10) #1
  %3218 = xor i32 %3215, %3216
  %3219 = xor i32 %3218, %3217
  %3220 = or i32 %3177, %3153
  %3221 = and i32 %3220, %3201
  %3222 = and i32 %3177, %3153
  %3223 = or i32 %3221, %3222
  %3224 = add i32 %3219, %3223
  %3225 = add i32 %3213, %3224
  %3226 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3214, i32 %3214, i32 26) #1
  %3227 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3214, i32 %3214, i32 21) #1
  %3228 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3214, i32 %3214, i32 7) #1
  %3229 = xor i32 %3226, %3227
  %3230 = xor i32 %3229, %3228
  %3231 = xor i32 %3190, %3166
  %3232 = and i32 %3231, %3214
  %3233 = xor i32 %3232, %3166
  %3234 = add i32 %3230, %3233
  %3235 = add i32 %3234, -1341970488
  %3236 = add i32 %3235, %2536
  %3237 = add i32 %3142, %3236
  %3238 = add i32 %3153, %3237
  %3239 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3225, i32 %3225, i32 30) #1
  %3240 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3225, i32 %3225, i32 19) #1
  %3241 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3225, i32 %3225, i32 10) #1
  %3242 = xor i32 %3239, %3240
  %3243 = xor i32 %3242, %3241
  %3244 = or i32 %3201, %3177
  %3245 = and i32 %3244, %3225
  %3246 = and i32 %3201, %3177
  %3247 = or i32 %3245, %3246
  %3248 = add i32 %3243, %3247
  %3249 = add i32 %3237, %3248
  %3250 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3238, i32 %3238, i32 26) #1
  %3251 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3238, i32 %3238, i32 21) #1
  %3252 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3238, i32 %3238, i32 7) #1
  %3253 = xor i32 %3250, %3251
  %3254 = xor i32 %3253, %3252
  %3255 = xor i32 %3214, %3190
  %3256 = and i32 %3255, %3238
  %3257 = xor i32 %3256, %3190
  %3258 = add i32 %3254, %3257
  %3259 = add i32 %3258, -1084653625
  %3260 = add i32 %3259, %2549
  %3261 = add i32 %3166, %3260
  %3262 = add i32 %3177, %3261
  %3263 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3249, i32 %3249, i32 30) #1
  %3264 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3249, i32 %3249, i32 19) #1
  %3265 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3249, i32 %3249, i32 10) #1
  %3266 = xor i32 %3263, %3264
  %3267 = xor i32 %3266, %3265
  %3268 = or i32 %3225, %3201
  %3269 = and i32 %3268, %3249
  %3270 = and i32 %3225, %3201
  %3271 = or i32 %3269, %3270
  %3272 = add i32 %3267, %3271
  %3273 = add i32 %3261, %3272
  %3274 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3262, i32 %3262, i32 26) #1
  %3275 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3262, i32 %3262, i32 21) #1
  %3276 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3262, i32 %3262, i32 7) #1
  %3277 = xor i32 %3274, %3275
  %3278 = xor i32 %3277, %3276
  %3279 = xor i32 %3238, %3214
  %3280 = and i32 %3279, %3262
  %3281 = xor i32 %3280, %3214
  %3282 = add i32 %3278, %3281
  %3283 = add i32 %3282, -958395405
  %3284 = add i32 %3283, %2562
  %3285 = add i32 %3190, %3284
  %3286 = add i32 %3201, %3285
  %3287 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3273, i32 %3273, i32 30) #1
  %3288 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3273, i32 %3273, i32 19) #1
  %3289 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3273, i32 %3273, i32 10) #1
  %3290 = xor i32 %3287, %3288
  %3291 = xor i32 %3290, %3289
  %3292 = or i32 %3249, %3225
  %3293 = and i32 %3292, %3273
  %3294 = and i32 %3249, %3225
  %3295 = or i32 %3293, %3294
  %3296 = add i32 %3291, %3295
  %3297 = add i32 %3285, %3296
  %3298 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3286, i32 %3286, i32 26) #1
  %3299 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3286, i32 %3286, i32 21) #1
  %3300 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3286, i32 %3286, i32 7) #1
  %3301 = xor i32 %3298, %3299
  %3302 = xor i32 %3301, %3300
  %3303 = xor i32 %3262, %3238
  %3304 = and i32 %3303, %3286
  %3305 = xor i32 %3304, %3238
  %3306 = add i32 %3302, %3305
  %3307 = add i32 %3306, -710438585
  %3308 = add i32 %3307, %2575
  %3309 = add i32 %3214, %3308
  %3310 = add i32 %3225, %3309
  %3311 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3297, i32 %3297, i32 30) #1
  %3312 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3297, i32 %3297, i32 19) #1
  %3313 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3297, i32 %3297, i32 10) #1
  %3314 = xor i32 %3311, %3312
  %3315 = xor i32 %3314, %3313
  %3316 = or i32 %3273, %3249
  %3317 = and i32 %3316, %3297
  %3318 = and i32 %3273, %3249
  %3319 = or i32 %3317, %3318
  %3320 = add i32 %3315, %3319
  %3321 = add i32 %3309, %3320
  %3322 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3310, i32 %3310, i32 26) #1
  %3323 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3310, i32 %3310, i32 21) #1
  %3324 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3310, i32 %3310, i32 7) #1
  %3325 = xor i32 %3322, %3323
  %3326 = xor i32 %3325, %3324
  %3327 = xor i32 %3286, %3262
  %3328 = and i32 %3327, %3310
  %3329 = xor i32 %3328, %3262
  %3330 = add i32 %3326, %3329
  %3331 = add i32 %3330, 113926993
  %3332 = add i32 %3331, %2588
  %3333 = add i32 %3238, %3332
  %3334 = add i32 %3249, %3333
  %3335 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3321, i32 %3321, i32 30) #1
  %3336 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3321, i32 %3321, i32 19) #1
  %3337 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3321, i32 %3321, i32 10) #1
  %3338 = xor i32 %3335, %3336
  %3339 = xor i32 %3338, %3337
  %3340 = or i32 %3297, %3273
  %3341 = and i32 %3340, %3321
  %3342 = and i32 %3297, %3273
  %3343 = or i32 %3341, %3342
  %3344 = add i32 %3339, %3343
  %3345 = add i32 %3333, %3344
  %3346 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3334, i32 %3334, i32 26) #1
  %3347 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3334, i32 %3334, i32 21) #1
  %3348 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3334, i32 %3334, i32 7) #1
  %3349 = xor i32 %3346, %3347
  %3350 = xor i32 %3349, %3348
  %3351 = xor i32 %3310, %3286
  %3352 = and i32 %3351, %3334
  %3353 = xor i32 %3352, %3286
  %3354 = add i32 %3350, %3353
  %3355 = add i32 %3354, 338241895
  %3356 = add i32 %3355, %2601
  %3357 = add i32 %3262, %3356
  %3358 = add i32 %3273, %3357
  %3359 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3345, i32 %3345, i32 30) #1
  %3360 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3345, i32 %3345, i32 19) #1
  %3361 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3345, i32 %3345, i32 10) #1
  %3362 = xor i32 %3359, %3360
  %3363 = xor i32 %3362, %3361
  %3364 = or i32 %3321, %3297
  %3365 = and i32 %3364, %3345
  %3366 = and i32 %3321, %3297
  %3367 = or i32 %3365, %3366
  %3368 = add i32 %3363, %3367
  %3369 = add i32 %3357, %3368
  %3370 = add i32 %2406, %2523
  %3371 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2419, i32 %2419, i32 25) #1
  %3372 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2419, i32 %2419, i32 14) #1
  %3373 = lshr i32 %2419, 3
  %3374 = xor i32 %3371, %3372
  %3375 = xor i32 %3374, %3373
  %3376 = add i32 %3370, %3375
  %3377 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2588, i32 %2588, i32 15) #1
  %3378 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2588, i32 %2588, i32 13) #1
  %3379 = lshr i32 %2588, 10
  %3380 = xor i32 %3377, %3378
  %3381 = xor i32 %3380, %3379
  %3382 = add i32 %3376, %3381
  store i32 %3382, i32* %23, align 4
  %3383 = add i32 %2419, %2536
  %3384 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2432, i32 %2432, i32 25) #1
  %3385 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2432, i32 %2432, i32 14) #1
  %3386 = lshr i32 %2432, 3
  %3387 = xor i32 %3384, %3385
  %3388 = xor i32 %3387, %3386
  %3389 = add i32 %3383, %3388
  %3390 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2601, i32 %2601, i32 15) #1
  %3391 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2601, i32 %2601, i32 13) #1
  %3392 = lshr i32 %2601, 10
  %3393 = xor i32 %3390, %3391
  %3394 = xor i32 %3393, %3392
  %3395 = add i32 %3389, %3394
  store i32 %3395, i32* %24, align 4
  %3396 = add i32 %2432, %2549
  %3397 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2445, i32 %2445, i32 25) #1
  %3398 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2445, i32 %2445, i32 14) #1
  %3399 = lshr i32 %2445, 3
  %3400 = xor i32 %3397, %3398
  %3401 = xor i32 %3400, %3399
  %3402 = add i32 %3396, %3401
  %3403 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3382, i32 %3382, i32 15) #1
  %3404 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3382, i32 %3382, i32 13) #1
  %3405 = lshr i32 %3382, 10
  %3406 = xor i32 %3403, %3404
  %3407 = xor i32 %3406, %3405
  %3408 = add i32 %3402, %3407
  %3409 = add i32 %2445, %2562
  %3410 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2458, i32 %2458, i32 25) #1
  %3411 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2458, i32 %2458, i32 14) #1
  %3412 = lshr i32 %2458, 3
  %3413 = xor i32 %3410, %3411
  %3414 = xor i32 %3413, %3412
  %3415 = add i32 %3409, %3414
  %3416 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3395, i32 %3395, i32 15) #1
  %3417 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3395, i32 %3395, i32 13) #1
  %3418 = lshr i32 %3395, 10
  %3419 = xor i32 %3416, %3417
  %3420 = xor i32 %3419, %3418
  %3421 = add i32 %3415, %3420
  store i32 %3421, i32* %26, align 4
  %3422 = add i32 %2458, %2575
  %3423 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2471, i32 %2471, i32 25) #1
  %3424 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2471, i32 %2471, i32 14) #1
  %3425 = lshr i32 %2471, 3
  %3426 = xor i32 %3423, %3424
  %3427 = xor i32 %3426, %3425
  %3428 = add i32 %3422, %3427
  %3429 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3408, i32 %3408, i32 15) #1
  %3430 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3408, i32 %3408, i32 13) #1
  %3431 = lshr i32 %3408, 10
  %3432 = xor i32 %3429, %3430
  %3433 = xor i32 %3432, %3431
  %3434 = add i32 %3428, %3433
  store i32 %3434, i32* %27, align 4
  %3435 = add i32 %2471, %2588
  %3436 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2484, i32 %2484, i32 25) #1
  %3437 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2484, i32 %2484, i32 14) #1
  %3438 = lshr i32 %2484, 3
  %3439 = xor i32 %3436, %3437
  %3440 = xor i32 %3439, %3438
  %3441 = add i32 %3435, %3440
  %3442 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3421, i32 %3421, i32 15) #1
  %3443 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3421, i32 %3421, i32 13) #1
  %3444 = lshr i32 %3421, 10
  %3445 = xor i32 %3442, %3443
  %3446 = xor i32 %3445, %3444
  %3447 = add i32 %3441, %3446
  store i32 %3447, i32* %28, align 4
  %3448 = add i32 %2484, %2601
  %3449 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2497, i32 %2497, i32 25) #1
  %3450 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2497, i32 %2497, i32 14) #1
  %3451 = lshr i32 %2497, 3
  %3452 = xor i32 %3449, %3450
  %3453 = xor i32 %3452, %3451
  %3454 = add i32 %3448, %3453
  %3455 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3434, i32 %3434, i32 15) #1
  %3456 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3434, i32 %3434, i32 13) #1
  %3457 = lshr i32 %3434, 10
  %3458 = xor i32 %3455, %3456
  %3459 = xor i32 %3458, %3457
  %3460 = add i32 %3454, %3459
  store i32 %3460, i32* %29, align 4
  %3461 = add i32 %2497, %3382
  %3462 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2510, i32 %2510, i32 25) #1
  %3463 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2510, i32 %2510, i32 14) #1
  %3464 = lshr i32 %2510, 3
  %3465 = xor i32 %3462, %3463
  %3466 = xor i32 %3465, %3464
  %3467 = add i32 %3461, %3466
  %3468 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3447, i32 %3447, i32 15) #1
  %3469 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3447, i32 %3447, i32 13) #1
  %3470 = lshr i32 %3447, 10
  %3471 = xor i32 %3468, %3469
  %3472 = xor i32 %3471, %3470
  %3473 = add i32 %3467, %3472
  store i32 %3473, i32* %30, align 4
  %3474 = add i32 %2510, %3395
  %3475 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2523, i32 %2523, i32 25) #1
  %3476 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2523, i32 %2523, i32 14) #1
  %3477 = lshr i32 %2523, 3
  %3478 = xor i32 %3475, %3476
  %3479 = xor i32 %3478, %3477
  %3480 = add i32 %3474, %3479
  %3481 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3460, i32 %3460, i32 15) #1
  %3482 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3460, i32 %3460, i32 13) #1
  %3483 = lshr i32 %3460, 10
  %3484 = xor i32 %3481, %3482
  %3485 = xor i32 %3484, %3483
  %3486 = add i32 %3480, %3485
  store i32 %3486, i32* %31, align 4
  %3487 = add i32 %2523, %3408
  %3488 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2536, i32 %2536, i32 25) #1
  %3489 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2536, i32 %2536, i32 14) #1
  %3490 = lshr i32 %2536, 3
  %3491 = xor i32 %3488, %3489
  %3492 = xor i32 %3491, %3490
  %3493 = add i32 %3487, %3492
  %3494 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3473, i32 %3473, i32 15) #1
  %3495 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3473, i32 %3473, i32 13) #1
  %3496 = lshr i32 %3473, 10
  %3497 = xor i32 %3494, %3495
  %3498 = xor i32 %3497, %3496
  %3499 = add i32 %3493, %3498
  %3500 = add i32 %2536, %3421
  %3501 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2549, i32 %2549, i32 25) #1
  %3502 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2549, i32 %2549, i32 14) #1
  %3503 = lshr i32 %2549, 3
  %3504 = xor i32 %3501, %3502
  %3505 = xor i32 %3504, %3503
  %3506 = add i32 %3500, %3505
  %3507 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3486, i32 %3486, i32 15) #1
  %3508 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3486, i32 %3486, i32 13) #1
  %3509 = lshr i32 %3486, 10
  %3510 = xor i32 %3507, %3508
  %3511 = xor i32 %3510, %3509
  %3512 = add i32 %3506, %3511
  %3513 = add i32 %2549, %3434
  %3514 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2562, i32 %2562, i32 25) #1
  %3515 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2562, i32 %2562, i32 14) #1
  %3516 = lshr i32 %2562, 3
  %3517 = xor i32 %3514, %3515
  %3518 = xor i32 %3517, %3516
  %3519 = add i32 %3513, %3518
  %3520 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3499, i32 %3499, i32 15) #1
  %3521 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3499, i32 %3499, i32 13) #1
  %3522 = lshr i32 %3499, 10
  %3523 = xor i32 %3520, %3521
  %3524 = xor i32 %3523, %3522
  %3525 = add i32 %3519, %3524
  %3526 = add i32 %2562, %3447
  %3527 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2575, i32 %2575, i32 25) #1
  %3528 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2575, i32 %2575, i32 14) #1
  %3529 = lshr i32 %2575, 3
  %3530 = xor i32 %3527, %3528
  %3531 = xor i32 %3530, %3529
  %3532 = add i32 %3526, %3531
  %3533 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3512, i32 %3512, i32 15) #1
  %3534 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3512, i32 %3512, i32 13) #1
  %3535 = lshr i32 %3512, 10
  %3536 = xor i32 %3533, %3534
  %3537 = xor i32 %3536, %3535
  %3538 = add i32 %3532, %3537
  %3539 = add i32 %2575, %3460
  %3540 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2588, i32 %2588, i32 25) #1
  %3541 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2588, i32 %2588, i32 14) #1
  %3542 = lshr i32 %2588, 3
  %3543 = xor i32 %3540, %3541
  %3544 = xor i32 %3543, %3542
  %3545 = add i32 %3539, %3544
  %3546 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3525, i32 %3525, i32 15) #1
  %3547 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3525, i32 %3525, i32 13) #1
  %3548 = lshr i32 %3525, 10
  %3549 = xor i32 %3546, %3547
  %3550 = xor i32 %3549, %3548
  %3551 = add i32 %3545, %3550
  %3552 = add i32 %2588, %3473
  %3553 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2601, i32 %2601, i32 25) #1
  %3554 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %2601, i32 %2601, i32 14) #1
  %3555 = lshr i32 %2601, 3
  %3556 = xor i32 %3553, %3554
  %3557 = xor i32 %3556, %3555
  %3558 = add i32 %3552, %3557
  %3559 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3538, i32 %3538, i32 15) #1
  %3560 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3538, i32 %3538, i32 13) #1
  %3561 = lshr i32 %3538, 10
  %3562 = xor i32 %3559, %3560
  %3563 = xor i32 %3562, %3561
  %3564 = add i32 %3558, %3563
  %3565 = add i32 %2601, %3486
  %3566 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3382, i32 %3382, i32 25) #1
  %3567 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3382, i32 %3382, i32 14) #1
  %3568 = lshr i32 %3382, 3
  %3569 = xor i32 %3566, %3567
  %3570 = xor i32 %3569, %3568
  %3571 = add i32 %3565, %3570
  %3572 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3551, i32 %3551, i32 15) #1
  %3573 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3551, i32 %3551, i32 13) #1
  %3574 = lshr i32 %3551, 10
  %3575 = xor i32 %3572, %3573
  %3576 = xor i32 %3575, %3574
  %3577 = add i32 %3571, %3576
  %3578 = add i32 %3382, %3499
  %3579 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3395, i32 %3395, i32 25) #1
  %3580 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3395, i32 %3395, i32 14) #1
  %3581 = lshr i32 %3395, 3
  %3582 = xor i32 %3579, %3580
  %3583 = xor i32 %3582, %3581
  %3584 = add i32 %3578, %3583
  %3585 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3564, i32 %3564, i32 15) #1
  %3586 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3564, i32 %3564, i32 13) #1
  %3587 = lshr i32 %3564, 10
  %3588 = xor i32 %3585, %3586
  %3589 = xor i32 %3588, %3587
  %3590 = add i32 %3584, %3589
  %3591 = add i32 %3395, %3512
  %3592 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3408, i32 %3408, i32 25) #1
  %3593 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3408, i32 %3408, i32 14) #1
  %3594 = lshr i32 %3408, 3
  %3595 = xor i32 %3592, %3593
  %3596 = xor i32 %3595, %3594
  %3597 = add i32 %3591, %3596
  %3598 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3577, i32 %3577, i32 15) #1
  %3599 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3577, i32 %3577, i32 13) #1
  %3600 = lshr i32 %3577, 10
  %3601 = xor i32 %3598, %3599
  %3602 = xor i32 %3601, %3600
  %3603 = add i32 %3597, %3602
  %3604 = add i32 %3408, %3525
  %3605 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3421, i32 %3421, i32 25) #1
  %3606 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3421, i32 %3421, i32 14) #1
  %3607 = lshr i32 %3421, 3
  %3608 = xor i32 %3605, %3606
  %3609 = xor i32 %3608, %3607
  %3610 = add i32 %3604, %3609
  %3611 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3590, i32 %3590, i32 15) #1
  %3612 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3590, i32 %3590, i32 13) #1
  %3613 = lshr i32 %3590, 10
  %3614 = xor i32 %3611, %3612
  %3615 = xor i32 %3614, %3613
  %3616 = add i32 %3610, %3615
  %3617 = add i32 %3421, %3538
  %3618 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3434, i32 %3434, i32 25) #1
  %3619 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3434, i32 %3434, i32 14) #1
  %3620 = lshr i32 %3434, 3
  %3621 = xor i32 %3618, %3619
  %3622 = xor i32 %3621, %3620
  %3623 = add i32 %3617, %3622
  %3624 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3603, i32 %3603, i32 15) #1
  %3625 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3603, i32 %3603, i32 13) #1
  %3626 = lshr i32 %3603, 10
  %3627 = xor i32 %3624, %3625
  %3628 = xor i32 %3627, %3626
  %3629 = add i32 %3623, %3628
  %3630 = add i32 %3434, %3551
  %3631 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3447, i32 %3447, i32 25) #1
  %3632 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3447, i32 %3447, i32 14) #1
  %3633 = lshr i32 %3447, 3
  %3634 = xor i32 %3631, %3632
  %3635 = xor i32 %3634, %3633
  %3636 = add i32 %3630, %3635
  %3637 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3616, i32 %3616, i32 15) #1
  %3638 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3616, i32 %3616, i32 13) #1
  %3639 = lshr i32 %3616, 10
  %3640 = xor i32 %3637, %3638
  %3641 = xor i32 %3640, %3639
  %3642 = add i32 %3636, %3641
  %3643 = add i32 %3447, %3564
  %3644 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3460, i32 %3460, i32 25) #1
  %3645 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3460, i32 %3460, i32 14) #1
  %3646 = lshr i32 %3460, 3
  %3647 = xor i32 %3644, %3645
  %3648 = xor i32 %3647, %3646
  %3649 = add i32 %3643, %3648
  %3650 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3629, i32 %3629, i32 15) #1
  %3651 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3629, i32 %3629, i32 13) #1
  %3652 = lshr i32 %3629, 10
  %3653 = xor i32 %3650, %3651
  %3654 = xor i32 %3653, %3652
  %3655 = add i32 %3649, %3654
  %3656 = add i32 %3460, %3577
  %3657 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3473, i32 %3473, i32 25) #1
  %3658 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3473, i32 %3473, i32 14) #1
  %3659 = lshr i32 %3473, 3
  %3660 = xor i32 %3657, %3658
  %3661 = xor i32 %3660, %3659
  %3662 = add i32 %3656, %3661
  %3663 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3642, i32 %3642, i32 15) #1
  %3664 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3642, i32 %3642, i32 13) #1
  %3665 = lshr i32 %3642, 10
  %3666 = xor i32 %3663, %3664
  %3667 = xor i32 %3666, %3665
  %3668 = add i32 %3662, %3667
  %3669 = add i32 %3473, %3590
  %3670 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3486, i32 %3486, i32 25) #1
  %3671 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3486, i32 %3486, i32 14) #1
  %3672 = lshr i32 %3486, 3
  %3673 = xor i32 %3670, %3671
  %3674 = xor i32 %3673, %3672
  %3675 = add i32 %3669, %3674
  %3676 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3655, i32 %3655, i32 15) #1
  %3677 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3655, i32 %3655, i32 13) #1
  %3678 = lshr i32 %3655, 10
  %3679 = xor i32 %3676, %3677
  %3680 = xor i32 %3679, %3678
  %3681 = add i32 %3675, %3680
  %3682 = add i32 %3486, %3603
  %3683 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3499, i32 %3499, i32 25) #1
  %3684 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3499, i32 %3499, i32 14) #1
  %3685 = lshr i32 %3499, 3
  %3686 = xor i32 %3683, %3684
  %3687 = xor i32 %3686, %3685
  %3688 = add i32 %3682, %3687
  %3689 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3668, i32 %3668, i32 15) #1
  %3690 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3668, i32 %3668, i32 13) #1
  %3691 = lshr i32 %3668, 10
  %3692 = xor i32 %3689, %3690
  %3693 = xor i32 %3692, %3691
  %3694 = add i32 %3688, %3693
  %3695 = add i32 %3499, %3616
  %3696 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3512, i32 %3512, i32 25) #1
  %3697 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3512, i32 %3512, i32 14) #1
  %3698 = lshr i32 %3512, 3
  %3699 = xor i32 %3696, %3697
  %3700 = xor i32 %3699, %3698
  %3701 = add i32 %3695, %3700
  %3702 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3681, i32 %3681, i32 15) #1
  %3703 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3681, i32 %3681, i32 13) #1
  %3704 = lshr i32 %3681, 10
  %3705 = xor i32 %3702, %3703
  %3706 = xor i32 %3705, %3704
  %3707 = add i32 %3701, %3706
  %3708 = add i32 %3512, %3629
  %3709 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3525, i32 %3525, i32 25) #1
  %3710 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3525, i32 %3525, i32 14) #1
  %3711 = lshr i32 %3525, 3
  %3712 = xor i32 %3709, %3710
  %3713 = xor i32 %3712, %3711
  %3714 = add i32 %3708, %3713
  %3715 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3694, i32 %3694, i32 15) #1
  %3716 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3694, i32 %3694, i32 13) #1
  %3717 = lshr i32 %3694, 10
  %3718 = xor i32 %3715, %3716
  %3719 = xor i32 %3718, %3717
  %3720 = add i32 %3714, %3719
  %3721 = add i32 %3525, %3642
  %3722 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3538, i32 %3538, i32 25) #1
  %3723 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3538, i32 %3538, i32 14) #1
  %3724 = lshr i32 %3538, 3
  %3725 = xor i32 %3722, %3723
  %3726 = xor i32 %3725, %3724
  %3727 = add i32 %3721, %3726
  %3728 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3707, i32 %3707, i32 15) #1
  %3729 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3707, i32 %3707, i32 13) #1
  %3730 = lshr i32 %3707, 10
  %3731 = xor i32 %3728, %3729
  %3732 = xor i32 %3731, %3730
  %3733 = add i32 %3727, %3732
  %3734 = add i32 %3538, %3655
  %3735 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3551, i32 %3551, i32 25) #1
  %3736 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3551, i32 %3551, i32 14) #1
  %3737 = lshr i32 %3551, 3
  %3738 = xor i32 %3735, %3736
  %3739 = xor i32 %3738, %3737
  %3740 = add i32 %3734, %3739
  %3741 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3720, i32 %3720, i32 15) #1
  %3742 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3720, i32 %3720, i32 13) #1
  %3743 = lshr i32 %3720, 10
  %3744 = xor i32 %3741, %3742
  %3745 = xor i32 %3744, %3743
  %3746 = add i32 %3740, %3745
  %3747 = add i32 %3551, %3668
  %3748 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3564, i32 %3564, i32 25) #1
  %3749 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3564, i32 %3564, i32 14) #1
  %3750 = lshr i32 %3564, 3
  %3751 = xor i32 %3748, %3749
  %3752 = xor i32 %3751, %3750
  %3753 = add i32 %3747, %3752
  %3754 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3733, i32 %3733, i32 15) #1
  %3755 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3733, i32 %3733, i32 13) #1
  %3756 = lshr i32 %3733, 10
  %3757 = xor i32 %3754, %3755
  %3758 = xor i32 %3757, %3756
  %3759 = add i32 %3753, %3758
  %3760 = add i32 %3564, %3681
  %3761 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3577, i32 %3577, i32 25) #1
  %3762 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3577, i32 %3577, i32 14) #1
  %3763 = lshr i32 %3577, 3
  %3764 = xor i32 %3761, %3762
  %3765 = xor i32 %3764, %3763
  %3766 = add i32 %3760, %3765
  %3767 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3746, i32 %3746, i32 15) #1
  %3768 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3746, i32 %3746, i32 13) #1
  %3769 = lshr i32 %3746, 10
  %3770 = xor i32 %3767, %3768
  %3771 = xor i32 %3770, %3769
  %3772 = add i32 %3766, %3771
  %3773 = add i32 %3577, %3694
  %3774 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3590, i32 %3590, i32 25) #1
  %3775 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3590, i32 %3590, i32 14) #1
  %3776 = lshr i32 %3590, 3
  %3777 = xor i32 %3774, %3775
  %3778 = xor i32 %3777, %3776
  %3779 = add i32 %3773, %3778
  %3780 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3759, i32 %3759, i32 15) #1
  %3781 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3759, i32 %3759, i32 13) #1
  %3782 = lshr i32 %3759, 10
  %3783 = xor i32 %3780, %3781
  %3784 = xor i32 %3783, %3782
  %3785 = add i32 %3779, %3784
  %3786 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3358, i32 %3358, i32 26) #1
  %3787 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3358, i32 %3358, i32 21) #1
  %3788 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3358, i32 %3358, i32 7) #1
  %3789 = xor i32 %3786, %3787
  %3790 = xor i32 %3789, %3788
  %3791 = xor i32 %3334, %3310
  %3792 = and i32 %3791, %3358
  %3793 = xor i32 %3792, %3310
  %3794 = add i32 %3790, %3793
  %3795 = add i32 %3794, 666307205
  %3796 = add i32 %3795, %3382
  %3797 = add i32 %3286, %3796
  %3798 = add i32 %3297, %3797
  %3799 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3369, i32 %3369, i32 30) #1
  %3800 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3369, i32 %3369, i32 19) #1
  %3801 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3369, i32 %3369, i32 10) #1
  %3802 = xor i32 %3799, %3800
  %3803 = xor i32 %3802, %3801
  %3804 = or i32 %3345, %3321
  %3805 = and i32 %3804, %3369
  %3806 = and i32 %3345, %3321
  %3807 = or i32 %3805, %3806
  %3808 = add i32 %3803, %3807
  %3809 = add i32 %3797, %3808
  %3810 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3798, i32 %3798, i32 26) #1
  %3811 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3798, i32 %3798, i32 21) #1
  %3812 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3798, i32 %3798, i32 7) #1
  %3813 = xor i32 %3810, %3811
  %3814 = xor i32 %3813, %3812
  %3815 = xor i32 %3358, %3334
  %3816 = and i32 %3815, %3798
  %3817 = xor i32 %3816, %3334
  %3818 = add i32 %3814, %3817
  %3819 = add i32 %3818, 773529912
  %3820 = add i32 %3819, %3395
  %3821 = add i32 %3310, %3820
  %3822 = add i32 %3321, %3821
  %3823 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3809, i32 %3809, i32 30) #1
  %3824 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3809, i32 %3809, i32 19) #1
  %3825 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3809, i32 %3809, i32 10) #1
  %3826 = xor i32 %3823, %3824
  %3827 = xor i32 %3826, %3825
  %3828 = or i32 %3369, %3345
  %3829 = and i32 %3828, %3809
  %3830 = and i32 %3369, %3345
  %3831 = or i32 %3829, %3830
  %3832 = add i32 %3827, %3831
  %3833 = add i32 %3821, %3832
  %3834 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3822, i32 %3822, i32 26) #1
  %3835 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3822, i32 %3822, i32 21) #1
  %3836 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3822, i32 %3822, i32 7) #1
  %3837 = xor i32 %3834, %3835
  %3838 = xor i32 %3837, %3836
  %3839 = xor i32 %3798, %3358
  %3840 = and i32 %3839, %3822
  %3841 = xor i32 %3840, %3358
  %3842 = add i32 %3838, %3841
  %3843 = add i32 %3842, 1294757372
  %3844 = add i32 %3843, %3408
  %3845 = add i32 %3334, %3844
  %3846 = add i32 %3345, %3845
  %3847 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3833, i32 %3833, i32 30) #1
  %3848 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3833, i32 %3833, i32 19) #1
  %3849 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3833, i32 %3833, i32 10) #1
  %3850 = xor i32 %3847, %3848
  %3851 = xor i32 %3850, %3849
  %3852 = or i32 %3809, %3369
  %3853 = and i32 %3852, %3833
  %3854 = and i32 %3809, %3369
  %3855 = or i32 %3853, %3854
  %3856 = add i32 %3851, %3855
  %3857 = add i32 %3845, %3856
  %3858 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3846, i32 %3846, i32 26) #1
  %3859 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3846, i32 %3846, i32 21) #1
  %3860 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3846, i32 %3846, i32 7) #1
  %3861 = xor i32 %3858, %3859
  %3862 = xor i32 %3861, %3860
  %3863 = xor i32 %3822, %3798
  %3864 = and i32 %3863, %3846
  %3865 = xor i32 %3864, %3798
  %3866 = add i32 %3862, %3865
  %3867 = add i32 %3866, 1396182291
  %3868 = add i32 %3867, %3421
  %3869 = add i32 %3358, %3868
  %3870 = add i32 %3369, %3869
  %3871 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3857, i32 %3857, i32 30) #1
  %3872 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3857, i32 %3857, i32 19) #1
  %3873 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3857, i32 %3857, i32 10) #1
  %3874 = xor i32 %3871, %3872
  %3875 = xor i32 %3874, %3873
  %3876 = or i32 %3833, %3809
  %3877 = and i32 %3876, %3857
  %3878 = and i32 %3833, %3809
  %3879 = or i32 %3877, %3878
  %3880 = add i32 %3875, %3879
  %3881 = add i32 %3869, %3880
  %3882 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3870, i32 %3870, i32 26) #1
  %3883 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3870, i32 %3870, i32 21) #1
  %3884 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3870, i32 %3870, i32 7) #1
  %3885 = xor i32 %3882, %3883
  %3886 = xor i32 %3885, %3884
  %3887 = xor i32 %3846, %3822
  %3888 = and i32 %3887, %3870
  %3889 = xor i32 %3888, %3822
  %3890 = add i32 %3886, %3889
  %3891 = add i32 %3890, 1695183700
  %3892 = add i32 %3891, %3434
  %3893 = add i32 %3798, %3892
  %3894 = add i32 %3809, %3893
  %3895 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3881, i32 %3881, i32 30) #1
  %3896 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3881, i32 %3881, i32 19) #1
  %3897 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3881, i32 %3881, i32 10) #1
  %3898 = xor i32 %3895, %3896
  %3899 = xor i32 %3898, %3897
  %3900 = or i32 %3857, %3833
  %3901 = and i32 %3900, %3881
  %3902 = and i32 %3857, %3833
  %3903 = or i32 %3901, %3902
  %3904 = add i32 %3899, %3903
  %3905 = add i32 %3893, %3904
  %3906 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3894, i32 %3894, i32 26) #1
  %3907 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3894, i32 %3894, i32 21) #1
  %3908 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3894, i32 %3894, i32 7) #1
  %3909 = xor i32 %3906, %3907
  %3910 = xor i32 %3909, %3908
  %3911 = xor i32 %3870, %3846
  %3912 = and i32 %3911, %3894
  %3913 = xor i32 %3912, %3846
  %3914 = add i32 %3910, %3913
  %3915 = add i32 %3914, 1986661051
  %3916 = add i32 %3915, %3447
  %3917 = add i32 %3822, %3916
  %3918 = add i32 %3833, %3917
  %3919 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3905, i32 %3905, i32 30) #1
  %3920 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3905, i32 %3905, i32 19) #1
  %3921 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3905, i32 %3905, i32 10) #1
  %3922 = xor i32 %3919, %3920
  %3923 = xor i32 %3922, %3921
  %3924 = or i32 %3881, %3857
  %3925 = and i32 %3924, %3905
  %3926 = and i32 %3881, %3857
  %3927 = or i32 %3925, %3926
  %3928 = add i32 %3923, %3927
  %3929 = add i32 %3917, %3928
  %3930 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3918, i32 %3918, i32 26) #1
  %3931 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3918, i32 %3918, i32 21) #1
  %3932 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3918, i32 %3918, i32 7) #1
  %3933 = xor i32 %3930, %3931
  %3934 = xor i32 %3933, %3932
  %3935 = xor i32 %3894, %3870
  %3936 = and i32 %3935, %3918
  %3937 = xor i32 %3936, %3870
  %3938 = add i32 %3934, %3937
  %3939 = add i32 %3938, -2117940946
  %3940 = add i32 %3939, %3460
  %3941 = add i32 %3846, %3940
  %3942 = add i32 %3857, %3941
  %3943 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3929, i32 %3929, i32 30) #1
  %3944 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3929, i32 %3929, i32 19) #1
  %3945 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3929, i32 %3929, i32 10) #1
  %3946 = xor i32 %3943, %3944
  %3947 = xor i32 %3946, %3945
  %3948 = or i32 %3905, %3881
  %3949 = and i32 %3948, %3929
  %3950 = and i32 %3905, %3881
  %3951 = or i32 %3949, %3950
  %3952 = add i32 %3947, %3951
  %3953 = add i32 %3941, %3952
  %3954 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3942, i32 %3942, i32 26) #1
  %3955 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3942, i32 %3942, i32 21) #1
  %3956 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3942, i32 %3942, i32 7) #1
  %3957 = xor i32 %3954, %3955
  %3958 = xor i32 %3957, %3956
  %3959 = xor i32 %3918, %3894
  %3960 = and i32 %3959, %3942
  %3961 = xor i32 %3960, %3894
  %3962 = add i32 %3958, %3961
  %3963 = add i32 %3962, -1838011259
  %3964 = add i32 %3963, %3473
  %3965 = add i32 %3870, %3964
  %3966 = add i32 %3881, %3965
  %3967 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3953, i32 %3953, i32 30) #1
  %3968 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3953, i32 %3953, i32 19) #1
  %3969 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3953, i32 %3953, i32 10) #1
  %3970 = xor i32 %3967, %3968
  %3971 = xor i32 %3970, %3969
  %3972 = or i32 %3929, %3905
  %3973 = and i32 %3972, %3953
  %3974 = and i32 %3929, %3905
  %3975 = or i32 %3973, %3974
  %3976 = add i32 %3971, %3975
  %3977 = add i32 %3965, %3976
  %3978 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3966, i32 %3966, i32 26) #1
  %3979 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3966, i32 %3966, i32 21) #1
  %3980 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3966, i32 %3966, i32 7) #1
  %3981 = xor i32 %3978, %3979
  %3982 = xor i32 %3981, %3980
  %3983 = xor i32 %3942, %3918
  %3984 = and i32 %3983, %3966
  %3985 = xor i32 %3984, %3918
  %3986 = add i32 %3982, %3985
  %3987 = add i32 %3986, -1564481375
  %3988 = add i32 %3987, %3486
  %3989 = add i32 %3894, %3988
  %3990 = add i32 %3905, %3989
  %3991 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3977, i32 %3977, i32 30) #1
  %3992 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3977, i32 %3977, i32 19) #1
  %3993 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3977, i32 %3977, i32 10) #1
  %3994 = xor i32 %3991, %3992
  %3995 = xor i32 %3994, %3993
  %3996 = or i32 %3953, %3929
  %3997 = and i32 %3996, %3977
  %3998 = and i32 %3953, %3929
  %3999 = or i32 %3997, %3998
  %4000 = add i32 %3995, %3999
  %4001 = add i32 %3989, %4000
  %4002 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3990, i32 %3990, i32 26) #1
  %4003 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3990, i32 %3990, i32 21) #1
  %4004 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %3990, i32 %3990, i32 7) #1
  %4005 = xor i32 %4002, %4003
  %4006 = xor i32 %4005, %4004
  %4007 = xor i32 %3966, %3942
  %4008 = and i32 %4007, %3990
  %4009 = xor i32 %4008, %3942
  %4010 = add i32 %4006, %4009
  %4011 = add i32 %4010, -1474664885
  %4012 = add i32 %4011, %3499
  %4013 = add i32 %3918, %4012
  %4014 = add i32 %3929, %4013
  %4015 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4001, i32 %4001, i32 30) #1
  %4016 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4001, i32 %4001, i32 19) #1
  %4017 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4001, i32 %4001, i32 10) #1
  %4018 = xor i32 %4015, %4016
  %4019 = xor i32 %4018, %4017
  %4020 = or i32 %3977, %3953
  %4021 = and i32 %4020, %4001
  %4022 = and i32 %3977, %3953
  %4023 = or i32 %4021, %4022
  %4024 = add i32 %4019, %4023
  %4025 = add i32 %4013, %4024
  %4026 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4014, i32 %4014, i32 26) #1
  %4027 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4014, i32 %4014, i32 21) #1
  %4028 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4014, i32 %4014, i32 7) #1
  %4029 = xor i32 %4026, %4027
  %4030 = xor i32 %4029, %4028
  %4031 = xor i32 %3990, %3966
  %4032 = and i32 %4031, %4014
  %4033 = xor i32 %4032, %3966
  %4034 = add i32 %4030, %4033
  %4035 = add i32 %4034, -1035236496
  %4036 = add i32 %4035, %3512
  %4037 = add i32 %3942, %4036
  %4038 = add i32 %3953, %4037
  %4039 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4025, i32 %4025, i32 30) #1
  %4040 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4025, i32 %4025, i32 19) #1
  %4041 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4025, i32 %4025, i32 10) #1
  %4042 = xor i32 %4039, %4040
  %4043 = xor i32 %4042, %4041
  %4044 = or i32 %4001, %3977
  %4045 = and i32 %4044, %4025
  %4046 = and i32 %4001, %3977
  %4047 = or i32 %4045, %4046
  %4048 = add i32 %4043, %4047
  %4049 = add i32 %4037, %4048
  %4050 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4038, i32 %4038, i32 26) #1
  %4051 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4038, i32 %4038, i32 21) #1
  %4052 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4038, i32 %4038, i32 7) #1
  %4053 = xor i32 %4050, %4051
  %4054 = xor i32 %4053, %4052
  %4055 = xor i32 %4014, %3990
  %4056 = and i32 %4055, %4038
  %4057 = xor i32 %4056, %3990
  %4058 = add i32 %4054, %4057
  %4059 = add i32 %4058, -949202525
  %4060 = add i32 %4059, %3525
  %4061 = add i32 %3966, %4060
  %4062 = add i32 %3977, %4061
  %4063 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4049, i32 %4049, i32 30) #1
  %4064 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4049, i32 %4049, i32 19) #1
  %4065 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4049, i32 %4049, i32 10) #1
  %4066 = xor i32 %4063, %4064
  %4067 = xor i32 %4066, %4065
  %4068 = or i32 %4025, %4001
  %4069 = and i32 %4068, %4049
  %4070 = and i32 %4025, %4001
  %4071 = or i32 %4069, %4070
  %4072 = add i32 %4067, %4071
  %4073 = add i32 %4061, %4072
  %4074 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4062, i32 %4062, i32 26) #1
  %4075 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4062, i32 %4062, i32 21) #1
  %4076 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4062, i32 %4062, i32 7) #1
  %4077 = xor i32 %4074, %4075
  %4078 = xor i32 %4077, %4076
  %4079 = xor i32 %4038, %4014
  %4080 = and i32 %4079, %4062
  %4081 = xor i32 %4080, %4014
  %4082 = add i32 %4078, %4081
  %4083 = add i32 %4082, -778901479
  %4084 = add i32 %4083, %3538
  %4085 = add i32 %3990, %4084
  %4086 = add i32 %4001, %4085
  %4087 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4073, i32 %4073, i32 30) #1
  %4088 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4073, i32 %4073, i32 19) #1
  %4089 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4073, i32 %4073, i32 10) #1
  %4090 = xor i32 %4087, %4088
  %4091 = xor i32 %4090, %4089
  %4092 = or i32 %4049, %4025
  %4093 = and i32 %4092, %4073
  %4094 = and i32 %4049, %4025
  %4095 = or i32 %4093, %4094
  %4096 = add i32 %4091, %4095
  %4097 = add i32 %4085, %4096
  %4098 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4086, i32 %4086, i32 26) #1
  %4099 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4086, i32 %4086, i32 21) #1
  %4100 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4086, i32 %4086, i32 7) #1
  %4101 = xor i32 %4098, %4099
  %4102 = xor i32 %4101, %4100
  %4103 = xor i32 %4062, %4038
  %4104 = and i32 %4103, %4086
  %4105 = xor i32 %4104, %4038
  %4106 = add i32 %4102, %4105
  %4107 = add i32 %4106, -694614492
  %4108 = add i32 %4107, %3551
  %4109 = add i32 %4014, %4108
  %4110 = add i32 %4025, %4109
  %4111 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4097, i32 %4097, i32 30) #1
  %4112 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4097, i32 %4097, i32 19) #1
  %4113 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4097, i32 %4097, i32 10) #1
  %4114 = xor i32 %4111, %4112
  %4115 = xor i32 %4114, %4113
  %4116 = or i32 %4073, %4049
  %4117 = and i32 %4116, %4097
  %4118 = and i32 %4073, %4049
  %4119 = or i32 %4117, %4118
  %4120 = add i32 %4115, %4119
  %4121 = add i32 %4109, %4120
  %4122 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4110, i32 %4110, i32 26) #1
  %4123 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4110, i32 %4110, i32 21) #1
  %4124 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4110, i32 %4110, i32 7) #1
  %4125 = xor i32 %4122, %4123
  %4126 = xor i32 %4125, %4124
  %4127 = xor i32 %4086, %4062
  %4128 = and i32 %4127, %4110
  %4129 = xor i32 %4128, %4062
  %4130 = add i32 %4126, %4129
  %4131 = add i32 %4130, -200395387
  %4132 = add i32 %4131, %3564
  %4133 = add i32 %4038, %4132
  %4134 = add i32 %4049, %4133
  %4135 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4121, i32 %4121, i32 30) #1
  %4136 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4121, i32 %4121, i32 19) #1
  %4137 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4121, i32 %4121, i32 10) #1
  %4138 = xor i32 %4135, %4136
  %4139 = xor i32 %4138, %4137
  %4140 = or i32 %4097, %4073
  %4141 = and i32 %4140, %4121
  %4142 = and i32 %4097, %4073
  %4143 = or i32 %4141, %4142
  %4144 = add i32 %4139, %4143
  %4145 = add i32 %4133, %4144
  %4146 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4134, i32 %4134, i32 26) #1
  %4147 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4134, i32 %4134, i32 21) #1
  %4148 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4134, i32 %4134, i32 7) #1
  %4149 = xor i32 %4146, %4147
  %4150 = xor i32 %4149, %4148
  %4151 = xor i32 %4110, %4086
  %4152 = and i32 %4151, %4134
  %4153 = xor i32 %4152, %4086
  %4154 = add i32 %4150, %4153
  %4155 = add i32 %4154, 275423344
  %4156 = add i32 %4155, %3577
  %4157 = add i32 %4062, %4156
  %4158 = add i32 %4073, %4157
  %4159 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4145, i32 %4145, i32 30) #1
  %4160 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4145, i32 %4145, i32 19) #1
  %4161 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4145, i32 %4145, i32 10) #1
  %4162 = xor i32 %4159, %4160
  %4163 = xor i32 %4162, %4161
  %4164 = or i32 %4121, %4097
  %4165 = and i32 %4164, %4145
  %4166 = and i32 %4121, %4097
  %4167 = or i32 %4165, %4166
  %4168 = add i32 %4163, %4167
  %4169 = add i32 %4157, %4168
  %4170 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4158, i32 %4158, i32 26) #1
  %4171 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4158, i32 %4158, i32 21) #1
  %4172 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4158, i32 %4158, i32 7) #1
  %4173 = xor i32 %4170, %4171
  %4174 = xor i32 %4173, %4172
  %4175 = xor i32 %4134, %4110
  %4176 = and i32 %4175, %4158
  %4177 = xor i32 %4176, %4110
  %4178 = add i32 %4174, %4177
  %4179 = add i32 %4178, 430227734
  %4180 = add i32 %4179, %3590
  %4181 = add i32 %4086, %4180
  %4182 = add i32 %4097, %4181
  %4183 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4169, i32 %4169, i32 30) #1
  %4184 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4169, i32 %4169, i32 19) #1
  %4185 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4169, i32 %4169, i32 10) #1
  %4186 = xor i32 %4183, %4184
  %4187 = xor i32 %4186, %4185
  %4188 = or i32 %4145, %4121
  %4189 = and i32 %4188, %4169
  %4190 = and i32 %4145, %4121
  %4191 = or i32 %4189, %4190
  %4192 = add i32 %4187, %4191
  %4193 = add i32 %4181, %4192
  %4194 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4182, i32 %4182, i32 26) #1
  %4195 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4182, i32 %4182, i32 21) #1
  %4196 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4182, i32 %4182, i32 7) #1
  %4197 = xor i32 %4194, %4195
  %4198 = xor i32 %4197, %4196
  %4199 = xor i32 %4158, %4134
  %4200 = and i32 %4199, %4182
  %4201 = xor i32 %4200, %4134
  %4202 = add i32 %4198, %4201
  %4203 = add i32 %4202, 506948616
  %4204 = add i32 %4203, %3603
  %4205 = add i32 %4110, %4204
  %4206 = add i32 %4121, %4205
  %4207 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4193, i32 %4193, i32 30) #1
  %4208 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4193, i32 %4193, i32 19) #1
  %4209 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4193, i32 %4193, i32 10) #1
  %4210 = xor i32 %4207, %4208
  %4211 = xor i32 %4210, %4209
  %4212 = or i32 %4169, %4145
  %4213 = and i32 %4212, %4193
  %4214 = and i32 %4169, %4145
  %4215 = or i32 %4213, %4214
  %4216 = add i32 %4211, %4215
  %4217 = add i32 %4205, %4216
  %4218 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4206, i32 %4206, i32 26) #1
  %4219 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4206, i32 %4206, i32 21) #1
  %4220 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4206, i32 %4206, i32 7) #1
  %4221 = xor i32 %4218, %4219
  %4222 = xor i32 %4221, %4220
  %4223 = xor i32 %4182, %4158
  %4224 = and i32 %4223, %4206
  %4225 = xor i32 %4224, %4158
  %4226 = add i32 %4222, %4225
  %4227 = add i32 %4226, 659060556
  %4228 = add i32 %4227, %3616
  %4229 = add i32 %4134, %4228
  %4230 = add i32 %4145, %4229
  %4231 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4217, i32 %4217, i32 30) #1
  %4232 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4217, i32 %4217, i32 19) #1
  %4233 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4217, i32 %4217, i32 10) #1
  %4234 = xor i32 %4231, %4232
  %4235 = xor i32 %4234, %4233
  %4236 = or i32 %4193, %4169
  %4237 = and i32 %4236, %4217
  %4238 = and i32 %4193, %4169
  %4239 = or i32 %4237, %4238
  %4240 = add i32 %4235, %4239
  %4241 = add i32 %4229, %4240
  %4242 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4230, i32 %4230, i32 26) #1
  %4243 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4230, i32 %4230, i32 21) #1
  %4244 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4230, i32 %4230, i32 7) #1
  %4245 = xor i32 %4242, %4243
  %4246 = xor i32 %4245, %4244
  %4247 = xor i32 %4206, %4182
  %4248 = and i32 %4247, %4230
  %4249 = xor i32 %4248, %4182
  %4250 = add i32 %4246, %4249
  %4251 = add i32 %4250, 883997877
  %4252 = add i32 %4251, %3629
  %4253 = add i32 %4158, %4252
  %4254 = add i32 %4169, %4253
  %4255 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4241, i32 %4241, i32 30) #1
  %4256 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4241, i32 %4241, i32 19) #1
  %4257 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4241, i32 %4241, i32 10) #1
  %4258 = xor i32 %4255, %4256
  %4259 = xor i32 %4258, %4257
  %4260 = or i32 %4217, %4193
  %4261 = and i32 %4260, %4241
  %4262 = and i32 %4217, %4193
  %4263 = or i32 %4261, %4262
  %4264 = add i32 %4259, %4263
  %4265 = add i32 %4253, %4264
  %4266 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4254, i32 %4254, i32 26) #1
  %4267 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4254, i32 %4254, i32 21) #1
  %4268 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4254, i32 %4254, i32 7) #1
  %4269 = xor i32 %4266, %4267
  %4270 = xor i32 %4269, %4268
  %4271 = xor i32 %4230, %4206
  %4272 = and i32 %4271, %4254
  %4273 = xor i32 %4272, %4206
  %4274 = add i32 %4270, %4273
  %4275 = add i32 %4274, 958139571
  %4276 = add i32 %4275, %3642
  %4277 = add i32 %4182, %4276
  %4278 = add i32 %4193, %4277
  %4279 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4265, i32 %4265, i32 30) #1
  %4280 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4265, i32 %4265, i32 19) #1
  %4281 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4265, i32 %4265, i32 10) #1
  %4282 = xor i32 %4279, %4280
  %4283 = xor i32 %4282, %4281
  %4284 = or i32 %4241, %4217
  %4285 = and i32 %4284, %4265
  %4286 = and i32 %4241, %4217
  %4287 = or i32 %4285, %4286
  %4288 = add i32 %4283, %4287
  %4289 = add i32 %4277, %4288
  %4290 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4278, i32 %4278, i32 26) #1
  %4291 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4278, i32 %4278, i32 21) #1
  %4292 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4278, i32 %4278, i32 7) #1
  %4293 = xor i32 %4290, %4291
  %4294 = xor i32 %4293, %4292
  %4295 = xor i32 %4254, %4230
  %4296 = and i32 %4295, %4278
  %4297 = xor i32 %4296, %4230
  %4298 = add i32 %4294, %4297
  %4299 = add i32 %4298, 1322822218
  %4300 = add i32 %4299, %3655
  %4301 = add i32 %4206, %4300
  %4302 = add i32 %4217, %4301
  %4303 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4289, i32 %4289, i32 30) #1
  %4304 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4289, i32 %4289, i32 19) #1
  %4305 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4289, i32 %4289, i32 10) #1
  %4306 = xor i32 %4303, %4304
  %4307 = xor i32 %4306, %4305
  %4308 = or i32 %4265, %4241
  %4309 = and i32 %4308, %4289
  %4310 = and i32 %4265, %4241
  %4311 = or i32 %4309, %4310
  %4312 = add i32 %4307, %4311
  %4313 = add i32 %4301, %4312
  %4314 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4302, i32 %4302, i32 26) #1
  %4315 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4302, i32 %4302, i32 21) #1
  %4316 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4302, i32 %4302, i32 7) #1
  %4317 = xor i32 %4314, %4315
  %4318 = xor i32 %4317, %4316
  %4319 = xor i32 %4278, %4254
  %4320 = and i32 %4319, %4302
  %4321 = xor i32 %4320, %4254
  %4322 = add i32 %4318, %4321
  %4323 = add i32 %4322, 1537002063
  %4324 = add i32 %4323, %3668
  %4325 = add i32 %4230, %4324
  %4326 = add i32 %4241, %4325
  %4327 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4313, i32 %4313, i32 30) #1
  %4328 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4313, i32 %4313, i32 19) #1
  %4329 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4313, i32 %4313, i32 10) #1
  %4330 = xor i32 %4327, %4328
  %4331 = xor i32 %4330, %4329
  %4332 = or i32 %4289, %4265
  %4333 = and i32 %4332, %4313
  %4334 = and i32 %4289, %4265
  %4335 = or i32 %4333, %4334
  %4336 = add i32 %4331, %4335
  %4337 = add i32 %4325, %4336
  %4338 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4326, i32 %4326, i32 26) #1
  %4339 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4326, i32 %4326, i32 21) #1
  %4340 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4326, i32 %4326, i32 7) #1
  %4341 = xor i32 %4338, %4339
  %4342 = xor i32 %4341, %4340
  %4343 = xor i32 %4302, %4278
  %4344 = and i32 %4343, %4326
  %4345 = xor i32 %4344, %4278
  %4346 = add i32 %4342, %4345
  %4347 = add i32 %4346, 1747873779
  %4348 = add i32 %4347, %3681
  %4349 = add i32 %4254, %4348
  %4350 = add i32 %4265, %4349
  %4351 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4337, i32 %4337, i32 30) #1
  %4352 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4337, i32 %4337, i32 19) #1
  %4353 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4337, i32 %4337, i32 10) #1
  %4354 = xor i32 %4351, %4352
  %4355 = xor i32 %4354, %4353
  %4356 = or i32 %4313, %4289
  %4357 = and i32 %4356, %4337
  %4358 = and i32 %4313, %4289
  %4359 = or i32 %4357, %4358
  %4360 = add i32 %4355, %4359
  %4361 = add i32 %4349, %4360
  %4362 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4350, i32 %4350, i32 26) #1
  %4363 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4350, i32 %4350, i32 21) #1
  %4364 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4350, i32 %4350, i32 7) #1
  %4365 = xor i32 %4362, %4363
  %4366 = xor i32 %4365, %4364
  %4367 = xor i32 %4326, %4302
  %4368 = and i32 %4367, %4350
  %4369 = xor i32 %4368, %4302
  %4370 = add i32 %4366, %4369
  %4371 = add i32 %4370, 1955562222
  %4372 = add i32 %4371, %3694
  %4373 = add i32 %4278, %4372
  %4374 = add i32 %4289, %4373
  %4375 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4361, i32 %4361, i32 30) #1
  %4376 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4361, i32 %4361, i32 19) #1
  %4377 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4361, i32 %4361, i32 10) #1
  %4378 = xor i32 %4375, %4376
  %4379 = xor i32 %4378, %4377
  %4380 = or i32 %4337, %4313
  %4381 = and i32 %4380, %4361
  %4382 = and i32 %4337, %4313
  %4383 = or i32 %4381, %4382
  %4384 = add i32 %4379, %4383
  %4385 = add i32 %4373, %4384
  %4386 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4374, i32 %4374, i32 26) #1
  %4387 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4374, i32 %4374, i32 21) #1
  %4388 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4374, i32 %4374, i32 7) #1
  %4389 = xor i32 %4386, %4387
  %4390 = xor i32 %4389, %4388
  %4391 = xor i32 %4350, %4326
  %4392 = and i32 %4391, %4374
  %4393 = xor i32 %4392, %4326
  %4394 = add i32 %4390, %4393
  %4395 = add i32 %4394, 2024104815
  %4396 = add i32 %4395, %3707
  %4397 = add i32 %4302, %4396
  %4398 = add i32 %4313, %4397
  %4399 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4385, i32 %4385, i32 30) #1
  %4400 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4385, i32 %4385, i32 19) #1
  %4401 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4385, i32 %4385, i32 10) #1
  %4402 = xor i32 %4399, %4400
  %4403 = xor i32 %4402, %4401
  %4404 = or i32 %4361, %4337
  %4405 = and i32 %4404, %4385
  %4406 = and i32 %4361, %4337
  %4407 = or i32 %4405, %4406
  %4408 = add i32 %4403, %4407
  %4409 = add i32 %4397, %4408
  %4410 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4398, i32 %4398, i32 26) #1
  %4411 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4398, i32 %4398, i32 21) #1
  %4412 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4398, i32 %4398, i32 7) #1
  %4413 = xor i32 %4410, %4411
  %4414 = xor i32 %4413, %4412
  %4415 = xor i32 %4374, %4350
  %4416 = and i32 %4415, %4398
  %4417 = xor i32 %4416, %4350
  %4418 = add i32 %4414, %4417
  %4419 = add i32 %4418, -2067236844
  %4420 = add i32 %4419, %3720
  %4421 = add i32 %4326, %4420
  %4422 = add i32 %4337, %4421
  %4423 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4409, i32 %4409, i32 30) #1
  %4424 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4409, i32 %4409, i32 19) #1
  %4425 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4409, i32 %4409, i32 10) #1
  %4426 = xor i32 %4423, %4424
  %4427 = xor i32 %4426, %4425
  %4428 = or i32 %4385, %4361
  %4429 = and i32 %4428, %4409
  %4430 = and i32 %4385, %4361
  %4431 = or i32 %4429, %4430
  %4432 = add i32 %4427, %4431
  %4433 = add i32 %4421, %4432
  %4434 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4422, i32 %4422, i32 26) #1
  %4435 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4422, i32 %4422, i32 21) #1
  %4436 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4422, i32 %4422, i32 7) #1
  %4437 = xor i32 %4434, %4435
  %4438 = xor i32 %4437, %4436
  %4439 = xor i32 %4398, %4374
  %4440 = and i32 %4439, %4422
  %4441 = xor i32 %4440, %4374
  %4442 = add i32 %4438, %4441
  %4443 = add i32 %4442, -1933114872
  %4444 = add i32 %4443, %3733
  %4445 = add i32 %4350, %4444
  %4446 = add i32 %4361, %4445
  %4447 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4433, i32 %4433, i32 30) #1
  %4448 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4433, i32 %4433, i32 19) #1
  %4449 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4433, i32 %4433, i32 10) #1
  %4450 = xor i32 %4447, %4448
  %4451 = xor i32 %4450, %4449
  %4452 = or i32 %4409, %4385
  %4453 = and i32 %4452, %4433
  %4454 = and i32 %4409, %4385
  %4455 = or i32 %4453, %4454
  %4456 = add i32 %4451, %4455
  %4457 = add i32 %4445, %4456
  %4458 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4446, i32 %4446, i32 26) #1
  %4459 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4446, i32 %4446, i32 21) #1
  %4460 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4446, i32 %4446, i32 7) #1
  %4461 = xor i32 %4458, %4459
  %4462 = xor i32 %4461, %4460
  %4463 = xor i32 %4422, %4398
  %4464 = and i32 %4463, %4446
  %4465 = xor i32 %4464, %4398
  %4466 = add i32 %4462, %4465
  %4467 = add i32 %4466, -1866530822
  %4468 = add i32 %4467, %3746
  %4469 = add i32 %4374, %4468
  %4470 = add i32 %4385, %4469
  %4471 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4457, i32 %4457, i32 30) #1
  %4472 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4457, i32 %4457, i32 19) #1
  %4473 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4457, i32 %4457, i32 10) #1
  %4474 = xor i32 %4471, %4472
  %4475 = xor i32 %4474, %4473
  %4476 = or i32 %4433, %4409
  %4477 = and i32 %4476, %4457
  %4478 = and i32 %4433, %4409
  %4479 = or i32 %4477, %4478
  %4480 = add i32 %4475, %4479
  %4481 = add i32 %4469, %4480
  %4482 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4470, i32 %4470, i32 26) #1
  %4483 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4470, i32 %4470, i32 21) #1
  %4484 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4470, i32 %4470, i32 7) #1
  %4485 = xor i32 %4482, %4483
  %4486 = xor i32 %4485, %4484
  %4487 = xor i32 %4446, %4422
  %4488 = and i32 %4487, %4470
  %4489 = xor i32 %4488, %4422
  %4490 = add i32 %4486, %4489
  %4491 = add i32 %4490, -1538233109
  %4492 = add i32 %4491, %3759
  %4493 = add i32 %4398, %4492
  %4494 = add i32 %4409, %4493
  %4495 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4481, i32 %4481, i32 30) #1
  %4496 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4481, i32 %4481, i32 19) #1
  %4497 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4481, i32 %4481, i32 10) #1
  %4498 = xor i32 %4495, %4496
  %4499 = xor i32 %4498, %4497
  %4500 = or i32 %4457, %4433
  %4501 = and i32 %4500, %4481
  %4502 = and i32 %4457, %4433
  %4503 = or i32 %4501, %4502
  %4504 = add i32 %4499, %4503
  %4505 = add i32 %4493, %4504
  %4506 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4494, i32 %4494, i32 26) #1
  %4507 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4494, i32 %4494, i32 21) #1
  %4508 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4494, i32 %4494, i32 7) #1
  %4509 = xor i32 %4506, %4507
  %4510 = xor i32 %4509, %4508
  %4511 = xor i32 %4470, %4446
  %4512 = and i32 %4511, %4494
  %4513 = xor i32 %4512, %4446
  %4514 = add i32 %4510, %4513
  %4515 = add i32 %4514, -1090935817
  %4516 = add i32 %4515, %3772
  %4517 = add i32 %4422, %4516
  %4518 = add i32 %4433, %4517
  %4519 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4505, i32 %4505, i32 30) #1
  %4520 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4505, i32 %4505, i32 19) #1
  %4521 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4505, i32 %4505, i32 10) #1
  %4522 = xor i32 %4519, %4520
  %4523 = xor i32 %4522, %4521
  %4524 = or i32 %4481, %4457
  %4525 = and i32 %4524, %4505
  %4526 = and i32 %4481, %4457
  %4527 = or i32 %4525, %4526
  %4528 = add i32 %4523, %4527
  %4529 = add i32 %4517, %4528
  %4530 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4518, i32 %4518, i32 26) #1
  %4531 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4518, i32 %4518, i32 21) #1
  %4532 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4518, i32 %4518, i32 7) #1
  %4533 = xor i32 %4530, %4531
  %4534 = xor i32 %4533, %4532
  %4535 = xor i32 %4494, %4470
  %4536 = and i32 %4535, %4518
  %4537 = xor i32 %4536, %4470
  %4538 = add i32 %4534, %4537
  %4539 = add i32 %4538, -965641998
  %4540 = add i32 %4539, %3785
  %4541 = add i32 %4446, %4540
  %4542 = add i32 %4457, %4541
  %4543 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4529, i32 %4529, i32 30) #1
  %4544 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4529, i32 %4529, i32 19) #1
  %4545 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4529, i32 %4529, i32 10) #1
  %4546 = xor i32 %4543, %4544
  %4547 = xor i32 %4546, %4545
  %4548 = or i32 %4505, %4481
  %4549 = and i32 %4548, %4529
  %4550 = and i32 %4505, %4481
  %4551 = or i32 %4549, %4550
  %4552 = add i32 %4547, %4551
  %4553 = add i32 %4541, %4552
  %4554 = add i32 %2321, %4553
  %4555 = add i32 %2322, %4529
  %4556 = add i32 %2323, %4505
  %4557 = add i32 %2324, %4481
  %4558 = add i32 %2325, %4542
  %4559 = add i32 %2326, %4518
  %4560 = add i32 %2327, %4494
  %4561 = add i32 %2328, %4470
  br label %4562

4562:                                             ; preds = %2329, %119
  %4563 = phi i32 [ %4554, %2329 ], [ %2321, %119 ]
  %4564 = phi i32 [ %4555, %2329 ], [ %2322, %119 ]
  %4565 = phi i32 [ %4556, %2329 ], [ %2323, %119 ]
  %4566 = phi i32 [ %4557, %2329 ], [ %2324, %119 ]
  %4567 = phi i32 [ %4558, %2329 ], [ %2325, %119 ]
  %4568 = phi i32 [ %4559, %2329 ], [ %2326, %119 ]
  %4569 = phi i32 [ %4560, %2329 ], [ %2327, %119 ]
  %4570 = phi i32 [ %4561, %2329 ], [ %2328, %119 ]
  %4571 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4564, i32 %4564, i32 25) #1
  %4572 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4564, i32 %4564, i32 14) #1
  %4573 = lshr i32 %4564, 3
  %4574 = xor i32 %4571, %4572
  %4575 = xor i32 %4574, %4573
  %4576 = add i32 %4563, %4575
  %4577 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4565, i32 %4565, i32 25) #1
  %4578 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4565, i32 %4565, i32 14) #1
  %4579 = lshr i32 %4565, 3
  %4580 = xor i32 %4577, %4578
  %4581 = xor i32 %4580, %4579
  %4582 = add i32 %4564, %4581
  %4583 = add i32 %4582, 10485760
  %4584 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4566, i32 %4566, i32 25) #1
  %4585 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4566, i32 %4566, i32 14) #1
  %4586 = lshr i32 %4566, 3
  %4587 = xor i32 %4584, %4585
  %4588 = xor i32 %4587, %4586
  %4589 = add i32 %4565, %4588
  %4590 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4576, i32 %4576, i32 15) #1
  %4591 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4576, i32 %4576, i32 13) #1
  %4592 = lshr i32 %4576, 10
  %4593 = xor i32 %4590, %4591
  %4594 = xor i32 %4593, %4592
  %4595 = add i32 %4589, %4594
  %4596 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4567, i32 %4567, i32 25) #1
  %4597 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4567, i32 %4567, i32 14) #1
  %4598 = lshr i32 %4567, 3
  %4599 = xor i32 %4596, %4597
  %4600 = xor i32 %4599, %4598
  %4601 = add i32 %4566, %4600
  %4602 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4582, i32 %4583, i32 15) #1
  %4603 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4582, i32 %4583, i32 13) #1
  %4604 = lshr i32 %4583, 10
  %4605 = xor i32 %4602, %4603
  %4606 = xor i32 %4605, %4604
  %4607 = add i32 %4601, %4606
  %4608 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4568, i32 %4568, i32 25) #1
  %4609 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4568, i32 %4568, i32 14) #1
  %4610 = lshr i32 %4568, 3
  %4611 = xor i32 %4608, %4609
  %4612 = xor i32 %4611, %4610
  %4613 = add i32 %4567, %4612
  %4614 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4595, i32 %4595, i32 15) #1
  %4615 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4595, i32 %4595, i32 13) #1
  %4616 = lshr i32 %4595, 10
  %4617 = xor i32 %4614, %4615
  %4618 = xor i32 %4617, %4616
  %4619 = add i32 %4613, %4618
  %4620 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4569, i32 %4569, i32 25) #1
  %4621 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4569, i32 %4569, i32 14) #1
  %4622 = lshr i32 %4569, 3
  %4623 = xor i32 %4620, %4621
  %4624 = xor i32 %4623, %4622
  %4625 = add i32 %4568, %4624
  %4626 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4607, i32 %4607, i32 15) #1
  %4627 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4607, i32 %4607, i32 13) #1
  %4628 = lshr i32 %4607, 10
  %4629 = xor i32 %4626, %4627
  %4630 = xor i32 %4629, %4628
  %4631 = add i32 %4625, %4630
  %4632 = add i32 %4569, 256
  %4633 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4570, i32 %4570, i32 25) #1
  %4634 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4570, i32 %4570, i32 14) #1
  %4635 = lshr i32 %4570, 3
  %4636 = xor i32 %4633, %4634
  %4637 = xor i32 %4636, %4635
  %4638 = add i32 %4632, %4637
  %4639 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4619, i32 %4619, i32 15) #1
  %4640 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4619, i32 %4619, i32 13) #1
  %4641 = lshr i32 %4619, 10
  %4642 = xor i32 %4639, %4640
  %4643 = xor i32 %4642, %4641
  %4644 = add i32 %4638, %4643
  %4645 = add i32 %4570, %4576
  %4646 = add i32 %4645, 285220864
  %4647 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4631, i32 %4631, i32 15) #1
  %4648 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4631, i32 %4631, i32 13) #1
  %4649 = lshr i32 %4631, 10
  %4650 = xor i32 %4647, %4648
  %4651 = xor i32 %4650, %4649
  %4652 = add i32 %4646, %4651
  %4653 = add i32 %4582, -2136997888
  %4654 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4644, i32 %4644, i32 15) #1
  %4655 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4644, i32 %4644, i32 13) #1
  %4656 = lshr i32 %4644, 10
  %4657 = xor i32 %4654, %4655
  %4658 = xor i32 %4657, %4656
  %4659 = add i32 %4653, %4658
  %4660 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4652, i32 %4652, i32 15) #1
  %4661 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4652, i32 %4652, i32 13) #1
  %4662 = lshr i32 %4652, 10
  %4663 = xor i32 %4660, %4661
  %4664 = xor i32 %4663, %4662
  %4665 = add i32 %4595, %4664
  %4666 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4659, i32 %4659, i32 15) #1
  %4667 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4659, i32 %4659, i32 13) #1
  %4668 = lshr i32 %4659, 10
  %4669 = xor i32 %4666, %4667
  %4670 = xor i32 %4669, %4668
  %4671 = add i32 %4607, %4670
  %4672 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4665, i32 %4665, i32 15) #1
  %4673 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4665, i32 %4665, i32 13) #1
  %4674 = lshr i32 %4665, 10
  %4675 = xor i32 %4672, %4673
  %4676 = xor i32 %4675, %4674
  %4677 = add i32 %4619, %4676
  %4678 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4671, i32 %4671, i32 15) #1
  %4679 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4671, i32 %4671, i32 13) #1
  %4680 = lshr i32 %4671, 10
  %4681 = xor i32 %4678, %4679
  %4682 = xor i32 %4681, %4680
  %4683 = add i32 %4631, %4682
  %4684 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4677, i32 %4677, i32 15) #1
  %4685 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4677, i32 %4677, i32 13) #1
  %4686 = lshr i32 %4677, 10
  %4687 = xor i32 %4684, %4685
  %4688 = xor i32 %4687, %4686
  %4689 = add i32 %4644, %4688
  %4690 = add i32 %4652, 4194338
  %4691 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4683, i32 %4683, i32 15) #1
  %4692 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4683, i32 %4683, i32 13) #1
  %4693 = lshr i32 %4683, 10
  %4694 = xor i32 %4691, %4692
  %4695 = xor i32 %4694, %4693
  %4696 = add i32 %4690, %4695
  %4697 = add i32 %4659, 256
  %4698 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4576, i32 %4576, i32 25) #1
  %4699 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4576, i32 %4576, i32 14) #1
  %4700 = lshr i32 %4576, 3
  %4701 = xor i32 %4698, %4699
  %4702 = xor i32 %4701, %4700
  %4703 = add i32 %4697, %4702
  %4704 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4689, i32 %4689, i32 15) #1
  %4705 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4689, i32 %4689, i32 13) #1
  %4706 = lshr i32 %4689, 10
  %4707 = xor i32 %4704, %4705
  %4708 = xor i32 %4707, %4706
  %4709 = add i32 %4703, %4708
  %4710 = add i32 %4563, -1731730782
  %4711 = add i32 %4563, -66549683
  %4712 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4710, i32 %4710, i32 26) #1
  %4713 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4710, i32 %4710, i32 21) #1
  %4714 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4710, i32 %4710, i32 7) #1
  %4715 = xor i32 %4712, %4713
  %4716 = xor i32 %4715, %4714
  %4717 = and i32 %4710, -905233677
  %4718 = xor i32 %4717, -1694144372
  %4719 = add i32 %4716, %4718
  %4720 = add i32 %4719, 1899447441
  %4721 = add i32 %4720, %4564
  %4722 = add i32 %4721, 528734635
  %4723 = add i32 %4721, 1542638877
  %4724 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4711, i32 %4711, i32 30) #1
  %4725 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4711, i32 %4711, i32 19) #1
  %4726 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4711, i32 %4711, i32 10) #1
  %4727 = xor i32 %4724, %4725
  %4728 = xor i32 %4727, %4726
  %4729 = and i32 %4711, -781301534
  %4730 = or i32 %4729, 704751109
  %4731 = add i32 %4728, %4730
  %4732 = add i32 %4722, %4731
  %4733 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4723, i32 %4723, i32 26) #1
  %4734 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4723, i32 %4723, i32 21) #1
  %4735 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4723, i32 %4723, i32 7) #1
  %4736 = xor i32 %4733, %4734
  %4737 = xor i32 %4736, %4735
  %4738 = xor i32 %4710, 1359893119
  %4739 = and i32 %4738, %4723
  %4740 = xor i32 %4739, 1359893119
  %4741 = add i32 %4737, %4740
  %4742 = add i32 %4741, -1245643825
  %4743 = add i32 %4742, %4565
  %4744 = add i32 %4743, -1694144372
  %4745 = add i32 %4743, 1449989905
  %4746 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4732, i32 %4732, i32 30) #1
  %4747 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4732, i32 %4732, i32 19) #1
  %4748 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4732, i32 %4732, i32 10) #1
  %4749 = xor i32 %4746, %4747
  %4750 = xor i32 %4749, %4748
  %4751 = or i32 %4711, 1779033703
  %4752 = and i32 %4751, %4732
  %4753 = and i32 %4711, 1779033703
  %4754 = or i32 %4752, %4753
  %4755 = add i32 %4750, %4754
  %4756 = add i32 %4744, %4755
  %4757 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4745, i32 %4745, i32 26) #1
  %4758 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4745, i32 %4745, i32 21) #1
  %4759 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4745, i32 %4745, i32 7) #1
  %4760 = xor i32 %4757, %4758
  %4761 = xor i32 %4760, %4759
  %4762 = xor i32 %4723, %4710
  %4763 = and i32 %4762, %4745
  %4764 = xor i32 %4763, %4710
  %4765 = add i32 %4761, %4764
  %4766 = add i32 %4765, -373957723
  %4767 = add i32 %4766, %4566
  %4768 = add i32 %4767, 1359893119
  %4769 = add i32 %4767, -1156040474
  %4770 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4756, i32 %4756, i32 30) #1
  %4771 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4756, i32 %4756, i32 19) #1
  %4772 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4756, i32 %4756, i32 10) #1
  %4773 = xor i32 %4770, %4771
  %4774 = xor i32 %4773, %4772
  %4775 = or i32 %4732, %4711
  %4776 = and i32 %4775, %4756
  %4777 = and i32 %4732, %4711
  %4778 = or i32 %4776, %4777
  %4779 = add i32 %4774, %4778
  %4780 = add i32 %4768, %4779
  %4781 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4769, i32 %4769, i32 26) #1
  %4782 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4769, i32 %4769, i32 21) #1
  %4783 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4769, i32 %4769, i32 7) #1
  %4784 = xor i32 %4781, %4782
  %4785 = xor i32 %4784, %4783
  %4786 = xor i32 %4745, %4723
  %4787 = and i32 %4786, %4769
  %4788 = xor i32 %4787, %4723
  %4789 = add i32 %4785, %4788
  %4790 = add i32 %4789, 961987163
  %4791 = add i32 %4790, %4567
  %4792 = add i32 %4710, %4791
  %4793 = add i32 %4711, %4792
  %4794 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4780, i32 %4780, i32 30) #1
  %4795 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4780, i32 %4780, i32 19) #1
  %4796 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4780, i32 %4780, i32 10) #1
  %4797 = xor i32 %4794, %4795
  %4798 = xor i32 %4797, %4796
  %4799 = or i32 %4756, %4732
  %4800 = and i32 %4799, %4780
  %4801 = and i32 %4756, %4732
  %4802 = or i32 %4800, %4801
  %4803 = add i32 %4798, %4802
  %4804 = add i32 %4792, %4803
  %4805 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4793, i32 %4793, i32 26) #1
  %4806 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4793, i32 %4793, i32 21) #1
  %4807 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4793, i32 %4793, i32 7) #1
  %4808 = xor i32 %4805, %4806
  %4809 = xor i32 %4808, %4807
  %4810 = xor i32 %4769, %4745
  %4811 = and i32 %4810, %4793
  %4812 = xor i32 %4811, %4745
  %4813 = add i32 %4809, %4812
  %4814 = add i32 %4813, 1508970993
  %4815 = add i32 %4814, %4568
  %4816 = add i32 %4723, %4815
  %4817 = add i32 %4732, %4816
  %4818 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4804, i32 %4804, i32 30) #1
  %4819 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4804, i32 %4804, i32 19) #1
  %4820 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4804, i32 %4804, i32 10) #1
  %4821 = xor i32 %4818, %4819
  %4822 = xor i32 %4821, %4820
  %4823 = or i32 %4780, %4756
  %4824 = and i32 %4823, %4804
  %4825 = and i32 %4780, %4756
  %4826 = or i32 %4824, %4825
  %4827 = add i32 %4822, %4826
  %4828 = add i32 %4816, %4827
  %4829 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4817, i32 %4817, i32 26) #1
  %4830 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4817, i32 %4817, i32 21) #1
  %4831 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4817, i32 %4817, i32 7) #1
  %4832 = xor i32 %4829, %4830
  %4833 = xor i32 %4832, %4831
  %4834 = xor i32 %4793, %4769
  %4835 = and i32 %4834, %4817
  %4836 = xor i32 %4835, %4769
  %4837 = add i32 %4833, %4836
  %4838 = add i32 %4837, -1841331548
  %4839 = add i32 %4838, %4569
  %4840 = add i32 %4745, %4839
  %4841 = add i32 %4756, %4840
  %4842 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4828, i32 %4828, i32 30) #1
  %4843 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4828, i32 %4828, i32 19) #1
  %4844 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4828, i32 %4828, i32 10) #1
  %4845 = xor i32 %4842, %4843
  %4846 = xor i32 %4845, %4844
  %4847 = or i32 %4804, %4780
  %4848 = and i32 %4847, %4828
  %4849 = and i32 %4804, %4780
  %4850 = or i32 %4848, %4849
  %4851 = add i32 %4846, %4850
  %4852 = add i32 %4840, %4851
  %4853 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4841, i32 %4841, i32 26) #1
  %4854 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4841, i32 %4841, i32 21) #1
  %4855 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4841, i32 %4841, i32 7) #1
  %4856 = xor i32 %4853, %4854
  %4857 = xor i32 %4856, %4855
  %4858 = xor i32 %4817, %4793
  %4859 = and i32 %4858, %4841
  %4860 = xor i32 %4859, %4793
  %4861 = add i32 %4857, %4860
  %4862 = add i32 %4861, -1424204075
  %4863 = add i32 %4862, %4570
  %4864 = add i32 %4769, %4863
  %4865 = add i32 %4780, %4864
  %4866 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4852, i32 %4852, i32 30) #1
  %4867 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4852, i32 %4852, i32 19) #1
  %4868 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4852, i32 %4852, i32 10) #1
  %4869 = xor i32 %4866, %4867
  %4870 = xor i32 %4869, %4868
  %4871 = or i32 %4828, %4804
  %4872 = and i32 %4871, %4852
  %4873 = and i32 %4828, %4804
  %4874 = or i32 %4872, %4873
  %4875 = add i32 %4870, %4874
  %4876 = add i32 %4864, %4875
  %4877 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4865, i32 %4865, i32 26) #1
  %4878 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4865, i32 %4865, i32 21) #1
  %4879 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4865, i32 %4865, i32 7) #1
  %4880 = xor i32 %4877, %4878
  %4881 = xor i32 %4880, %4879
  %4882 = xor i32 %4841, %4817
  %4883 = and i32 %4882, %4865
  %4884 = xor i32 %4883, %4817
  %4885 = add i32 %4881, %4884
  %4886 = add i32 %4885, 1476897432
  %4887 = add i32 %4793, %4886
  %4888 = add i32 %4804, %4887
  %4889 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4876, i32 %4876, i32 30) #1
  %4890 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4876, i32 %4876, i32 19) #1
  %4891 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4876, i32 %4876, i32 10) #1
  %4892 = xor i32 %4889, %4890
  %4893 = xor i32 %4892, %4891
  %4894 = or i32 %4852, %4828
  %4895 = and i32 %4894, %4876
  %4896 = and i32 %4852, %4828
  %4897 = or i32 %4895, %4896
  %4898 = add i32 %4893, %4897
  %4899 = add i32 %4887, %4898
  %4900 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4888, i32 %4888, i32 26) #1
  %4901 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4888, i32 %4888, i32 21) #1
  %4902 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4888, i32 %4888, i32 7) #1
  %4903 = xor i32 %4900, %4901
  %4904 = xor i32 %4903, %4902
  %4905 = xor i32 %4865, %4841
  %4906 = and i32 %4905, %4888
  %4907 = xor i32 %4906, %4841
  %4908 = add i32 %4904, %4907
  %4909 = add i32 %4908, 310598401
  %4910 = add i32 %4817, %4909
  %4911 = add i32 %4828, %4910
  %4912 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4899, i32 %4899, i32 30) #1
  %4913 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4899, i32 %4899, i32 19) #1
  %4914 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4899, i32 %4899, i32 10) #1
  %4915 = xor i32 %4912, %4913
  %4916 = xor i32 %4915, %4914
  %4917 = or i32 %4876, %4852
  %4918 = and i32 %4917, %4899
  %4919 = and i32 %4876, %4852
  %4920 = or i32 %4918, %4919
  %4921 = add i32 %4916, %4920
  %4922 = add i32 %4910, %4921
  %4923 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4911, i32 %4911, i32 26) #1
  %4924 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4911, i32 %4911, i32 21) #1
  %4925 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4911, i32 %4911, i32 7) #1
  %4926 = xor i32 %4923, %4924
  %4927 = xor i32 %4926, %4925
  %4928 = xor i32 %4888, %4865
  %4929 = and i32 %4928, %4911
  %4930 = xor i32 %4929, %4865
  %4931 = add i32 %4927, %4930
  %4932 = add i32 %4931, 607225278
  %4933 = add i32 %4841, %4932
  %4934 = add i32 %4852, %4933
  %4935 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4922, i32 %4922, i32 30) #1
  %4936 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4922, i32 %4922, i32 19) #1
  %4937 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4922, i32 %4922, i32 10) #1
  %4938 = xor i32 %4935, %4936
  %4939 = xor i32 %4938, %4937
  %4940 = or i32 %4899, %4876
  %4941 = and i32 %4940, %4922
  %4942 = and i32 %4899, %4876
  %4943 = or i32 %4941, %4942
  %4944 = add i32 %4939, %4943
  %4945 = add i32 %4933, %4944
  %4946 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4934, i32 %4934, i32 26) #1
  %4947 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4934, i32 %4934, i32 21) #1
  %4948 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4934, i32 %4934, i32 7) #1
  %4949 = xor i32 %4946, %4947
  %4950 = xor i32 %4949, %4948
  %4951 = xor i32 %4911, %4888
  %4952 = and i32 %4951, %4934
  %4953 = xor i32 %4952, %4888
  %4954 = add i32 %4950, %4953
  %4955 = add i32 %4954, 1426881987
  %4956 = add i32 %4865, %4955
  %4957 = add i32 %4876, %4956
  %4958 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4945, i32 %4945, i32 30) #1
  %4959 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4945, i32 %4945, i32 19) #1
  %4960 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4945, i32 %4945, i32 10) #1
  %4961 = xor i32 %4958, %4959
  %4962 = xor i32 %4961, %4960
  %4963 = or i32 %4922, %4899
  %4964 = and i32 %4963, %4945
  %4965 = and i32 %4922, %4899
  %4966 = or i32 %4964, %4965
  %4967 = add i32 %4962, %4966
  %4968 = add i32 %4956, %4967
  %4969 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4957, i32 %4957, i32 26) #1
  %4970 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4957, i32 %4957, i32 21) #1
  %4971 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4957, i32 %4957, i32 7) #1
  %4972 = xor i32 %4969, %4970
  %4973 = xor i32 %4972, %4971
  %4974 = xor i32 %4934, %4911
  %4975 = and i32 %4974, %4957
  %4976 = xor i32 %4975, %4911
  %4977 = add i32 %4973, %4976
  %4978 = add i32 %4977, 1925078388
  %4979 = add i32 %4888, %4978
  %4980 = add i32 %4899, %4979
  %4981 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4968, i32 %4968, i32 30) #1
  %4982 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4968, i32 %4968, i32 19) #1
  %4983 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4968, i32 %4968, i32 10) #1
  %4984 = xor i32 %4981, %4982
  %4985 = xor i32 %4984, %4983
  %4986 = or i32 %4945, %4922
  %4987 = and i32 %4986, %4968
  %4988 = and i32 %4945, %4922
  %4989 = or i32 %4987, %4988
  %4990 = add i32 %4985, %4989
  %4991 = add i32 %4979, %4990
  %4992 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4980, i32 %4980, i32 26) #1
  %4993 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4980, i32 %4980, i32 21) #1
  %4994 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4980, i32 %4980, i32 7) #1
  %4995 = xor i32 %4992, %4993
  %4996 = xor i32 %4995, %4994
  %4997 = xor i32 %4957, %4934
  %4998 = and i32 %4997, %4980
  %4999 = xor i32 %4998, %4934
  %5000 = add i32 %4996, %4999
  %5001 = add i32 %5000, -2132889090
  %5002 = add i32 %4911, %5001
  %5003 = add i32 %4922, %5002
  %5004 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4991, i32 %4991, i32 30) #1
  %5005 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4991, i32 %4991, i32 19) #1
  %5006 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4991, i32 %4991, i32 10) #1
  %5007 = xor i32 %5004, %5005
  %5008 = xor i32 %5007, %5006
  %5009 = or i32 %4968, %4945
  %5010 = and i32 %5009, %4991
  %5011 = and i32 %4968, %4945
  %5012 = or i32 %5010, %5011
  %5013 = add i32 %5008, %5012
  %5014 = add i32 %5002, %5013
  %5015 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5003, i32 %5003, i32 26) #1
  %5016 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5003, i32 %5003, i32 21) #1
  %5017 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5003, i32 %5003, i32 7) #1
  %5018 = xor i32 %5015, %5016
  %5019 = xor i32 %5018, %5017
  %5020 = xor i32 %4980, %4957
  %5021 = and i32 %5020, %5003
  %5022 = xor i32 %5021, %4957
  %5023 = add i32 %5019, %5022
  %5024 = add i32 %5023, -1680079193
  %5025 = add i32 %4934, %5024
  %5026 = add i32 %4945, %5025
  %5027 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5014, i32 %5014, i32 30) #1
  %5028 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5014, i32 %5014, i32 19) #1
  %5029 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5014, i32 %5014, i32 10) #1
  %5030 = xor i32 %5027, %5028
  %5031 = xor i32 %5030, %5029
  %5032 = or i32 %4991, %4968
  %5033 = and i32 %5032, %5014
  %5034 = and i32 %4991, %4968
  %5035 = or i32 %5033, %5034
  %5036 = add i32 %5031, %5035
  %5037 = add i32 %5025, %5036
  %5038 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5026, i32 %5026, i32 26) #1
  %5039 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5026, i32 %5026, i32 21) #1
  %5040 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5026, i32 %5026, i32 7) #1
  %5041 = xor i32 %5038, %5039
  %5042 = xor i32 %5041, %5040
  %5043 = xor i32 %5003, %4980
  %5044 = and i32 %5043, %5026
  %5045 = xor i32 %5044, %4980
  %5046 = add i32 %5042, %5045
  %5047 = add i32 %5046, -1046744460
  %5048 = add i32 %4957, %5047
  %5049 = add i32 %4968, %5048
  %5050 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5037, i32 %5037, i32 30) #1
  %5051 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5037, i32 %5037, i32 19) #1
  %5052 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5037, i32 %5037, i32 10) #1
  %5053 = xor i32 %5050, %5051
  %5054 = xor i32 %5053, %5052
  %5055 = or i32 %5014, %4991
  %5056 = and i32 %5055, %5037
  %5057 = and i32 %5014, %4991
  %5058 = or i32 %5056, %5057
  %5059 = add i32 %5054, %5058
  %5060 = add i32 %5048, %5059
  %5061 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5049, i32 %5049, i32 26) #1
  %5062 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5049, i32 %5049, i32 21) #1
  %5063 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5049, i32 %5049, i32 7) #1
  %5064 = xor i32 %5061, %5062
  %5065 = xor i32 %5064, %5063
  %5066 = xor i32 %5026, %5003
  %5067 = and i32 %5066, %5049
  %5068 = xor i32 %5067, %5003
  %5069 = add i32 %5065, %5068
  %5070 = add i32 %5069, -459576895
  %5071 = add i32 %5070, %4576
  %5072 = add i32 %4980, %5071
  %5073 = add i32 %4991, %5072
  %5074 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5060, i32 %5060, i32 30) #1
  %5075 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5060, i32 %5060, i32 19) #1
  %5076 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5060, i32 %5060, i32 10) #1
  %5077 = xor i32 %5074, %5075
  %5078 = xor i32 %5077, %5076
  %5079 = or i32 %5037, %5014
  %5080 = and i32 %5079, %5060
  %5081 = and i32 %5037, %5014
  %5082 = or i32 %5080, %5081
  %5083 = add i32 %5078, %5082
  %5084 = add i32 %5072, %5083
  %5085 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5073, i32 %5073, i32 26) #1
  %5086 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5073, i32 %5073, i32 21) #1
  %5087 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5073, i32 %5073, i32 7) #1
  %5088 = xor i32 %5085, %5086
  %5089 = xor i32 %5088, %5087
  %5090 = xor i32 %5049, %5026
  %5091 = and i32 %5090, %5073
  %5092 = xor i32 %5091, %5026
  %5093 = add i32 %5089, %5092
  %5094 = add i32 %5093, -272742522
  %5095 = add i32 %5094, %4583
  %5096 = add i32 %5003, %5095
  %5097 = add i32 %5014, %5096
  %5098 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5084, i32 %5084, i32 30) #1
  %5099 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5084, i32 %5084, i32 19) #1
  %5100 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5084, i32 %5084, i32 10) #1
  %5101 = xor i32 %5098, %5099
  %5102 = xor i32 %5101, %5100
  %5103 = or i32 %5060, %5037
  %5104 = and i32 %5103, %5084
  %5105 = and i32 %5060, %5037
  %5106 = or i32 %5104, %5105
  %5107 = add i32 %5102, %5106
  %5108 = add i32 %5096, %5107
  %5109 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5097, i32 %5097, i32 26) #1
  %5110 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5097, i32 %5097, i32 21) #1
  %5111 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5097, i32 %5097, i32 7) #1
  %5112 = xor i32 %5109, %5110
  %5113 = xor i32 %5112, %5111
  %5114 = xor i32 %5073, %5049
  %5115 = and i32 %5114, %5097
  %5116 = xor i32 %5115, %5049
  %5117 = add i32 %5113, %5116
  %5118 = add i32 %5117, 264347078
  %5119 = add i32 %5118, %4595
  %5120 = add i32 %5026, %5119
  %5121 = add i32 %5037, %5120
  %5122 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5108, i32 %5108, i32 30) #1
  %5123 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5108, i32 %5108, i32 19) #1
  %5124 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5108, i32 %5108, i32 10) #1
  %5125 = xor i32 %5122, %5123
  %5126 = xor i32 %5125, %5124
  %5127 = or i32 %5084, %5060
  %5128 = and i32 %5127, %5108
  %5129 = and i32 %5084, %5060
  %5130 = or i32 %5128, %5129
  %5131 = add i32 %5126, %5130
  %5132 = add i32 %5120, %5131
  %5133 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5121, i32 %5121, i32 26) #1
  %5134 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5121, i32 %5121, i32 21) #1
  %5135 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5121, i32 %5121, i32 7) #1
  %5136 = xor i32 %5133, %5134
  %5137 = xor i32 %5136, %5135
  %5138 = xor i32 %5097, %5073
  %5139 = and i32 %5138, %5121
  %5140 = xor i32 %5139, %5073
  %5141 = add i32 %5137, %5140
  %5142 = add i32 %5141, 604807628
  %5143 = add i32 %5142, %4607
  %5144 = add i32 %5049, %5143
  %5145 = add i32 %5060, %5144
  %5146 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5132, i32 %5132, i32 30) #1
  %5147 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5132, i32 %5132, i32 19) #1
  %5148 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5132, i32 %5132, i32 10) #1
  %5149 = xor i32 %5146, %5147
  %5150 = xor i32 %5149, %5148
  %5151 = or i32 %5108, %5084
  %5152 = and i32 %5151, %5132
  %5153 = and i32 %5108, %5084
  %5154 = or i32 %5152, %5153
  %5155 = add i32 %5150, %5154
  %5156 = add i32 %5144, %5155
  %5157 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5145, i32 %5145, i32 26) #1
  %5158 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5145, i32 %5145, i32 21) #1
  %5159 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5145, i32 %5145, i32 7) #1
  %5160 = xor i32 %5157, %5158
  %5161 = xor i32 %5160, %5159
  %5162 = xor i32 %5121, %5097
  %5163 = and i32 %5162, %5145
  %5164 = xor i32 %5163, %5097
  %5165 = add i32 %5161, %5164
  %5166 = add i32 %5165, 770255983
  %5167 = add i32 %5166, %4619
  %5168 = add i32 %5073, %5167
  %5169 = add i32 %5084, %5168
  %5170 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5156, i32 %5156, i32 30) #1
  %5171 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5156, i32 %5156, i32 19) #1
  %5172 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5156, i32 %5156, i32 10) #1
  %5173 = xor i32 %5170, %5171
  %5174 = xor i32 %5173, %5172
  %5175 = or i32 %5132, %5108
  %5176 = and i32 %5175, %5156
  %5177 = and i32 %5132, %5108
  %5178 = or i32 %5176, %5177
  %5179 = add i32 %5174, %5178
  %5180 = add i32 %5168, %5179
  %5181 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5169, i32 %5169, i32 26) #1
  %5182 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5169, i32 %5169, i32 21) #1
  %5183 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5169, i32 %5169, i32 7) #1
  %5184 = xor i32 %5181, %5182
  %5185 = xor i32 %5184, %5183
  %5186 = xor i32 %5145, %5121
  %5187 = and i32 %5186, %5169
  %5188 = xor i32 %5187, %5121
  %5189 = add i32 %5185, %5188
  %5190 = add i32 %5189, 1249150122
  %5191 = add i32 %5190, %4631
  %5192 = add i32 %5097, %5191
  %5193 = add i32 %5108, %5192
  %5194 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5180, i32 %5180, i32 30) #1
  %5195 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5180, i32 %5180, i32 19) #1
  %5196 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5180, i32 %5180, i32 10) #1
  %5197 = xor i32 %5194, %5195
  %5198 = xor i32 %5197, %5196
  %5199 = or i32 %5156, %5132
  %5200 = and i32 %5199, %5180
  %5201 = and i32 %5156, %5132
  %5202 = or i32 %5200, %5201
  %5203 = add i32 %5198, %5202
  %5204 = add i32 %5192, %5203
  %5205 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5193, i32 %5193, i32 26) #1
  %5206 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5193, i32 %5193, i32 21) #1
  %5207 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5193, i32 %5193, i32 7) #1
  %5208 = xor i32 %5205, %5206
  %5209 = xor i32 %5208, %5207
  %5210 = xor i32 %5169, %5145
  %5211 = and i32 %5210, %5193
  %5212 = xor i32 %5211, %5145
  %5213 = add i32 %5209, %5212
  %5214 = add i32 %5213, 1555081692
  %5215 = add i32 %5214, %4644
  %5216 = add i32 %5121, %5215
  %5217 = add i32 %5132, %5216
  %5218 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5204, i32 %5204, i32 30) #1
  %5219 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5204, i32 %5204, i32 19) #1
  %5220 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5204, i32 %5204, i32 10) #1
  %5221 = xor i32 %5218, %5219
  %5222 = xor i32 %5221, %5220
  %5223 = or i32 %5180, %5156
  %5224 = and i32 %5223, %5204
  %5225 = and i32 %5180, %5156
  %5226 = or i32 %5224, %5225
  %5227 = add i32 %5222, %5226
  %5228 = add i32 %5216, %5227
  %5229 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5217, i32 %5217, i32 26) #1
  %5230 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5217, i32 %5217, i32 21) #1
  %5231 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5217, i32 %5217, i32 7) #1
  %5232 = xor i32 %5229, %5230
  %5233 = xor i32 %5232, %5231
  %5234 = xor i32 %5193, %5169
  %5235 = and i32 %5234, %5217
  %5236 = xor i32 %5235, %5169
  %5237 = add i32 %5233, %5236
  %5238 = add i32 %5237, 1996064986
  %5239 = add i32 %5238, %4652
  %5240 = add i32 %5145, %5239
  %5241 = add i32 %5156, %5240
  %5242 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5228, i32 %5228, i32 30) #1
  %5243 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5228, i32 %5228, i32 19) #1
  %5244 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5228, i32 %5228, i32 10) #1
  %5245 = xor i32 %5242, %5243
  %5246 = xor i32 %5245, %5244
  %5247 = or i32 %5204, %5180
  %5248 = and i32 %5247, %5228
  %5249 = and i32 %5204, %5180
  %5250 = or i32 %5248, %5249
  %5251 = add i32 %5246, %5250
  %5252 = add i32 %5240, %5251
  %5253 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5241, i32 %5241, i32 26) #1
  %5254 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5241, i32 %5241, i32 21) #1
  %5255 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5241, i32 %5241, i32 7) #1
  %5256 = xor i32 %5253, %5254
  %5257 = xor i32 %5256, %5255
  %5258 = xor i32 %5217, %5193
  %5259 = and i32 %5258, %5241
  %5260 = xor i32 %5259, %5193
  %5261 = add i32 %5257, %5260
  %5262 = add i32 %5261, -1740746414
  %5263 = add i32 %5262, %4659
  %5264 = add i32 %5169, %5263
  %5265 = add i32 %5180, %5264
  %5266 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5252, i32 %5252, i32 30) #1
  %5267 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5252, i32 %5252, i32 19) #1
  %5268 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5252, i32 %5252, i32 10) #1
  %5269 = xor i32 %5266, %5267
  %5270 = xor i32 %5269, %5268
  %5271 = or i32 %5228, %5204
  %5272 = and i32 %5271, %5252
  %5273 = and i32 %5228, %5204
  %5274 = or i32 %5272, %5273
  %5275 = add i32 %5270, %5274
  %5276 = add i32 %5264, %5275
  %5277 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5265, i32 %5265, i32 26) #1
  %5278 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5265, i32 %5265, i32 21) #1
  %5279 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5265, i32 %5265, i32 7) #1
  %5280 = xor i32 %5277, %5278
  %5281 = xor i32 %5280, %5279
  %5282 = xor i32 %5241, %5217
  %5283 = and i32 %5282, %5265
  %5284 = xor i32 %5283, %5217
  %5285 = add i32 %5281, %5284
  %5286 = add i32 %5285, -1473132947
  %5287 = add i32 %5286, %4665
  %5288 = add i32 %5193, %5287
  %5289 = add i32 %5204, %5288
  %5290 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5276, i32 %5276, i32 30) #1
  %5291 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5276, i32 %5276, i32 19) #1
  %5292 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5276, i32 %5276, i32 10) #1
  %5293 = xor i32 %5290, %5291
  %5294 = xor i32 %5293, %5292
  %5295 = or i32 %5252, %5228
  %5296 = and i32 %5295, %5276
  %5297 = and i32 %5252, %5228
  %5298 = or i32 %5296, %5297
  %5299 = add i32 %5294, %5298
  %5300 = add i32 %5288, %5299
  %5301 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5289, i32 %5289, i32 26) #1
  %5302 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5289, i32 %5289, i32 21) #1
  %5303 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5289, i32 %5289, i32 7) #1
  %5304 = xor i32 %5301, %5302
  %5305 = xor i32 %5304, %5303
  %5306 = xor i32 %5265, %5241
  %5307 = and i32 %5306, %5289
  %5308 = xor i32 %5307, %5241
  %5309 = add i32 %5305, %5308
  %5310 = add i32 %5309, -1341970488
  %5311 = add i32 %5310, %4671
  %5312 = add i32 %5217, %5311
  %5313 = add i32 %5228, %5312
  %5314 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5300, i32 %5300, i32 30) #1
  %5315 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5300, i32 %5300, i32 19) #1
  %5316 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5300, i32 %5300, i32 10) #1
  %5317 = xor i32 %5314, %5315
  %5318 = xor i32 %5317, %5316
  %5319 = or i32 %5276, %5252
  %5320 = and i32 %5319, %5300
  %5321 = and i32 %5276, %5252
  %5322 = or i32 %5320, %5321
  %5323 = add i32 %5318, %5322
  %5324 = add i32 %5312, %5323
  %5325 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5313, i32 %5313, i32 26) #1
  %5326 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5313, i32 %5313, i32 21) #1
  %5327 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5313, i32 %5313, i32 7) #1
  %5328 = xor i32 %5325, %5326
  %5329 = xor i32 %5328, %5327
  %5330 = xor i32 %5289, %5265
  %5331 = and i32 %5330, %5313
  %5332 = xor i32 %5331, %5265
  %5333 = add i32 %5329, %5332
  %5334 = add i32 %5333, -1084653625
  %5335 = add i32 %5334, %4677
  %5336 = add i32 %5241, %5335
  %5337 = add i32 %5252, %5336
  %5338 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5324, i32 %5324, i32 30) #1
  %5339 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5324, i32 %5324, i32 19) #1
  %5340 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5324, i32 %5324, i32 10) #1
  %5341 = xor i32 %5338, %5339
  %5342 = xor i32 %5341, %5340
  %5343 = or i32 %5300, %5276
  %5344 = and i32 %5343, %5324
  %5345 = and i32 %5300, %5276
  %5346 = or i32 %5344, %5345
  %5347 = add i32 %5342, %5346
  %5348 = add i32 %5336, %5347
  %5349 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5337, i32 %5337, i32 26) #1
  %5350 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5337, i32 %5337, i32 21) #1
  %5351 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5337, i32 %5337, i32 7) #1
  %5352 = xor i32 %5349, %5350
  %5353 = xor i32 %5352, %5351
  %5354 = xor i32 %5313, %5289
  %5355 = and i32 %5354, %5337
  %5356 = xor i32 %5355, %5289
  %5357 = add i32 %5353, %5356
  %5358 = add i32 %5357, -958395405
  %5359 = add i32 %5358, %4683
  %5360 = add i32 %5265, %5359
  %5361 = add i32 %5276, %5360
  %5362 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5348, i32 %5348, i32 30) #1
  %5363 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5348, i32 %5348, i32 19) #1
  %5364 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5348, i32 %5348, i32 10) #1
  %5365 = xor i32 %5362, %5363
  %5366 = xor i32 %5365, %5364
  %5367 = or i32 %5324, %5300
  %5368 = and i32 %5367, %5348
  %5369 = and i32 %5324, %5300
  %5370 = or i32 %5368, %5369
  %5371 = add i32 %5366, %5370
  %5372 = add i32 %5360, %5371
  %5373 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5361, i32 %5361, i32 26) #1
  %5374 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5361, i32 %5361, i32 21) #1
  %5375 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5361, i32 %5361, i32 7) #1
  %5376 = xor i32 %5373, %5374
  %5377 = xor i32 %5376, %5375
  %5378 = xor i32 %5337, %5313
  %5379 = and i32 %5378, %5361
  %5380 = xor i32 %5379, %5313
  %5381 = add i32 %5377, %5380
  %5382 = add i32 %5381, -710438585
  %5383 = add i32 %5382, %4689
  %5384 = add i32 %5289, %5383
  %5385 = add i32 %5300, %5384
  %5386 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5372, i32 %5372, i32 30) #1
  %5387 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5372, i32 %5372, i32 19) #1
  %5388 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5372, i32 %5372, i32 10) #1
  %5389 = xor i32 %5386, %5387
  %5390 = xor i32 %5389, %5388
  %5391 = or i32 %5348, %5324
  %5392 = and i32 %5391, %5372
  %5393 = and i32 %5348, %5324
  %5394 = or i32 %5392, %5393
  %5395 = add i32 %5390, %5394
  %5396 = add i32 %5384, %5395
  %5397 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5385, i32 %5385, i32 26) #1
  %5398 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5385, i32 %5385, i32 21) #1
  %5399 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5385, i32 %5385, i32 7) #1
  %5400 = xor i32 %5397, %5398
  %5401 = xor i32 %5400, %5399
  %5402 = xor i32 %5361, %5337
  %5403 = and i32 %5402, %5385
  %5404 = xor i32 %5403, %5337
  %5405 = add i32 %5401, %5404
  %5406 = add i32 %5405, 113926993
  %5407 = add i32 %5406, %4696
  %5408 = add i32 %5313, %5407
  %5409 = add i32 %5324, %5408
  %5410 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5396, i32 %5396, i32 30) #1
  %5411 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5396, i32 %5396, i32 19) #1
  %5412 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5396, i32 %5396, i32 10) #1
  %5413 = xor i32 %5410, %5411
  %5414 = xor i32 %5413, %5412
  %5415 = or i32 %5372, %5348
  %5416 = and i32 %5415, %5396
  %5417 = and i32 %5372, %5348
  %5418 = or i32 %5416, %5417
  %5419 = add i32 %5414, %5418
  %5420 = add i32 %5408, %5419
  %5421 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5409, i32 %5409, i32 26) #1
  %5422 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5409, i32 %5409, i32 21) #1
  %5423 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5409, i32 %5409, i32 7) #1
  %5424 = xor i32 %5421, %5422
  %5425 = xor i32 %5424, %5423
  %5426 = xor i32 %5385, %5361
  %5427 = and i32 %5426, %5409
  %5428 = xor i32 %5427, %5361
  %5429 = add i32 %5425, %5428
  %5430 = add i32 %5429, 338241895
  %5431 = add i32 %5430, %4709
  %5432 = add i32 %5337, %5431
  %5433 = add i32 %5348, %5432
  %5434 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5420, i32 %5420, i32 30) #1
  %5435 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5420, i32 %5420, i32 19) #1
  %5436 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5420, i32 %5420, i32 10) #1
  %5437 = xor i32 %5434, %5435
  %5438 = xor i32 %5437, %5436
  %5439 = or i32 %5396, %5372
  %5440 = and i32 %5439, %5420
  %5441 = and i32 %5396, %5372
  %5442 = or i32 %5440, %5441
  %5443 = add i32 %5438, %5442
  %5444 = add i32 %5432, %5443
  %5445 = add i32 %4576, %4665
  %5446 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4582, i32 %4583, i32 25) #1
  %5447 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4582, i32 %4583, i32 14) #1
  %5448 = lshr i32 %4583, 3
  %5449 = xor i32 %5446, %5447
  %5450 = xor i32 %5449, %5448
  %5451 = add i32 %5445, %5450
  %5452 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4696, i32 %4696, i32 15) #1
  %5453 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4696, i32 %4696, i32 13) #1
  %5454 = lshr i32 %4696, 10
  %5455 = xor i32 %5452, %5453
  %5456 = xor i32 %5455, %5454
  %5457 = add i32 %5451, %5456
  store i32 %5457, i32* %23, align 4
  %5458 = add i32 %4583, %4671
  %5459 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4595, i32 %4595, i32 25) #1
  %5460 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4595, i32 %4595, i32 14) #1
  %5461 = lshr i32 %4595, 3
  %5462 = xor i32 %5459, %5460
  %5463 = xor i32 %5462, %5461
  %5464 = add i32 %5458, %5463
  %5465 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4709, i32 %4709, i32 15) #1
  %5466 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4709, i32 %4709, i32 13) #1
  %5467 = lshr i32 %4709, 10
  %5468 = xor i32 %5465, %5466
  %5469 = xor i32 %5468, %5467
  %5470 = add i32 %5464, %5469
  store i32 %5470, i32* %24, align 4
  %5471 = add i32 %4595, %4677
  %5472 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4607, i32 %4607, i32 25) #1
  %5473 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4607, i32 %4607, i32 14) #1
  %5474 = lshr i32 %4607, 3
  %5475 = xor i32 %5472, %5473
  %5476 = xor i32 %5475, %5474
  %5477 = add i32 %5471, %5476
  %5478 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5457, i32 %5457, i32 15) #1
  %5479 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5457, i32 %5457, i32 13) #1
  %5480 = lshr i32 %5457, 10
  %5481 = xor i32 %5478, %5479
  %5482 = xor i32 %5481, %5480
  %5483 = add i32 %5477, %5482
  store i32 %5483, i32* %25, align 4
  %5484 = add i32 %4607, %4683
  %5485 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4619, i32 %4619, i32 25) #1
  %5486 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4619, i32 %4619, i32 14) #1
  %5487 = lshr i32 %4619, 3
  %5488 = xor i32 %5485, %5486
  %5489 = xor i32 %5488, %5487
  %5490 = add i32 %5484, %5489
  %5491 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5470, i32 %5470, i32 15) #1
  %5492 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5470, i32 %5470, i32 13) #1
  %5493 = lshr i32 %5470, 10
  %5494 = xor i32 %5491, %5492
  %5495 = xor i32 %5494, %5493
  %5496 = add i32 %5490, %5495
  store i32 %5496, i32* %26, align 4
  %5497 = add i32 %4619, %4689
  %5498 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4631, i32 %4631, i32 25) #1
  %5499 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4631, i32 %4631, i32 14) #1
  %5500 = lshr i32 %4631, 3
  %5501 = xor i32 %5498, %5499
  %5502 = xor i32 %5501, %5500
  %5503 = add i32 %5497, %5502
  %5504 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5483, i32 %5483, i32 15) #1
  %5505 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5483, i32 %5483, i32 13) #1
  %5506 = lshr i32 %5483, 10
  %5507 = xor i32 %5504, %5505
  %5508 = xor i32 %5507, %5506
  %5509 = add i32 %5503, %5508
  store i32 %5509, i32* %27, align 4
  %5510 = add i32 %4631, %4696
  %5511 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4644, i32 %4644, i32 25) #1
  %5512 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4644, i32 %4644, i32 14) #1
  %5513 = lshr i32 %4644, 3
  %5514 = xor i32 %5511, %5512
  %5515 = xor i32 %5514, %5513
  %5516 = add i32 %5510, %5515
  %5517 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5496, i32 %5496, i32 15) #1
  %5518 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5496, i32 %5496, i32 13) #1
  %5519 = lshr i32 %5496, 10
  %5520 = xor i32 %5517, %5518
  %5521 = xor i32 %5520, %5519
  %5522 = add i32 %5516, %5521
  store i32 %5522, i32* %28, align 4
  %5523 = add i32 %4644, %4709
  %5524 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4652, i32 %4652, i32 25) #1
  %5525 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4652, i32 %4652, i32 14) #1
  %5526 = lshr i32 %4652, 3
  %5527 = xor i32 %5524, %5525
  %5528 = xor i32 %5527, %5526
  %5529 = add i32 %5523, %5528
  %5530 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5509, i32 %5509, i32 15) #1
  %5531 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5509, i32 %5509, i32 13) #1
  %5532 = lshr i32 %5509, 10
  %5533 = xor i32 %5530, %5531
  %5534 = xor i32 %5533, %5532
  %5535 = add i32 %5529, %5534
  store i32 %5535, i32* %29, align 4
  %5536 = add i32 %4652, %5457
  %5537 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4659, i32 %4659, i32 25) #1
  %5538 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4659, i32 %4659, i32 14) #1
  %5539 = lshr i32 %4659, 3
  %5540 = xor i32 %5537, %5538
  %5541 = xor i32 %5540, %5539
  %5542 = add i32 %5536, %5541
  %5543 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5522, i32 %5522, i32 15) #1
  %5544 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5522, i32 %5522, i32 13) #1
  %5545 = lshr i32 %5522, 10
  %5546 = xor i32 %5543, %5544
  %5547 = xor i32 %5546, %5545
  %5548 = add i32 %5542, %5547
  store i32 %5548, i32* %30, align 4
  %5549 = add i32 %4659, %5470
  %5550 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4665, i32 %4665, i32 25) #1
  %5551 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4665, i32 %4665, i32 14) #1
  %5552 = lshr i32 %4665, 3
  %5553 = xor i32 %5550, %5551
  %5554 = xor i32 %5553, %5552
  %5555 = add i32 %5549, %5554
  %5556 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5535, i32 %5535, i32 15) #1
  %5557 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5535, i32 %5535, i32 13) #1
  %5558 = lshr i32 %5535, 10
  %5559 = xor i32 %5556, %5557
  %5560 = xor i32 %5559, %5558
  %5561 = add i32 %5555, %5560
  store i32 %5561, i32* %31, align 4
  %5562 = add i32 %4665, %5483
  %5563 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4671, i32 %4671, i32 25) #1
  %5564 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4671, i32 %4671, i32 14) #1
  %5565 = lshr i32 %4671, 3
  %5566 = xor i32 %5563, %5564
  %5567 = xor i32 %5566, %5565
  %5568 = add i32 %5562, %5567
  %5569 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5548, i32 %5548, i32 15) #1
  %5570 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5548, i32 %5548, i32 13) #1
  %5571 = lshr i32 %5548, 10
  %5572 = xor i32 %5569, %5570
  %5573 = xor i32 %5572, %5571
  %5574 = add i32 %5568, %5573
  store i32 %5574, i32* %32, align 4
  %5575 = add i32 %4671, %5496
  %5576 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4677, i32 %4677, i32 25) #1
  %5577 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4677, i32 %4677, i32 14) #1
  %5578 = lshr i32 %4677, 3
  %5579 = xor i32 %5576, %5577
  %5580 = xor i32 %5579, %5578
  %5581 = add i32 %5575, %5580
  %5582 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5561, i32 %5561, i32 15) #1
  %5583 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5561, i32 %5561, i32 13) #1
  %5584 = lshr i32 %5561, 10
  %5585 = xor i32 %5582, %5583
  %5586 = xor i32 %5585, %5584
  %5587 = add i32 %5581, %5586
  store i32 %5587, i32* %33, align 4
  %5588 = add i32 %4677, %5509
  %5589 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4683, i32 %4683, i32 25) #1
  %5590 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4683, i32 %4683, i32 14) #1
  %5591 = lshr i32 %4683, 3
  %5592 = xor i32 %5589, %5590
  %5593 = xor i32 %5592, %5591
  %5594 = add i32 %5588, %5593
  %5595 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5574, i32 %5574, i32 15) #1
  %5596 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5574, i32 %5574, i32 13) #1
  %5597 = lshr i32 %5574, 10
  %5598 = xor i32 %5595, %5596
  %5599 = xor i32 %5598, %5597
  %5600 = add i32 %5594, %5599
  store i32 %5600, i32* %34, align 4
  %5601 = add i32 %4683, %5522
  %5602 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4689, i32 %4689, i32 25) #1
  %5603 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4689, i32 %4689, i32 14) #1
  %5604 = lshr i32 %4689, 3
  %5605 = xor i32 %5602, %5603
  %5606 = xor i32 %5605, %5604
  %5607 = add i32 %5601, %5606
  %5608 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5587, i32 %5587, i32 15) #1
  %5609 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5587, i32 %5587, i32 13) #1
  %5610 = lshr i32 %5587, 10
  %5611 = xor i32 %5608, %5609
  %5612 = xor i32 %5611, %5610
  %5613 = add i32 %5607, %5612
  store i32 %5613, i32* %35, align 4
  %5614 = add i32 %4689, %5535
  %5615 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4696, i32 %4696, i32 25) #1
  %5616 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4696, i32 %4696, i32 14) #1
  %5617 = lshr i32 %4696, 3
  %5618 = xor i32 %5615, %5616
  %5619 = xor i32 %5618, %5617
  %5620 = add i32 %5614, %5619
  %5621 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5600, i32 %5600, i32 15) #1
  %5622 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5600, i32 %5600, i32 13) #1
  %5623 = lshr i32 %5600, 10
  %5624 = xor i32 %5621, %5622
  %5625 = xor i32 %5624, %5623
  %5626 = add i32 %5620, %5625
  store i32 %5626, i32* %36, align 4
  %5627 = add i32 %4696, %5548
  %5628 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4709, i32 %4709, i32 25) #1
  %5629 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %4709, i32 %4709, i32 14) #1
  %5630 = lshr i32 %4709, 3
  %5631 = xor i32 %5628, %5629
  %5632 = xor i32 %5631, %5630
  %5633 = add i32 %5627, %5632
  %5634 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5613, i32 %5613, i32 15) #1
  %5635 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5613, i32 %5613, i32 13) #1
  %5636 = lshr i32 %5613, 10
  %5637 = xor i32 %5634, %5635
  %5638 = xor i32 %5637, %5636
  %5639 = add i32 %5633, %5638
  store i32 %5639, i32* %37, align 4
  %5640 = add i32 %4709, %5561
  %5641 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5457, i32 %5457, i32 25) #1
  %5642 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5457, i32 %5457, i32 14) #1
  %5643 = lshr i32 %5457, 3
  %5644 = xor i32 %5641, %5642
  %5645 = xor i32 %5644, %5643
  %5646 = add i32 %5640, %5645
  %5647 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5626, i32 %5626, i32 15) #1
  %5648 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5626, i32 %5626, i32 13) #1
  %5649 = lshr i32 %5626, 10
  %5650 = xor i32 %5647, %5648
  %5651 = xor i32 %5650, %5649
  %5652 = add i32 %5646, %5651
  store i32 %5652, i32* %38, align 4
  %5653 = add i32 %5457, %5574
  %5654 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5470, i32 %5470, i32 25) #1
  %5655 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5470, i32 %5470, i32 14) #1
  %5656 = lshr i32 %5470, 3
  %5657 = xor i32 %5654, %5655
  %5658 = xor i32 %5657, %5656
  %5659 = add i32 %5653, %5658
  %5660 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5639, i32 %5639, i32 15) #1
  %5661 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5639, i32 %5639, i32 13) #1
  %5662 = lshr i32 %5639, 10
  %5663 = xor i32 %5660, %5661
  %5664 = xor i32 %5663, %5662
  %5665 = add i32 %5659, %5664
  store i32 %5665, i32* %39, align 4
  %5666 = add i32 %5470, %5587
  %5667 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5483, i32 %5483, i32 25) #1
  %5668 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5483, i32 %5483, i32 14) #1
  %5669 = lshr i32 %5483, 3
  %5670 = xor i32 %5667, %5668
  %5671 = xor i32 %5670, %5669
  %5672 = add i32 %5666, %5671
  %5673 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5652, i32 %5652, i32 15) #1
  %5674 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5652, i32 %5652, i32 13) #1
  %5675 = lshr i32 %5652, 10
  %5676 = xor i32 %5673, %5674
  %5677 = xor i32 %5676, %5675
  %5678 = add i32 %5672, %5677
  store i32 %5678, i32* %40, align 4
  %5679 = add i32 %5483, %5600
  %5680 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5496, i32 %5496, i32 25) #1
  %5681 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5496, i32 %5496, i32 14) #1
  %5682 = lshr i32 %5496, 3
  %5683 = xor i32 %5680, %5681
  %5684 = xor i32 %5683, %5682
  %5685 = add i32 %5679, %5684
  %5686 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5665, i32 %5665, i32 15) #1
  %5687 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5665, i32 %5665, i32 13) #1
  %5688 = lshr i32 %5665, 10
  %5689 = xor i32 %5686, %5687
  %5690 = xor i32 %5689, %5688
  %5691 = add i32 %5685, %5690
  store i32 %5691, i32* %41, align 4
  %5692 = add i32 %5496, %5613
  %5693 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5509, i32 %5509, i32 25) #1
  %5694 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5509, i32 %5509, i32 14) #1
  %5695 = lshr i32 %5509, 3
  %5696 = xor i32 %5693, %5694
  %5697 = xor i32 %5696, %5695
  %5698 = add i32 %5692, %5697
  %5699 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5678, i32 %5678, i32 15) #1
  %5700 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5678, i32 %5678, i32 13) #1
  %5701 = lshr i32 %5678, 10
  %5702 = xor i32 %5699, %5700
  %5703 = xor i32 %5702, %5701
  %5704 = add i32 %5698, %5703
  store i32 %5704, i32* %42, align 4
  %5705 = add i32 %5509, %5626
  %5706 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5522, i32 %5522, i32 25) #1
  %5707 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5522, i32 %5522, i32 14) #1
  %5708 = lshr i32 %5522, 3
  %5709 = xor i32 %5706, %5707
  %5710 = xor i32 %5709, %5708
  %5711 = add i32 %5705, %5710
  %5712 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5691, i32 %5691, i32 15) #1
  %5713 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5691, i32 %5691, i32 13) #1
  %5714 = lshr i32 %5691, 10
  %5715 = xor i32 %5712, %5713
  %5716 = xor i32 %5715, %5714
  %5717 = add i32 %5711, %5716
  %5718 = add i32 %5522, %5639
  %5719 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5535, i32 %5535, i32 25) #1
  %5720 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5535, i32 %5535, i32 14) #1
  %5721 = lshr i32 %5535, 3
  %5722 = xor i32 %5719, %5720
  %5723 = xor i32 %5722, %5721
  %5724 = add i32 %5718, %5723
  %5725 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5704, i32 %5704, i32 15) #1
  %5726 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5704, i32 %5704, i32 13) #1
  %5727 = lshr i32 %5704, 10
  %5728 = xor i32 %5725, %5726
  %5729 = xor i32 %5728, %5727
  %5730 = add i32 %5724, %5729
  %5731 = add i32 %5535, %5652
  %5732 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5548, i32 %5548, i32 25) #1
  %5733 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5548, i32 %5548, i32 14) #1
  %5734 = lshr i32 %5548, 3
  %5735 = xor i32 %5732, %5733
  %5736 = xor i32 %5735, %5734
  %5737 = add i32 %5731, %5736
  %5738 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5717, i32 %5717, i32 15) #1
  %5739 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5717, i32 %5717, i32 13) #1
  %5740 = lshr i32 %5717, 10
  %5741 = xor i32 %5738, %5739
  %5742 = xor i32 %5741, %5740
  %5743 = add i32 %5737, %5742
  %5744 = add i32 %5548, %5665
  %5745 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5561, i32 %5561, i32 25) #1
  %5746 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5561, i32 %5561, i32 14) #1
  %5747 = lshr i32 %5561, 3
  %5748 = xor i32 %5745, %5746
  %5749 = xor i32 %5748, %5747
  %5750 = add i32 %5744, %5749
  %5751 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5730, i32 %5730, i32 15) #1
  %5752 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5730, i32 %5730, i32 13) #1
  %5753 = lshr i32 %5730, 10
  %5754 = xor i32 %5751, %5752
  %5755 = xor i32 %5754, %5753
  %5756 = add i32 %5750, %5755
  %5757 = add i32 %5561, %5678
  %5758 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5574, i32 %5574, i32 25) #1
  %5759 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5574, i32 %5574, i32 14) #1
  %5760 = lshr i32 %5574, 3
  %5761 = xor i32 %5758, %5759
  %5762 = xor i32 %5761, %5760
  %5763 = add i32 %5757, %5762
  %5764 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5743, i32 %5743, i32 15) #1
  %5765 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5743, i32 %5743, i32 13) #1
  %5766 = lshr i32 %5743, 10
  %5767 = xor i32 %5764, %5765
  %5768 = xor i32 %5767, %5766
  %5769 = add i32 %5763, %5768
  %5770 = add i32 %5574, %5691
  %5771 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5587, i32 %5587, i32 25) #1
  %5772 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5587, i32 %5587, i32 14) #1
  %5773 = lshr i32 %5587, 3
  %5774 = xor i32 %5771, %5772
  %5775 = xor i32 %5774, %5773
  %5776 = add i32 %5770, %5775
  %5777 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5756, i32 %5756, i32 15) #1
  %5778 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5756, i32 %5756, i32 13) #1
  %5779 = lshr i32 %5756, 10
  %5780 = xor i32 %5777, %5778
  %5781 = xor i32 %5780, %5779
  %5782 = add i32 %5776, %5781
  %5783 = add i32 %5587, %5704
  %5784 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5600, i32 %5600, i32 25) #1
  %5785 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5600, i32 %5600, i32 14) #1
  %5786 = lshr i32 %5600, 3
  %5787 = xor i32 %5784, %5785
  %5788 = xor i32 %5787, %5786
  %5789 = add i32 %5783, %5788
  %5790 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5769, i32 %5769, i32 15) #1
  %5791 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5769, i32 %5769, i32 13) #1
  %5792 = lshr i32 %5769, 10
  %5793 = xor i32 %5790, %5791
  %5794 = xor i32 %5793, %5792
  %5795 = add i32 %5789, %5794
  %5796 = add i32 %5600, %5717
  %5797 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5613, i32 %5613, i32 25) #1
  %5798 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5613, i32 %5613, i32 14) #1
  %5799 = lshr i32 %5613, 3
  %5800 = xor i32 %5797, %5798
  %5801 = xor i32 %5800, %5799
  %5802 = add i32 %5796, %5801
  %5803 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5782, i32 %5782, i32 15) #1
  %5804 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5782, i32 %5782, i32 13) #1
  %5805 = lshr i32 %5782, 10
  %5806 = xor i32 %5803, %5804
  %5807 = xor i32 %5806, %5805
  %5808 = add i32 %5802, %5807
  %5809 = add i32 %5613, %5730
  %5810 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5626, i32 %5626, i32 25) #1
  %5811 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5626, i32 %5626, i32 14) #1
  %5812 = lshr i32 %5626, 3
  %5813 = xor i32 %5810, %5811
  %5814 = xor i32 %5813, %5812
  %5815 = add i32 %5809, %5814
  %5816 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5795, i32 %5795, i32 15) #1
  %5817 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5795, i32 %5795, i32 13) #1
  %5818 = lshr i32 %5795, 10
  %5819 = xor i32 %5816, %5817
  %5820 = xor i32 %5819, %5818
  %5821 = add i32 %5815, %5820
  %5822 = add i32 %5626, %5743
  %5823 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5639, i32 %5639, i32 25) #1
  %5824 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5639, i32 %5639, i32 14) #1
  %5825 = lshr i32 %5639, 3
  %5826 = xor i32 %5823, %5824
  %5827 = xor i32 %5826, %5825
  %5828 = add i32 %5822, %5827
  %5829 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5808, i32 %5808, i32 15) #1
  %5830 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5808, i32 %5808, i32 13) #1
  %5831 = lshr i32 %5808, 10
  %5832 = xor i32 %5829, %5830
  %5833 = xor i32 %5832, %5831
  %5834 = add i32 %5828, %5833
  %5835 = add i32 %5639, %5756
  %5836 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5652, i32 %5652, i32 25) #1
  %5837 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5652, i32 %5652, i32 14) #1
  %5838 = lshr i32 %5652, 3
  %5839 = xor i32 %5836, %5837
  %5840 = xor i32 %5839, %5838
  %5841 = add i32 %5835, %5840
  %5842 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5821, i32 %5821, i32 15) #1
  %5843 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5821, i32 %5821, i32 13) #1
  %5844 = lshr i32 %5821, 10
  %5845 = xor i32 %5842, %5843
  %5846 = xor i32 %5845, %5844
  %5847 = add i32 %5841, %5846
  %5848 = add i32 %5652, %5769
  %5849 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5665, i32 %5665, i32 25) #1
  %5850 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5665, i32 %5665, i32 14) #1
  %5851 = lshr i32 %5665, 3
  %5852 = xor i32 %5849, %5850
  %5853 = xor i32 %5852, %5851
  %5854 = add i32 %5848, %5853
  %5855 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5834, i32 %5834, i32 15) #1
  %5856 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5834, i32 %5834, i32 13) #1
  %5857 = lshr i32 %5834, 10
  %5858 = xor i32 %5855, %5856
  %5859 = xor i32 %5858, %5857
  %5860 = add i32 %5854, %5859
  %5861 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5433, i32 %5433, i32 26) #1
  %5862 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5433, i32 %5433, i32 21) #1
  %5863 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5433, i32 %5433, i32 7) #1
  %5864 = xor i32 %5861, %5862
  %5865 = xor i32 %5864, %5863
  %5866 = xor i32 %5409, %5385
  %5867 = and i32 %5866, %5433
  %5868 = xor i32 %5867, %5385
  %5869 = add i32 %5865, %5868
  %5870 = add i32 %5869, 666307205
  %5871 = add i32 %5870, %5457
  %5872 = add i32 %5361, %5871
  %5873 = add i32 %5372, %5872
  %5874 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5444, i32 %5444, i32 30) #1
  %5875 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5444, i32 %5444, i32 19) #1
  %5876 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5444, i32 %5444, i32 10) #1
  %5877 = xor i32 %5874, %5875
  %5878 = xor i32 %5877, %5876
  %5879 = or i32 %5420, %5396
  %5880 = and i32 %5879, %5444
  %5881 = and i32 %5420, %5396
  %5882 = or i32 %5880, %5881
  %5883 = add i32 %5878, %5882
  %5884 = add i32 %5872, %5883
  %5885 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5873, i32 %5873, i32 26) #1
  %5886 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5873, i32 %5873, i32 21) #1
  %5887 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5873, i32 %5873, i32 7) #1
  %5888 = xor i32 %5885, %5886
  %5889 = xor i32 %5888, %5887
  %5890 = xor i32 %5433, %5409
  %5891 = and i32 %5890, %5873
  %5892 = xor i32 %5891, %5409
  %5893 = add i32 %5889, %5892
  %5894 = add i32 %5893, 773529912
  %5895 = add i32 %5894, %5470
  %5896 = add i32 %5385, %5895
  %5897 = add i32 %5396, %5896
  %5898 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5884, i32 %5884, i32 30) #1
  %5899 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5884, i32 %5884, i32 19) #1
  %5900 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5884, i32 %5884, i32 10) #1
  %5901 = xor i32 %5898, %5899
  %5902 = xor i32 %5901, %5900
  %5903 = or i32 %5444, %5420
  %5904 = and i32 %5903, %5884
  %5905 = and i32 %5444, %5420
  %5906 = or i32 %5904, %5905
  %5907 = add i32 %5902, %5906
  %5908 = add i32 %5896, %5907
  %5909 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5897, i32 %5897, i32 26) #1
  %5910 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5897, i32 %5897, i32 21) #1
  %5911 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5897, i32 %5897, i32 7) #1
  %5912 = xor i32 %5909, %5910
  %5913 = xor i32 %5912, %5911
  %5914 = xor i32 %5873, %5433
  %5915 = and i32 %5914, %5897
  %5916 = xor i32 %5915, %5433
  %5917 = add i32 %5913, %5916
  %5918 = add i32 %5917, 1294757372
  %5919 = add i32 %5918, %5483
  %5920 = add i32 %5409, %5919
  %5921 = add i32 %5420, %5920
  %5922 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5908, i32 %5908, i32 30) #1
  %5923 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5908, i32 %5908, i32 19) #1
  %5924 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5908, i32 %5908, i32 10) #1
  %5925 = xor i32 %5922, %5923
  %5926 = xor i32 %5925, %5924
  %5927 = or i32 %5884, %5444
  %5928 = and i32 %5927, %5908
  %5929 = and i32 %5884, %5444
  %5930 = or i32 %5928, %5929
  %5931 = add i32 %5926, %5930
  %5932 = add i32 %5920, %5931
  %5933 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5921, i32 %5921, i32 26) #1
  %5934 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5921, i32 %5921, i32 21) #1
  %5935 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5921, i32 %5921, i32 7) #1
  %5936 = xor i32 %5933, %5934
  %5937 = xor i32 %5936, %5935
  %5938 = xor i32 %5897, %5873
  %5939 = and i32 %5938, %5921
  %5940 = xor i32 %5939, %5873
  %5941 = add i32 %5937, %5940
  %5942 = add i32 %5941, 1396182291
  %5943 = add i32 %5942, %5496
  %5944 = add i32 %5433, %5943
  %5945 = add i32 %5444, %5944
  %5946 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5932, i32 %5932, i32 30) #1
  %5947 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5932, i32 %5932, i32 19) #1
  %5948 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5932, i32 %5932, i32 10) #1
  %5949 = xor i32 %5946, %5947
  %5950 = xor i32 %5949, %5948
  %5951 = or i32 %5908, %5884
  %5952 = and i32 %5951, %5932
  %5953 = and i32 %5908, %5884
  %5954 = or i32 %5952, %5953
  %5955 = add i32 %5950, %5954
  %5956 = add i32 %5944, %5955
  %5957 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5945, i32 %5945, i32 26) #1
  %5958 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5945, i32 %5945, i32 21) #1
  %5959 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5945, i32 %5945, i32 7) #1
  %5960 = xor i32 %5957, %5958
  %5961 = xor i32 %5960, %5959
  %5962 = xor i32 %5921, %5897
  %5963 = and i32 %5962, %5945
  %5964 = xor i32 %5963, %5897
  %5965 = add i32 %5961, %5964
  %5966 = add i32 %5965, 1695183700
  %5967 = add i32 %5966, %5509
  %5968 = add i32 %5873, %5967
  %5969 = add i32 %5884, %5968
  %5970 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5956, i32 %5956, i32 30) #1
  %5971 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5956, i32 %5956, i32 19) #1
  %5972 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5956, i32 %5956, i32 10) #1
  %5973 = xor i32 %5970, %5971
  %5974 = xor i32 %5973, %5972
  %5975 = or i32 %5932, %5908
  %5976 = and i32 %5975, %5956
  %5977 = and i32 %5932, %5908
  %5978 = or i32 %5976, %5977
  %5979 = add i32 %5974, %5978
  %5980 = add i32 %5968, %5979
  %5981 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5969, i32 %5969, i32 26) #1
  %5982 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5969, i32 %5969, i32 21) #1
  %5983 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5969, i32 %5969, i32 7) #1
  %5984 = xor i32 %5981, %5982
  %5985 = xor i32 %5984, %5983
  %5986 = xor i32 %5945, %5921
  %5987 = and i32 %5986, %5969
  %5988 = xor i32 %5987, %5921
  %5989 = add i32 %5985, %5988
  %5990 = add i32 %5989, 1986661051
  %5991 = add i32 %5990, %5522
  %5992 = add i32 %5897, %5991
  %5993 = add i32 %5908, %5992
  %5994 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5980, i32 %5980, i32 30) #1
  %5995 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5980, i32 %5980, i32 19) #1
  %5996 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5980, i32 %5980, i32 10) #1
  %5997 = xor i32 %5994, %5995
  %5998 = xor i32 %5997, %5996
  %5999 = or i32 %5956, %5932
  %6000 = and i32 %5999, %5980
  %6001 = and i32 %5956, %5932
  %6002 = or i32 %6000, %6001
  %6003 = add i32 %5998, %6002
  %6004 = add i32 %5992, %6003
  %6005 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5993, i32 %5993, i32 26) #1
  %6006 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5993, i32 %5993, i32 21) #1
  %6007 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %5993, i32 %5993, i32 7) #1
  %6008 = xor i32 %6005, %6006
  %6009 = xor i32 %6008, %6007
  %6010 = xor i32 %5969, %5945
  %6011 = and i32 %6010, %5993
  %6012 = xor i32 %6011, %5945
  %6013 = add i32 %6009, %6012
  %6014 = add i32 %6013, -2117940946
  %6015 = add i32 %6014, %5535
  %6016 = add i32 %5921, %6015
  %6017 = add i32 %5932, %6016
  %6018 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6004, i32 %6004, i32 30) #1
  %6019 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6004, i32 %6004, i32 19) #1
  %6020 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6004, i32 %6004, i32 10) #1
  %6021 = xor i32 %6018, %6019
  %6022 = xor i32 %6021, %6020
  %6023 = or i32 %5980, %5956
  %6024 = and i32 %6023, %6004
  %6025 = and i32 %5980, %5956
  %6026 = or i32 %6024, %6025
  %6027 = add i32 %6022, %6026
  %6028 = add i32 %6016, %6027
  %6029 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6017, i32 %6017, i32 26) #1
  %6030 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6017, i32 %6017, i32 21) #1
  %6031 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6017, i32 %6017, i32 7) #1
  %6032 = xor i32 %6029, %6030
  %6033 = xor i32 %6032, %6031
  %6034 = xor i32 %5993, %5969
  %6035 = and i32 %6034, %6017
  %6036 = xor i32 %6035, %5969
  %6037 = add i32 %6033, %6036
  %6038 = add i32 %6037, -1838011259
  %6039 = add i32 %6038, %5548
  %6040 = add i32 %5945, %6039
  %6041 = add i32 %5956, %6040
  %6042 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6028, i32 %6028, i32 30) #1
  %6043 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6028, i32 %6028, i32 19) #1
  %6044 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6028, i32 %6028, i32 10) #1
  %6045 = xor i32 %6042, %6043
  %6046 = xor i32 %6045, %6044
  %6047 = or i32 %6004, %5980
  %6048 = and i32 %6047, %6028
  %6049 = and i32 %6004, %5980
  %6050 = or i32 %6048, %6049
  %6051 = add i32 %6046, %6050
  %6052 = add i32 %6040, %6051
  %6053 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6041, i32 %6041, i32 26) #1
  %6054 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6041, i32 %6041, i32 21) #1
  %6055 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6041, i32 %6041, i32 7) #1
  %6056 = xor i32 %6053, %6054
  %6057 = xor i32 %6056, %6055
  %6058 = xor i32 %6017, %5993
  %6059 = and i32 %6058, %6041
  %6060 = xor i32 %6059, %5993
  %6061 = add i32 %6057, %6060
  %6062 = add i32 %6061, -1564481375
  %6063 = add i32 %6062, %5561
  %6064 = add i32 %5969, %6063
  %6065 = add i32 %5980, %6064
  %6066 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6052, i32 %6052, i32 30) #1
  %6067 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6052, i32 %6052, i32 19) #1
  %6068 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6052, i32 %6052, i32 10) #1
  %6069 = xor i32 %6066, %6067
  %6070 = xor i32 %6069, %6068
  %6071 = or i32 %6028, %6004
  %6072 = and i32 %6071, %6052
  %6073 = and i32 %6028, %6004
  %6074 = or i32 %6072, %6073
  %6075 = add i32 %6070, %6074
  %6076 = add i32 %6064, %6075
  %6077 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6065, i32 %6065, i32 26) #1
  %6078 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6065, i32 %6065, i32 21) #1
  %6079 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6065, i32 %6065, i32 7) #1
  %6080 = xor i32 %6077, %6078
  %6081 = xor i32 %6080, %6079
  %6082 = xor i32 %6041, %6017
  %6083 = and i32 %6082, %6065
  %6084 = xor i32 %6083, %6017
  %6085 = add i32 %6081, %6084
  %6086 = add i32 %6085, -1474664885
  %6087 = add i32 %6086, %5574
  %6088 = add i32 %5993, %6087
  %6089 = add i32 %6004, %6088
  %6090 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6076, i32 %6076, i32 30) #1
  %6091 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6076, i32 %6076, i32 19) #1
  %6092 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6076, i32 %6076, i32 10) #1
  %6093 = xor i32 %6090, %6091
  %6094 = xor i32 %6093, %6092
  %6095 = or i32 %6052, %6028
  %6096 = and i32 %6095, %6076
  %6097 = and i32 %6052, %6028
  %6098 = or i32 %6096, %6097
  %6099 = add i32 %6094, %6098
  %6100 = add i32 %6088, %6099
  %6101 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6089, i32 %6089, i32 26) #1
  %6102 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6089, i32 %6089, i32 21) #1
  %6103 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6089, i32 %6089, i32 7) #1
  %6104 = xor i32 %6101, %6102
  %6105 = xor i32 %6104, %6103
  %6106 = xor i32 %6065, %6041
  %6107 = and i32 %6106, %6089
  %6108 = xor i32 %6107, %6041
  %6109 = add i32 %6105, %6108
  %6110 = add i32 %6109, -1035236496
  %6111 = add i32 %6110, %5587
  %6112 = add i32 %6017, %6111
  %6113 = add i32 %6028, %6112
  %6114 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6100, i32 %6100, i32 30) #1
  %6115 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6100, i32 %6100, i32 19) #1
  %6116 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6100, i32 %6100, i32 10) #1
  %6117 = xor i32 %6114, %6115
  %6118 = xor i32 %6117, %6116
  %6119 = or i32 %6076, %6052
  %6120 = and i32 %6119, %6100
  %6121 = and i32 %6076, %6052
  %6122 = or i32 %6120, %6121
  %6123 = add i32 %6118, %6122
  %6124 = add i32 %6112, %6123
  %6125 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6113, i32 %6113, i32 26) #1
  %6126 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6113, i32 %6113, i32 21) #1
  %6127 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6113, i32 %6113, i32 7) #1
  %6128 = xor i32 %6125, %6126
  %6129 = xor i32 %6128, %6127
  %6130 = xor i32 %6089, %6065
  %6131 = and i32 %6130, %6113
  %6132 = xor i32 %6131, %6065
  %6133 = add i32 %6129, %6132
  %6134 = add i32 %6133, -949202525
  %6135 = add i32 %6134, %5600
  %6136 = add i32 %6041, %6135
  %6137 = add i32 %6052, %6136
  %6138 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6124, i32 %6124, i32 30) #1
  %6139 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6124, i32 %6124, i32 19) #1
  %6140 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6124, i32 %6124, i32 10) #1
  %6141 = xor i32 %6138, %6139
  %6142 = xor i32 %6141, %6140
  %6143 = or i32 %6100, %6076
  %6144 = and i32 %6143, %6124
  %6145 = and i32 %6100, %6076
  %6146 = or i32 %6144, %6145
  %6147 = add i32 %6142, %6146
  %6148 = add i32 %6136, %6147
  %6149 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6137, i32 %6137, i32 26) #1
  %6150 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6137, i32 %6137, i32 21) #1
  %6151 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6137, i32 %6137, i32 7) #1
  %6152 = xor i32 %6149, %6150
  %6153 = xor i32 %6152, %6151
  %6154 = xor i32 %6113, %6089
  %6155 = and i32 %6154, %6137
  %6156 = xor i32 %6155, %6089
  %6157 = add i32 %6153, %6156
  %6158 = add i32 %6157, -778901479
  %6159 = add i32 %6158, %5613
  %6160 = add i32 %6065, %6159
  %6161 = add i32 %6076, %6160
  %6162 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6148, i32 %6148, i32 30) #1
  %6163 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6148, i32 %6148, i32 19) #1
  %6164 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6148, i32 %6148, i32 10) #1
  %6165 = xor i32 %6162, %6163
  %6166 = xor i32 %6165, %6164
  %6167 = or i32 %6124, %6100
  %6168 = and i32 %6167, %6148
  %6169 = and i32 %6124, %6100
  %6170 = or i32 %6168, %6169
  %6171 = add i32 %6166, %6170
  %6172 = add i32 %6160, %6171
  %6173 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6161, i32 %6161, i32 26) #1
  %6174 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6161, i32 %6161, i32 21) #1
  %6175 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6161, i32 %6161, i32 7) #1
  %6176 = xor i32 %6173, %6174
  %6177 = xor i32 %6176, %6175
  %6178 = xor i32 %6137, %6113
  %6179 = and i32 %6178, %6161
  %6180 = xor i32 %6179, %6113
  %6181 = add i32 %6177, %6180
  %6182 = add i32 %6181, -694614492
  %6183 = add i32 %6182, %5626
  %6184 = add i32 %6089, %6183
  %6185 = add i32 %6100, %6184
  %6186 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6172, i32 %6172, i32 30) #1
  %6187 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6172, i32 %6172, i32 19) #1
  %6188 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6172, i32 %6172, i32 10) #1
  %6189 = xor i32 %6186, %6187
  %6190 = xor i32 %6189, %6188
  %6191 = or i32 %6148, %6124
  %6192 = and i32 %6191, %6172
  %6193 = and i32 %6148, %6124
  %6194 = or i32 %6192, %6193
  %6195 = add i32 %6190, %6194
  %6196 = add i32 %6184, %6195
  %6197 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6185, i32 %6185, i32 26) #1
  %6198 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6185, i32 %6185, i32 21) #1
  %6199 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6185, i32 %6185, i32 7) #1
  %6200 = xor i32 %6197, %6198
  %6201 = xor i32 %6200, %6199
  %6202 = xor i32 %6161, %6137
  %6203 = and i32 %6202, %6185
  %6204 = xor i32 %6203, %6137
  %6205 = add i32 %6201, %6204
  %6206 = add i32 %6205, -200395387
  %6207 = add i32 %6206, %5639
  %6208 = add i32 %6113, %6207
  %6209 = add i32 %6124, %6208
  %6210 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6196, i32 %6196, i32 30) #1
  %6211 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6196, i32 %6196, i32 19) #1
  %6212 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6196, i32 %6196, i32 10) #1
  %6213 = xor i32 %6210, %6211
  %6214 = xor i32 %6213, %6212
  %6215 = or i32 %6172, %6148
  %6216 = and i32 %6215, %6196
  %6217 = and i32 %6172, %6148
  %6218 = or i32 %6216, %6217
  %6219 = add i32 %6214, %6218
  %6220 = add i32 %6208, %6219
  %6221 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6209, i32 %6209, i32 26) #1
  %6222 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6209, i32 %6209, i32 21) #1
  %6223 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6209, i32 %6209, i32 7) #1
  %6224 = xor i32 %6221, %6222
  %6225 = xor i32 %6224, %6223
  %6226 = xor i32 %6185, %6161
  %6227 = and i32 %6226, %6209
  %6228 = xor i32 %6227, %6161
  %6229 = add i32 %6225, %6228
  %6230 = add i32 %6229, 275423344
  %6231 = add i32 %6230, %5652
  %6232 = add i32 %6137, %6231
  %6233 = add i32 %6148, %6232
  %6234 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6220, i32 %6220, i32 30) #1
  %6235 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6220, i32 %6220, i32 19) #1
  %6236 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6220, i32 %6220, i32 10) #1
  %6237 = xor i32 %6234, %6235
  %6238 = xor i32 %6237, %6236
  %6239 = or i32 %6196, %6172
  %6240 = and i32 %6239, %6220
  %6241 = and i32 %6196, %6172
  %6242 = or i32 %6240, %6241
  %6243 = add i32 %6238, %6242
  %6244 = add i32 %6232, %6243
  %6245 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6233, i32 %6233, i32 26) #1
  %6246 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6233, i32 %6233, i32 21) #1
  %6247 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6233, i32 %6233, i32 7) #1
  %6248 = xor i32 %6245, %6246
  %6249 = xor i32 %6248, %6247
  %6250 = xor i32 %6209, %6185
  %6251 = and i32 %6250, %6233
  %6252 = xor i32 %6251, %6185
  %6253 = add i32 %6249, %6252
  %6254 = add i32 %6253, 430227734
  %6255 = add i32 %6254, %5665
  %6256 = add i32 %6161, %6255
  %6257 = add i32 %6172, %6256
  %6258 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6244, i32 %6244, i32 30) #1
  %6259 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6244, i32 %6244, i32 19) #1
  %6260 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6244, i32 %6244, i32 10) #1
  %6261 = xor i32 %6258, %6259
  %6262 = xor i32 %6261, %6260
  %6263 = or i32 %6220, %6196
  %6264 = and i32 %6263, %6244
  %6265 = and i32 %6220, %6196
  %6266 = or i32 %6264, %6265
  %6267 = add i32 %6262, %6266
  %6268 = add i32 %6256, %6267
  %6269 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6257, i32 %6257, i32 26) #1
  %6270 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6257, i32 %6257, i32 21) #1
  %6271 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6257, i32 %6257, i32 7) #1
  %6272 = xor i32 %6269, %6270
  %6273 = xor i32 %6272, %6271
  %6274 = xor i32 %6233, %6209
  %6275 = and i32 %6274, %6257
  %6276 = xor i32 %6275, %6209
  %6277 = add i32 %6273, %6276
  %6278 = add i32 %6277, 506948616
  %6279 = add i32 %6278, %5678
  %6280 = add i32 %6185, %6279
  %6281 = add i32 %6196, %6280
  %6282 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6268, i32 %6268, i32 30) #1
  %6283 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6268, i32 %6268, i32 19) #1
  %6284 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6268, i32 %6268, i32 10) #1
  %6285 = xor i32 %6282, %6283
  %6286 = xor i32 %6285, %6284
  %6287 = or i32 %6244, %6220
  %6288 = and i32 %6287, %6268
  %6289 = and i32 %6244, %6220
  %6290 = or i32 %6288, %6289
  %6291 = add i32 %6286, %6290
  %6292 = add i32 %6280, %6291
  %6293 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6281, i32 %6281, i32 26) #1
  %6294 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6281, i32 %6281, i32 21) #1
  %6295 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6281, i32 %6281, i32 7) #1
  %6296 = xor i32 %6293, %6294
  %6297 = xor i32 %6296, %6295
  %6298 = xor i32 %6257, %6233
  %6299 = and i32 %6298, %6281
  %6300 = xor i32 %6299, %6233
  %6301 = add i32 %6297, %6300
  %6302 = add i32 %6301, 659060556
  %6303 = add i32 %6302, %5691
  %6304 = add i32 %6209, %6303
  %6305 = add i32 %6220, %6304
  %6306 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6292, i32 %6292, i32 30) #1
  %6307 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6292, i32 %6292, i32 19) #1
  %6308 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6292, i32 %6292, i32 10) #1
  %6309 = xor i32 %6306, %6307
  %6310 = xor i32 %6309, %6308
  %6311 = or i32 %6268, %6244
  %6312 = and i32 %6311, %6292
  %6313 = and i32 %6268, %6244
  %6314 = or i32 %6312, %6313
  %6315 = add i32 %6310, %6314
  %6316 = add i32 %6304, %6315
  %6317 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6305, i32 %6305, i32 26) #1
  %6318 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6305, i32 %6305, i32 21) #1
  %6319 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6305, i32 %6305, i32 7) #1
  %6320 = xor i32 %6317, %6318
  %6321 = xor i32 %6320, %6319
  %6322 = xor i32 %6281, %6257
  %6323 = and i32 %6322, %6305
  %6324 = xor i32 %6323, %6257
  %6325 = add i32 %6321, %6324
  %6326 = add i32 %6325, 883997877
  %6327 = add i32 %6326, %5704
  %6328 = add i32 %6233, %6327
  %6329 = add i32 %6244, %6328
  %6330 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6316, i32 %6316, i32 30) #1
  %6331 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6316, i32 %6316, i32 19) #1
  %6332 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6316, i32 %6316, i32 10) #1
  %6333 = xor i32 %6330, %6331
  %6334 = xor i32 %6333, %6332
  %6335 = or i32 %6292, %6268
  %6336 = and i32 %6335, %6316
  %6337 = and i32 %6292, %6268
  %6338 = or i32 %6336, %6337
  %6339 = add i32 %6334, %6338
  %6340 = add i32 %6328, %6339
  %6341 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6329, i32 %6329, i32 26) #1
  %6342 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6329, i32 %6329, i32 21) #1
  %6343 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6329, i32 %6329, i32 7) #1
  %6344 = xor i32 %6341, %6342
  %6345 = xor i32 %6344, %6343
  %6346 = xor i32 %6305, %6281
  %6347 = and i32 %6346, %6329
  %6348 = xor i32 %6347, %6281
  %6349 = add i32 %6345, %6348
  %6350 = add i32 %6349, 958139571
  %6351 = add i32 %6350, %5717
  %6352 = add i32 %6257, %6351
  %6353 = add i32 %6268, %6352
  %6354 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6340, i32 %6340, i32 30) #1
  %6355 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6340, i32 %6340, i32 19) #1
  %6356 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6340, i32 %6340, i32 10) #1
  %6357 = xor i32 %6354, %6355
  %6358 = xor i32 %6357, %6356
  %6359 = or i32 %6316, %6292
  %6360 = and i32 %6359, %6340
  %6361 = and i32 %6316, %6292
  %6362 = or i32 %6360, %6361
  %6363 = add i32 %6358, %6362
  %6364 = add i32 %6352, %6363
  %6365 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6353, i32 %6353, i32 26) #1
  %6366 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6353, i32 %6353, i32 21) #1
  %6367 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6353, i32 %6353, i32 7) #1
  %6368 = xor i32 %6365, %6366
  %6369 = xor i32 %6368, %6367
  %6370 = xor i32 %6329, %6305
  %6371 = and i32 %6370, %6353
  %6372 = xor i32 %6371, %6305
  %6373 = add i32 %6369, %6372
  %6374 = add i32 %6373, 1322822218
  %6375 = add i32 %6374, %5730
  %6376 = add i32 %6281, %6375
  %6377 = add i32 %6292, %6376
  %6378 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6364, i32 %6364, i32 30) #1
  %6379 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6364, i32 %6364, i32 19) #1
  %6380 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6364, i32 %6364, i32 10) #1
  %6381 = xor i32 %6378, %6379
  %6382 = xor i32 %6381, %6380
  %6383 = or i32 %6340, %6316
  %6384 = and i32 %6383, %6364
  %6385 = and i32 %6340, %6316
  %6386 = or i32 %6384, %6385
  %6387 = add i32 %6382, %6386
  %6388 = add i32 %6376, %6387
  %6389 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6377, i32 %6377, i32 26) #1
  %6390 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6377, i32 %6377, i32 21) #1
  %6391 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6377, i32 %6377, i32 7) #1
  %6392 = xor i32 %6389, %6390
  %6393 = xor i32 %6392, %6391
  %6394 = xor i32 %6353, %6329
  %6395 = and i32 %6394, %6377
  %6396 = xor i32 %6395, %6329
  %6397 = add i32 %6393, %6396
  %6398 = add i32 %6397, 1537002063
  %6399 = add i32 %6398, %5743
  %6400 = add i32 %6305, %6399
  %6401 = add i32 %6316, %6400
  %6402 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6388, i32 %6388, i32 30) #1
  %6403 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6388, i32 %6388, i32 19) #1
  %6404 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6388, i32 %6388, i32 10) #1
  %6405 = xor i32 %6402, %6403
  %6406 = xor i32 %6405, %6404
  %6407 = or i32 %6364, %6340
  %6408 = and i32 %6407, %6388
  %6409 = and i32 %6364, %6340
  %6410 = or i32 %6408, %6409
  %6411 = add i32 %6406, %6410
  %6412 = add i32 %6400, %6411
  %6413 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6401, i32 %6401, i32 26) #1
  %6414 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6401, i32 %6401, i32 21) #1
  %6415 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6401, i32 %6401, i32 7) #1
  %6416 = xor i32 %6413, %6414
  %6417 = xor i32 %6416, %6415
  %6418 = xor i32 %6377, %6353
  %6419 = and i32 %6418, %6401
  %6420 = xor i32 %6419, %6353
  %6421 = add i32 %6417, %6420
  %6422 = add i32 %6421, 1747873779
  %6423 = add i32 %6422, %5756
  %6424 = add i32 %6329, %6423
  %6425 = add i32 %6340, %6424
  %6426 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6412, i32 %6412, i32 30) #1
  %6427 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6412, i32 %6412, i32 19) #1
  %6428 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6412, i32 %6412, i32 10) #1
  %6429 = xor i32 %6426, %6427
  %6430 = xor i32 %6429, %6428
  %6431 = or i32 %6388, %6364
  %6432 = and i32 %6431, %6412
  %6433 = and i32 %6388, %6364
  %6434 = or i32 %6432, %6433
  %6435 = add i32 %6430, %6434
  %6436 = add i32 %6424, %6435
  %6437 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6425, i32 %6425, i32 26) #1
  %6438 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6425, i32 %6425, i32 21) #1
  %6439 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6425, i32 %6425, i32 7) #1
  %6440 = xor i32 %6437, %6438
  %6441 = xor i32 %6440, %6439
  %6442 = xor i32 %6401, %6377
  %6443 = and i32 %6442, %6425
  %6444 = xor i32 %6443, %6377
  %6445 = add i32 %6441, %6444
  %6446 = add i32 %6445, 1955562222
  %6447 = add i32 %6446, %5769
  %6448 = add i32 %6353, %6447
  %6449 = add i32 %6364, %6448
  %6450 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6436, i32 %6436, i32 30) #1
  %6451 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6436, i32 %6436, i32 19) #1
  %6452 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6436, i32 %6436, i32 10) #1
  %6453 = xor i32 %6450, %6451
  %6454 = xor i32 %6453, %6452
  %6455 = or i32 %6412, %6388
  %6456 = and i32 %6455, %6436
  %6457 = and i32 %6412, %6388
  %6458 = or i32 %6456, %6457
  %6459 = add i32 %6454, %6458
  %6460 = add i32 %6448, %6459
  %6461 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6449, i32 %6449, i32 26) #1
  %6462 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6449, i32 %6449, i32 21) #1
  %6463 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6449, i32 %6449, i32 7) #1
  %6464 = xor i32 %6461, %6462
  %6465 = xor i32 %6464, %6463
  %6466 = xor i32 %6425, %6401
  %6467 = and i32 %6466, %6449
  %6468 = xor i32 %6467, %6401
  %6469 = add i32 %6465, %6468
  %6470 = add i32 %6469, 2024104815
  %6471 = add i32 %6470, %5782
  %6472 = add i32 %6377, %6471
  %6473 = add i32 %6388, %6472
  %6474 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6460, i32 %6460, i32 30) #1
  %6475 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6460, i32 %6460, i32 19) #1
  %6476 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6460, i32 %6460, i32 10) #1
  %6477 = xor i32 %6474, %6475
  %6478 = xor i32 %6477, %6476
  %6479 = or i32 %6436, %6412
  %6480 = and i32 %6479, %6460
  %6481 = and i32 %6436, %6412
  %6482 = or i32 %6480, %6481
  %6483 = add i32 %6478, %6482
  %6484 = add i32 %6472, %6483
  %6485 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6473, i32 %6473, i32 26) #1
  %6486 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6473, i32 %6473, i32 21) #1
  %6487 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6473, i32 %6473, i32 7) #1
  %6488 = xor i32 %6485, %6486
  %6489 = xor i32 %6488, %6487
  %6490 = xor i32 %6449, %6425
  %6491 = and i32 %6490, %6473
  %6492 = xor i32 %6491, %6425
  %6493 = add i32 %6489, %6492
  %6494 = add i32 %6493, -2067236844
  %6495 = add i32 %6494, %5795
  %6496 = add i32 %6401, %6495
  %6497 = add i32 %6412, %6496
  %6498 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6484, i32 %6484, i32 30) #1
  %6499 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6484, i32 %6484, i32 19) #1
  %6500 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6484, i32 %6484, i32 10) #1
  %6501 = xor i32 %6498, %6499
  %6502 = xor i32 %6501, %6500
  %6503 = or i32 %6460, %6436
  %6504 = and i32 %6503, %6484
  %6505 = and i32 %6460, %6436
  %6506 = or i32 %6504, %6505
  %6507 = add i32 %6502, %6506
  %6508 = add i32 %6496, %6507
  %6509 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6497, i32 %6497, i32 26) #1
  %6510 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6497, i32 %6497, i32 21) #1
  %6511 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6497, i32 %6497, i32 7) #1
  %6512 = xor i32 %6509, %6510
  %6513 = xor i32 %6512, %6511
  %6514 = xor i32 %6473, %6449
  %6515 = and i32 %6514, %6497
  %6516 = xor i32 %6515, %6449
  %6517 = add i32 %6513, %6516
  %6518 = add i32 %6517, -1933114872
  %6519 = add i32 %6518, %5808
  %6520 = add i32 %6425, %6519
  %6521 = add i32 %6436, %6520
  %6522 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6508, i32 %6508, i32 30) #1
  %6523 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6508, i32 %6508, i32 19) #1
  %6524 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6508, i32 %6508, i32 10) #1
  %6525 = xor i32 %6522, %6523
  %6526 = xor i32 %6525, %6524
  %6527 = or i32 %6484, %6460
  %6528 = and i32 %6527, %6508
  %6529 = and i32 %6484, %6460
  %6530 = or i32 %6528, %6529
  %6531 = add i32 %6526, %6530
  %6532 = add i32 %6520, %6531
  %6533 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6521, i32 %6521, i32 26) #1
  %6534 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6521, i32 %6521, i32 21) #1
  %6535 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6521, i32 %6521, i32 7) #1
  %6536 = xor i32 %6533, %6534
  %6537 = xor i32 %6536, %6535
  %6538 = xor i32 %6497, %6473
  %6539 = and i32 %6538, %6521
  %6540 = xor i32 %6539, %6473
  %6541 = add i32 %6537, %6540
  %6542 = add i32 %6541, -1866530822
  %6543 = add i32 %6542, %5821
  %6544 = add i32 %6449, %6543
  %6545 = add i32 %6460, %6544
  %6546 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6532, i32 %6532, i32 30) #1
  %6547 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6532, i32 %6532, i32 19) #1
  %6548 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6532, i32 %6532, i32 10) #1
  %6549 = xor i32 %6546, %6547
  %6550 = xor i32 %6549, %6548
  %6551 = or i32 %6508, %6484
  %6552 = and i32 %6551, %6532
  %6553 = and i32 %6508, %6484
  %6554 = or i32 %6552, %6553
  %6555 = add i32 %6550, %6554
  %6556 = add i32 %6544, %6555
  %6557 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6545, i32 %6545, i32 26) #1
  %6558 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6545, i32 %6545, i32 21) #1
  %6559 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6545, i32 %6545, i32 7) #1
  %6560 = xor i32 %6557, %6558
  %6561 = xor i32 %6560, %6559
  %6562 = xor i32 %6521, %6497
  %6563 = and i32 %6562, %6545
  %6564 = xor i32 %6563, %6497
  %6565 = add i32 %6561, %6564
  %6566 = add i32 %6565, -1538233109
  %6567 = add i32 %6566, %5834
  %6568 = add i32 %6473, %6567
  %6569 = add i32 %6484, %6568
  %6570 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6556, i32 %6556, i32 30) #1
  %6571 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6556, i32 %6556, i32 19) #1
  %6572 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6556, i32 %6556, i32 10) #1
  %6573 = xor i32 %6570, %6571
  %6574 = xor i32 %6573, %6572
  %6575 = or i32 %6532, %6508
  %6576 = and i32 %6575, %6556
  %6577 = and i32 %6532, %6508
  %6578 = or i32 %6576, %6577
  %6579 = add i32 %6574, %6578
  %6580 = add i32 %6568, %6579
  %6581 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6569, i32 %6569, i32 26) #1
  %6582 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6569, i32 %6569, i32 21) #1
  %6583 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6569, i32 %6569, i32 7) #1
  %6584 = xor i32 %6581, %6582
  %6585 = xor i32 %6584, %6583
  %6586 = xor i32 %6545, %6521
  %6587 = and i32 %6586, %6569
  %6588 = xor i32 %6587, %6521
  %6589 = add i32 %6585, %6588
  %6590 = add i32 %6589, -1090935817
  %6591 = add i32 %6590, %5847
  %6592 = add i32 %6497, %6591
  %6593 = add i32 %6508, %6592
  %6594 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6580, i32 %6580, i32 30) #1
  %6595 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6580, i32 %6580, i32 19) #1
  %6596 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6580, i32 %6580, i32 10) #1
  %6597 = xor i32 %6594, %6595
  %6598 = xor i32 %6597, %6596
  %6599 = or i32 %6556, %6532
  %6600 = and i32 %6599, %6580
  %6601 = and i32 %6556, %6532
  %6602 = or i32 %6600, %6601
  %6603 = add i32 %6598, %6602
  %6604 = add i32 %6592, %6603
  %6605 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6593, i32 %6593, i32 26) #1
  %6606 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6593, i32 %6593, i32 21) #1
  %6607 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6593, i32 %6593, i32 7) #1
  %6608 = xor i32 %6605, %6606
  %6609 = xor i32 %6608, %6607
  %6610 = xor i32 %6569, %6545
  %6611 = and i32 %6610, %6593
  %6612 = xor i32 %6611, %6545
  %6613 = add i32 %6609, %6612
  %6614 = add i32 %6613, -965641998
  %6615 = add i32 %6614, %5860
  %6616 = add i32 %6521, %6615
  %6617 = add i32 %6532, %6616
  %6618 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6604, i32 %6604, i32 30) #1
  %6619 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6604, i32 %6604, i32 19) #1
  %6620 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6604, i32 %6604, i32 10) #1
  %6621 = xor i32 %6618, %6619
  %6622 = xor i32 %6621, %6620
  %6623 = or i32 %6580, %6556
  %6624 = and i32 %6623, %6604
  %6625 = and i32 %6580, %6556
  %6626 = or i32 %6624, %6625
  %6627 = add i32 %6622, %6626
  %6628 = add i32 %6616, %6627
  %6629 = add i32 %6628, 1779033703
  %6630 = add i32 %6604, -1150833019
  %6631 = add i32 %6580, 1013904242
  %6632 = add i32 %6556, -1521486534
  %6633 = add i32 %6617, 1359893119
  %6634 = add i32 %6593, -1694144372
  %6635 = add i32 %6569, 528734635
  %6636 = add i32 %6545, 1541459225
  %6637 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6635, i32 %6635, i32 15) #1
  %6638 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6635, i32 %6635, i32 13) #1
  %6639 = lshr i32 %6635, 10
  %6640 = xor i32 %6637, %6638
  %6641 = xor i32 %6640, %6639
  %6642 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6636, i32 %6636, i32 15) #1
  %6643 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6636, i32 %6636, i32 13) #1
  %6644 = lshr i32 %6636, 10
  %6645 = xor i32 %6642, %6643
  %6646 = xor i32 %6645, %6644
  %6647 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6629, i32 %6629, i32 25) #1
  %6648 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6629, i32 %6629, i32 14) #1
  %6649 = lshr i32 %6629, 3
  %6650 = xor i32 %6647, %6648
  %6651 = xor i32 %6650, %6649
  %6652 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6630, i32 %6630, i32 25) #1
  %6653 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6630, i32 %6630, i32 14) #1
  %6654 = lshr i32 %6630, 3
  %6655 = xor i32 %6652, %6653
  %6656 = xor i32 %6655, %6654
  %6657 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6631, i32 %6631, i32 25) #1
  %6658 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6631, i32 %6631, i32 14) #1
  %6659 = lshr i32 %6631, 3
  %6660 = xor i32 %6657, %6658
  %6661 = xor i32 %6660, %6659
  %6662 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6632, i32 %6632, i32 25) #1
  %6663 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6632, i32 %6632, i32 14) #1
  %6664 = lshr i32 %6632, 3
  %6665 = xor i32 %6662, %6663
  %6666 = xor i32 %6665, %6664
  %6667 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6633, i32 %6633, i32 25) #1
  %6668 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6633, i32 %6633, i32 14) #1
  %6669 = lshr i32 %6633, 3
  %6670 = xor i32 %6667, %6668
  %6671 = xor i32 %6670, %6669
  %6672 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6634, i32 %6634, i32 25) #1
  %6673 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6634, i32 %6634, i32 14) #1
  %6674 = lshr i32 %6634, 3
  %6675 = xor i32 %6672, %6673
  %6676 = xor i32 %6675, %6674
  %6677 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6635, i32 %6635, i32 25) #1
  %6678 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6635, i32 %6635, i32 14) #1
  %6679 = lshr i32 %6635, 3
  %6680 = xor i32 %6677, %6678
  %6681 = xor i32 %6680, %6679
  %6682 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6636, i32 %6636, i32 25) #1
  %6683 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6636, i32 %6636, i32 14) #1
  %6684 = lshr i32 %6636, 3
  %6685 = xor i32 %6682, %6683
  %6686 = xor i32 %6685, %6684
  br label %6687

6687:                                             ; preds = %6719, %4562
  %6688 = phi i32 [ undef, %4562 ], [ %7880, %6719 ]
  %6689 = phi i32 [ undef, %4562 ], [ %7867, %6719 ]
  %6690 = phi i32 [ undef, %4562 ], [ %7854, %6719 ]
  %6691 = phi i32 [ undef, %4562 ], [ %7841, %6719 ]
  %6692 = phi i32 [ undef, %4562 ], [ %7828, %6719 ]
  %6693 = phi i32 [ undef, %4562 ], [ %7815, %6719 ]
  %6694 = phi i32 [ undef, %4562 ], [ %7802, %6719 ]
  %6695 = phi i32 [ undef, %4562 ], [ %7789, %6719 ]
  %6696 = phi i32 [ undef, %4562 ], [ %7776, %6719 ]
  %6697 = phi i32 [ undef, %4562 ], [ %7763, %6719 ]
  %6698 = phi i32 [ undef, %4562 ], [ %7750, %6719 ]
  %6699 = phi i32 [ undef, %4562 ], [ %7737, %6719 ]
  %6700 = phi i32 [ undef, %4562 ], [ %7724, %6719 ]
  %6701 = phi i32 [ undef, %4562 ], [ %7711, %6719 ]
  %6702 = phi i32 [ undef, %4562 ], [ %7698, %6719 ]
  %6703 = phi i32 [ undef, %4562 ], [ %7685, %6719 ]
  %6704 = phi i32 [ undef, %4562 ], [ %7672, %6719 ]
  %6705 = phi i32 [ undef, %4562 ], [ %7659, %6719 ]
  %6706 = phi i32 [ undef, %4562 ], [ %7646, %6719 ]
  %6707 = phi i32 [ undef, %4562 ], [ %7633, %6719 ]
  %6708 = phi i32 [ 0, %4562 ], [ %10589, %6719 ]
  %6709 = phi i32 [ 0, %4562 ], [ %10590, %6719 ]
  %6710 = phi i32 [ 0, %4562 ], [ %10591, %6719 ]
  %6711 = phi i32 [ 0, %4562 ], [ %10592, %6719 ]
  %6712 = phi i32 [ 0, %4562 ], [ %10593, %6719 ]
  %6713 = phi i32 [ 0, %4562 ], [ %10594, %6719 ]
  %6714 = phi i32 [ 0, %4562 ], [ %10595, %6719 ]
  %6715 = phi i32 [ 0, %4562 ], [ %10596, %6719 ]
  %6716 = phi i32 [ 0, %4562 ], [ %10598, %6719 ]
  %6717 = phi i32 [ 0, %4562 ], [ %10597, %6719 ]
  %6718 = icmp ult i32 %6716, 1048576
  br i1 %6718, label %6719, label %10599

6719:                                             ; preds = %6687
  %6720 = add i32 %6708, %6630
  %6721 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6709, i32 %6709, i32 25) #1
  %6722 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6709, i32 %6709, i32 14) #1
  %6723 = lshr i32 %6709, 3
  %6724 = xor i32 %6721, %6722
  %6725 = xor i32 %6724, %6723
  %6726 = add i32 %6720, %6725
  %6727 = add i32 %6726, %6641
  %6728 = add i32 %6709, %6631
  %6729 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6710, i32 %6710, i32 25) #1
  %6730 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6710, i32 %6710, i32 14) #1
  %6731 = lshr i32 %6710, 3
  %6732 = xor i32 %6729, %6730
  %6733 = xor i32 %6732, %6731
  %6734 = add i32 %6728, %6733
  %6735 = add i32 %6734, %6646
  %6736 = add i32 %6710, %6632
  %6737 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6711, i32 %6711, i32 25) #1
  %6738 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6711, i32 %6711, i32 14) #1
  %6739 = lshr i32 %6711, 3
  %6740 = xor i32 %6737, %6738
  %6741 = xor i32 %6740, %6739
  %6742 = add i32 %6736, %6741
  %6743 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6727, i32 %6727, i32 15) #1
  %6744 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6727, i32 %6727, i32 13) #1
  %6745 = lshr i32 %6727, 10
  %6746 = xor i32 %6743, %6744
  %6747 = xor i32 %6746, %6745
  %6748 = add i32 %6742, %6747
  %6749 = add i32 %6711, %6633
  %6750 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6712, i32 %6712, i32 25) #1
  %6751 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6712, i32 %6712, i32 14) #1
  %6752 = lshr i32 %6712, 3
  %6753 = xor i32 %6750, %6751
  %6754 = xor i32 %6753, %6752
  %6755 = add i32 %6749, %6754
  %6756 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6735, i32 %6735, i32 15) #1
  %6757 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6735, i32 %6735, i32 13) #1
  %6758 = lshr i32 %6735, 10
  %6759 = xor i32 %6756, %6757
  %6760 = xor i32 %6759, %6758
  %6761 = add i32 %6755, %6760
  %6762 = add i32 %6712, %6634
  %6763 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6713, i32 %6713, i32 25) #1
  %6764 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6713, i32 %6713, i32 14) #1
  %6765 = lshr i32 %6713, 3
  %6766 = xor i32 %6763, %6764
  %6767 = xor i32 %6766, %6765
  %6768 = add i32 %6762, %6767
  %6769 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6748, i32 %6748, i32 15) #1
  %6770 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6748, i32 %6748, i32 13) #1
  %6771 = lshr i32 %6748, 10
  %6772 = xor i32 %6769, %6770
  %6773 = xor i32 %6772, %6771
  %6774 = add i32 %6768, %6773
  %6775 = add i32 %6713, %6635
  %6776 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6714, i32 %6714, i32 25) #1
  %6777 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6714, i32 %6714, i32 14) #1
  %6778 = lshr i32 %6714, 3
  %6779 = xor i32 %6776, %6777
  %6780 = xor i32 %6779, %6778
  %6781 = add i32 %6775, %6780
  %6782 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6761, i32 %6761, i32 15) #1
  %6783 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6761, i32 %6761, i32 13) #1
  %6784 = lshr i32 %6761, 10
  %6785 = xor i32 %6782, %6783
  %6786 = xor i32 %6785, %6784
  %6787 = add i32 %6781, %6786
  %6788 = add i32 %6714, %6636
  %6789 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6715, i32 %6715, i32 25) #1
  %6790 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6715, i32 %6715, i32 14) #1
  %6791 = lshr i32 %6715, 3
  %6792 = xor i32 %6789, %6790
  %6793 = xor i32 %6792, %6791
  %6794 = add i32 %6788, %6793
  %6795 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6774, i32 %6774, i32 15) #1
  %6796 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6774, i32 %6774, i32 13) #1
  %6797 = lshr i32 %6774, 10
  %6798 = xor i32 %6795, %6796
  %6799 = xor i32 %6798, %6797
  %6800 = add i32 %6794, %6799
  %6801 = add i32 %6715, %6727
  %6802 = add i32 %6801, %6651
  %6803 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6787, i32 %6787, i32 15) #1
  %6804 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6787, i32 %6787, i32 13) #1
  %6805 = lshr i32 %6787, 10
  %6806 = xor i32 %6803, %6804
  %6807 = xor i32 %6806, %6805
  %6808 = add i32 %6802, %6807
  %6809 = add i32 %6629, %6735
  %6810 = add i32 %6809, %6656
  %6811 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6800, i32 %6800, i32 15) #1
  %6812 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6800, i32 %6800, i32 13) #1
  %6813 = lshr i32 %6800, 10
  %6814 = xor i32 %6811, %6812
  %6815 = xor i32 %6814, %6813
  %6816 = add i32 %6810, %6815
  %6817 = add i32 %6630, %6748
  %6818 = add i32 %6817, %6661
  %6819 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6808, i32 %6808, i32 15) #1
  %6820 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6808, i32 %6808, i32 13) #1
  %6821 = lshr i32 %6808, 10
  %6822 = xor i32 %6819, %6820
  %6823 = xor i32 %6822, %6821
  %6824 = add i32 %6818, %6823
  %6825 = add i32 %6631, %6761
  %6826 = add i32 %6825, %6666
  %6827 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6816, i32 %6816, i32 15) #1
  %6828 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6816, i32 %6816, i32 13) #1
  %6829 = lshr i32 %6816, 10
  %6830 = xor i32 %6827, %6828
  %6831 = xor i32 %6830, %6829
  %6832 = add i32 %6826, %6831
  %6833 = add i32 %6632, %6774
  %6834 = add i32 %6833, %6671
  %6835 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6824, i32 %6824, i32 15) #1
  %6836 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6824, i32 %6824, i32 13) #1
  %6837 = lshr i32 %6824, 10
  %6838 = xor i32 %6835, %6836
  %6839 = xor i32 %6838, %6837
  %6840 = add i32 %6834, %6839
  %6841 = add i32 %6633, %6787
  %6842 = add i32 %6841, %6676
  %6843 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6832, i32 %6832, i32 15) #1
  %6844 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6832, i32 %6832, i32 13) #1
  %6845 = lshr i32 %6832, 10
  %6846 = xor i32 %6843, %6844
  %6847 = xor i32 %6846, %6845
  %6848 = add i32 %6842, %6847
  %6849 = add i32 %6634, %6800
  %6850 = add i32 %6849, %6681
  %6851 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6840, i32 %6840, i32 15) #1
  %6852 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6840, i32 %6840, i32 13) #1
  %6853 = lshr i32 %6840, 10
  %6854 = xor i32 %6851, %6852
  %6855 = xor i32 %6854, %6853
  %6856 = add i32 %6850, %6855
  %6857 = add i32 %6635, %6808
  %6858 = add i32 %6857, %6686
  %6859 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6848, i32 %6848, i32 15) #1
  %6860 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6848, i32 %6848, i32 13) #1
  %6861 = lshr i32 %6848, 10
  %6862 = xor i32 %6859, %6860
  %6863 = xor i32 %6862, %6861
  %6864 = add i32 %6858, %6863
  %6865 = add i32 %6636, %6816
  %6866 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6727, i32 %6727, i32 25) #1
  %6867 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6727, i32 %6727, i32 14) #1
  %6868 = lshr i32 %6727, 3
  %6869 = xor i32 %6866, %6867
  %6870 = xor i32 %6869, %6868
  %6871 = add i32 %6865, %6870
  %6872 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6856, i32 %6856, i32 15) #1
  %6873 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6856, i32 %6856, i32 13) #1
  %6874 = lshr i32 %6856, 10
  %6875 = xor i32 %6872, %6873
  %6876 = xor i32 %6875, %6874
  %6877 = add i32 %6871, %6876
  %6878 = add i32 %6708, -1731730782
  %6879 = add i32 %6708, -66549683
  %6880 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6878, i32 %6878, i32 26) #1
  %6881 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6878, i32 %6878, i32 21) #1
  %6882 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6878, i32 %6878, i32 7) #1
  %6883 = xor i32 %6880, %6881
  %6884 = xor i32 %6883, %6882
  %6885 = and i32 %6878, -905233677
  %6886 = xor i32 %6885, -1694144372
  %6887 = add i32 %6884, %6886
  %6888 = add i32 %6887, 1899447441
  %6889 = add i32 %6888, %6709
  %6890 = add i32 %6889, 528734635
  %6891 = add i32 %6889, 1542638877
  %6892 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6879, i32 %6879, i32 30) #1
  %6893 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6879, i32 %6879, i32 19) #1
  %6894 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6879, i32 %6879, i32 10) #1
  %6895 = xor i32 %6892, %6893
  %6896 = xor i32 %6895, %6894
  %6897 = and i32 %6879, -781301534
  %6898 = or i32 %6897, 704751109
  %6899 = add i32 %6896, %6898
  %6900 = add i32 %6890, %6899
  %6901 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6891, i32 %6891, i32 26) #1
  %6902 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6891, i32 %6891, i32 21) #1
  %6903 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6891, i32 %6891, i32 7) #1
  %6904 = xor i32 %6901, %6902
  %6905 = xor i32 %6904, %6903
  %6906 = xor i32 %6878, 1359893119
  %6907 = and i32 %6906, %6891
  %6908 = xor i32 %6907, 1359893119
  %6909 = add i32 %6905, %6908
  %6910 = add i32 %6909, -1245643825
  %6911 = add i32 %6910, %6710
  %6912 = add i32 %6911, -1694144372
  %6913 = add i32 %6911, 1449989905
  %6914 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6900, i32 %6900, i32 30) #1
  %6915 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6900, i32 %6900, i32 19) #1
  %6916 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6900, i32 %6900, i32 10) #1
  %6917 = xor i32 %6914, %6915
  %6918 = xor i32 %6917, %6916
  %6919 = or i32 %6879, 1779033703
  %6920 = and i32 %6919, %6900
  %6921 = and i32 %6879, 1779033703
  %6922 = or i32 %6920, %6921
  %6923 = add i32 %6918, %6922
  %6924 = add i32 %6912, %6923
  %6925 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6913, i32 %6913, i32 26) #1
  %6926 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6913, i32 %6913, i32 21) #1
  %6927 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6913, i32 %6913, i32 7) #1
  %6928 = xor i32 %6925, %6926
  %6929 = xor i32 %6928, %6927
  %6930 = xor i32 %6891, %6878
  %6931 = and i32 %6930, %6913
  %6932 = xor i32 %6931, %6878
  %6933 = add i32 %6929, %6932
  %6934 = add i32 %6933, -373957723
  %6935 = add i32 %6934, %6711
  %6936 = add i32 %6935, 1359893119
  %6937 = add i32 %6935, -1156040474
  %6938 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6924, i32 %6924, i32 30) #1
  %6939 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6924, i32 %6924, i32 19) #1
  %6940 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6924, i32 %6924, i32 10) #1
  %6941 = xor i32 %6938, %6939
  %6942 = xor i32 %6941, %6940
  %6943 = or i32 %6900, %6879
  %6944 = and i32 %6943, %6924
  %6945 = and i32 %6900, %6879
  %6946 = or i32 %6944, %6945
  %6947 = add i32 %6942, %6946
  %6948 = add i32 %6936, %6947
  %6949 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6937, i32 %6937, i32 26) #1
  %6950 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6937, i32 %6937, i32 21) #1
  %6951 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6937, i32 %6937, i32 7) #1
  %6952 = xor i32 %6949, %6950
  %6953 = xor i32 %6952, %6951
  %6954 = xor i32 %6913, %6891
  %6955 = and i32 %6954, %6937
  %6956 = xor i32 %6955, %6891
  %6957 = add i32 %6953, %6956
  %6958 = add i32 %6957, 961987163
  %6959 = add i32 %6958, %6712
  %6960 = add i32 %6878, %6959
  %6961 = add i32 %6879, %6960
  %6962 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6948, i32 %6948, i32 30) #1
  %6963 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6948, i32 %6948, i32 19) #1
  %6964 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6948, i32 %6948, i32 10) #1
  %6965 = xor i32 %6962, %6963
  %6966 = xor i32 %6965, %6964
  %6967 = or i32 %6924, %6900
  %6968 = and i32 %6967, %6948
  %6969 = and i32 %6924, %6900
  %6970 = or i32 %6968, %6969
  %6971 = add i32 %6966, %6970
  %6972 = add i32 %6960, %6971
  %6973 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6961, i32 %6961, i32 26) #1
  %6974 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6961, i32 %6961, i32 21) #1
  %6975 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6961, i32 %6961, i32 7) #1
  %6976 = xor i32 %6973, %6974
  %6977 = xor i32 %6976, %6975
  %6978 = xor i32 %6937, %6913
  %6979 = and i32 %6978, %6961
  %6980 = xor i32 %6979, %6913
  %6981 = add i32 %6977, %6980
  %6982 = add i32 %6981, 1508970993
  %6983 = add i32 %6982, %6713
  %6984 = add i32 %6891, %6983
  %6985 = add i32 %6900, %6984
  %6986 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6972, i32 %6972, i32 30) #1
  %6987 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6972, i32 %6972, i32 19) #1
  %6988 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6972, i32 %6972, i32 10) #1
  %6989 = xor i32 %6986, %6987
  %6990 = xor i32 %6989, %6988
  %6991 = or i32 %6948, %6924
  %6992 = and i32 %6991, %6972
  %6993 = and i32 %6948, %6924
  %6994 = or i32 %6992, %6993
  %6995 = add i32 %6990, %6994
  %6996 = add i32 %6984, %6995
  %6997 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6985, i32 %6985, i32 26) #1
  %6998 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6985, i32 %6985, i32 21) #1
  %6999 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6985, i32 %6985, i32 7) #1
  %7000 = xor i32 %6997, %6998
  %7001 = xor i32 %7000, %6999
  %7002 = xor i32 %6961, %6937
  %7003 = and i32 %7002, %6985
  %7004 = xor i32 %7003, %6937
  %7005 = add i32 %7001, %7004
  %7006 = add i32 %7005, -1841331548
  %7007 = add i32 %7006, %6714
  %7008 = add i32 %6913, %7007
  %7009 = add i32 %6924, %7008
  %7010 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6996, i32 %6996, i32 30) #1
  %7011 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6996, i32 %6996, i32 19) #1
  %7012 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6996, i32 %6996, i32 10) #1
  %7013 = xor i32 %7010, %7011
  %7014 = xor i32 %7013, %7012
  %7015 = or i32 %6972, %6948
  %7016 = and i32 %7015, %6996
  %7017 = and i32 %6972, %6948
  %7018 = or i32 %7016, %7017
  %7019 = add i32 %7014, %7018
  %7020 = add i32 %7008, %7019
  %7021 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7009, i32 %7009, i32 26) #1
  %7022 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7009, i32 %7009, i32 21) #1
  %7023 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7009, i32 %7009, i32 7) #1
  %7024 = xor i32 %7021, %7022
  %7025 = xor i32 %7024, %7023
  %7026 = xor i32 %6985, %6961
  %7027 = and i32 %7026, %7009
  %7028 = xor i32 %7027, %6961
  %7029 = add i32 %7025, %7028
  %7030 = add i32 %7029, -1424204075
  %7031 = add i32 %7030, %6715
  %7032 = add i32 %6937, %7031
  %7033 = add i32 %6948, %7032
  %7034 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7020, i32 %7020, i32 30) #1
  %7035 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7020, i32 %7020, i32 19) #1
  %7036 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7020, i32 %7020, i32 10) #1
  %7037 = xor i32 %7034, %7035
  %7038 = xor i32 %7037, %7036
  %7039 = or i32 %6996, %6972
  %7040 = and i32 %7039, %7020
  %7041 = and i32 %6996, %6972
  %7042 = or i32 %7040, %7041
  %7043 = add i32 %7038, %7042
  %7044 = add i32 %7032, %7043
  %7045 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7033, i32 %7033, i32 26) #1
  %7046 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7033, i32 %7033, i32 21) #1
  %7047 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7033, i32 %7033, i32 7) #1
  %7048 = xor i32 %7045, %7046
  %7049 = xor i32 %7048, %7047
  %7050 = xor i32 %7009, %6985
  %7051 = and i32 %7050, %7033
  %7052 = xor i32 %7051, %6985
  %7053 = add i32 %7049, %7052
  %7054 = add i32 %7053, -670586216
  %7055 = add i32 %7054, %6629
  %7056 = add i32 %6961, %7055
  %7057 = add i32 %6972, %7056
  %7058 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7044, i32 %7044, i32 30) #1
  %7059 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7044, i32 %7044, i32 19) #1
  %7060 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7044, i32 %7044, i32 10) #1
  %7061 = xor i32 %7058, %7059
  %7062 = xor i32 %7061, %7060
  %7063 = or i32 %7020, %6996
  %7064 = and i32 %7063, %7044
  %7065 = and i32 %7020, %6996
  %7066 = or i32 %7064, %7065
  %7067 = add i32 %7062, %7066
  %7068 = add i32 %7056, %7067
  %7069 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7057, i32 %7057, i32 26) #1
  %7070 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7057, i32 %7057, i32 21) #1
  %7071 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7057, i32 %7057, i32 7) #1
  %7072 = xor i32 %7069, %7070
  %7073 = xor i32 %7072, %7071
  %7074 = xor i32 %7033, %7009
  %7075 = and i32 %7074, %7057
  %7076 = xor i32 %7075, %7009
  %7077 = add i32 %7073, %7076
  %7078 = add i32 %7077, 310598401
  %7079 = add i32 %7078, %6630
  %7080 = add i32 %6985, %7079
  %7081 = add i32 %6996, %7080
  %7082 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7068, i32 %7068, i32 30) #1
  %7083 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7068, i32 %7068, i32 19) #1
  %7084 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7068, i32 %7068, i32 10) #1
  %7085 = xor i32 %7082, %7083
  %7086 = xor i32 %7085, %7084
  %7087 = or i32 %7044, %7020
  %7088 = and i32 %7087, %7068
  %7089 = and i32 %7044, %7020
  %7090 = or i32 %7088, %7089
  %7091 = add i32 %7086, %7090
  %7092 = add i32 %7080, %7091
  %7093 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7081, i32 %7081, i32 26) #1
  %7094 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7081, i32 %7081, i32 21) #1
  %7095 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7081, i32 %7081, i32 7) #1
  %7096 = xor i32 %7093, %7094
  %7097 = xor i32 %7096, %7095
  %7098 = xor i32 %7057, %7033
  %7099 = and i32 %7098, %7081
  %7100 = xor i32 %7099, %7033
  %7101 = add i32 %7097, %7100
  %7102 = add i32 %7101, 607225278
  %7103 = add i32 %7102, %6631
  %7104 = add i32 %7009, %7103
  %7105 = add i32 %7020, %7104
  %7106 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7092, i32 %7092, i32 30) #1
  %7107 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7092, i32 %7092, i32 19) #1
  %7108 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7092, i32 %7092, i32 10) #1
  %7109 = xor i32 %7106, %7107
  %7110 = xor i32 %7109, %7108
  %7111 = or i32 %7068, %7044
  %7112 = and i32 %7111, %7092
  %7113 = and i32 %7068, %7044
  %7114 = or i32 %7112, %7113
  %7115 = add i32 %7110, %7114
  %7116 = add i32 %7104, %7115
  %7117 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7105, i32 %7105, i32 26) #1
  %7118 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7105, i32 %7105, i32 21) #1
  %7119 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7105, i32 %7105, i32 7) #1
  %7120 = xor i32 %7117, %7118
  %7121 = xor i32 %7120, %7119
  %7122 = xor i32 %7081, %7057
  %7123 = and i32 %7122, %7105
  %7124 = xor i32 %7123, %7057
  %7125 = add i32 %7121, %7124
  %7126 = add i32 %7125, 1426881987
  %7127 = add i32 %7126, %6632
  %7128 = add i32 %7033, %7127
  %7129 = add i32 %7044, %7128
  %7130 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7116, i32 %7116, i32 30) #1
  %7131 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7116, i32 %7116, i32 19) #1
  %7132 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7116, i32 %7116, i32 10) #1
  %7133 = xor i32 %7130, %7131
  %7134 = xor i32 %7133, %7132
  %7135 = or i32 %7092, %7068
  %7136 = and i32 %7135, %7116
  %7137 = and i32 %7092, %7068
  %7138 = or i32 %7136, %7137
  %7139 = add i32 %7134, %7138
  %7140 = add i32 %7128, %7139
  %7141 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7129, i32 %7129, i32 26) #1
  %7142 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7129, i32 %7129, i32 21) #1
  %7143 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7129, i32 %7129, i32 7) #1
  %7144 = xor i32 %7141, %7142
  %7145 = xor i32 %7144, %7143
  %7146 = xor i32 %7105, %7081
  %7147 = and i32 %7146, %7129
  %7148 = xor i32 %7147, %7081
  %7149 = add i32 %7145, %7148
  %7150 = add i32 %7149, 1925078388
  %7151 = add i32 %7150, %6633
  %7152 = add i32 %7057, %7151
  %7153 = add i32 %7068, %7152
  %7154 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7140, i32 %7140, i32 30) #1
  %7155 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7140, i32 %7140, i32 19) #1
  %7156 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7140, i32 %7140, i32 10) #1
  %7157 = xor i32 %7154, %7155
  %7158 = xor i32 %7157, %7156
  %7159 = or i32 %7116, %7092
  %7160 = and i32 %7159, %7140
  %7161 = and i32 %7116, %7092
  %7162 = or i32 %7160, %7161
  %7163 = add i32 %7158, %7162
  %7164 = add i32 %7152, %7163
  %7165 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7153, i32 %7153, i32 26) #1
  %7166 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7153, i32 %7153, i32 21) #1
  %7167 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7153, i32 %7153, i32 7) #1
  %7168 = xor i32 %7165, %7166
  %7169 = xor i32 %7168, %7167
  %7170 = xor i32 %7129, %7105
  %7171 = and i32 %7170, %7153
  %7172 = xor i32 %7171, %7105
  %7173 = add i32 %7169, %7172
  %7174 = add i32 %7173, -2132889090
  %7175 = add i32 %7174, %6634
  %7176 = add i32 %7081, %7175
  %7177 = add i32 %7092, %7176
  %7178 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7164, i32 %7164, i32 30) #1
  %7179 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7164, i32 %7164, i32 19) #1
  %7180 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7164, i32 %7164, i32 10) #1
  %7181 = xor i32 %7178, %7179
  %7182 = xor i32 %7181, %7180
  %7183 = or i32 %7140, %7116
  %7184 = and i32 %7183, %7164
  %7185 = and i32 %7140, %7116
  %7186 = or i32 %7184, %7185
  %7187 = add i32 %7182, %7186
  %7188 = add i32 %7176, %7187
  %7189 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7177, i32 %7177, i32 26) #1
  %7190 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7177, i32 %7177, i32 21) #1
  %7191 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7177, i32 %7177, i32 7) #1
  %7192 = xor i32 %7189, %7190
  %7193 = xor i32 %7192, %7191
  %7194 = xor i32 %7153, %7129
  %7195 = and i32 %7194, %7177
  %7196 = xor i32 %7195, %7129
  %7197 = add i32 %7193, %7196
  %7198 = add i32 %7197, -1680079193
  %7199 = add i32 %7198, %6635
  %7200 = add i32 %7105, %7199
  %7201 = add i32 %7116, %7200
  %7202 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7188, i32 %7188, i32 30) #1
  %7203 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7188, i32 %7188, i32 19) #1
  %7204 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7188, i32 %7188, i32 10) #1
  %7205 = xor i32 %7202, %7203
  %7206 = xor i32 %7205, %7204
  %7207 = or i32 %7164, %7140
  %7208 = and i32 %7207, %7188
  %7209 = and i32 %7164, %7140
  %7210 = or i32 %7208, %7209
  %7211 = add i32 %7206, %7210
  %7212 = add i32 %7200, %7211
  %7213 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7201, i32 %7201, i32 26) #1
  %7214 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7201, i32 %7201, i32 21) #1
  %7215 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7201, i32 %7201, i32 7) #1
  %7216 = xor i32 %7213, %7214
  %7217 = xor i32 %7216, %7215
  %7218 = xor i32 %7177, %7153
  %7219 = and i32 %7218, %7201
  %7220 = xor i32 %7219, %7153
  %7221 = add i32 %7217, %7220
  %7222 = add i32 %7221, -1046744716
  %7223 = add i32 %7222, %6636
  %7224 = add i32 %7129, %7223
  %7225 = add i32 %7140, %7224
  %7226 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7212, i32 %7212, i32 30) #1
  %7227 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7212, i32 %7212, i32 19) #1
  %7228 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7212, i32 %7212, i32 10) #1
  %7229 = xor i32 %7226, %7227
  %7230 = xor i32 %7229, %7228
  %7231 = or i32 %7188, %7164
  %7232 = and i32 %7231, %7212
  %7233 = and i32 %7188, %7164
  %7234 = or i32 %7232, %7233
  %7235 = add i32 %7230, %7234
  %7236 = add i32 %7224, %7235
  %7237 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7225, i32 %7225, i32 26) #1
  %7238 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7225, i32 %7225, i32 21) #1
  %7239 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7225, i32 %7225, i32 7) #1
  %7240 = xor i32 %7237, %7238
  %7241 = xor i32 %7240, %7239
  %7242 = xor i32 %7201, %7177
  %7243 = and i32 %7242, %7225
  %7244 = xor i32 %7243, %7177
  %7245 = add i32 %7241, %7244
  %7246 = add i32 %7245, -459576895
  %7247 = add i32 %7246, %6727
  %7248 = add i32 %7153, %7247
  %7249 = add i32 %7164, %7248
  %7250 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7236, i32 %7236, i32 30) #1
  %7251 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7236, i32 %7236, i32 19) #1
  %7252 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7236, i32 %7236, i32 10) #1
  %7253 = xor i32 %7250, %7251
  %7254 = xor i32 %7253, %7252
  %7255 = or i32 %7212, %7188
  %7256 = and i32 %7255, %7236
  %7257 = and i32 %7212, %7188
  %7258 = or i32 %7256, %7257
  %7259 = add i32 %7254, %7258
  %7260 = add i32 %7248, %7259
  %7261 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7249, i32 %7249, i32 26) #1
  %7262 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7249, i32 %7249, i32 21) #1
  %7263 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7249, i32 %7249, i32 7) #1
  %7264 = xor i32 %7261, %7262
  %7265 = xor i32 %7264, %7263
  %7266 = xor i32 %7225, %7201
  %7267 = and i32 %7266, %7249
  %7268 = xor i32 %7267, %7201
  %7269 = add i32 %7265, %7268
  %7270 = add i32 %7269, -272742522
  %7271 = add i32 %7270, %6735
  %7272 = add i32 %7177, %7271
  %7273 = add i32 %7188, %7272
  %7274 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7260, i32 %7260, i32 30) #1
  %7275 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7260, i32 %7260, i32 19) #1
  %7276 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7260, i32 %7260, i32 10) #1
  %7277 = xor i32 %7274, %7275
  %7278 = xor i32 %7277, %7276
  %7279 = or i32 %7236, %7212
  %7280 = and i32 %7279, %7260
  %7281 = and i32 %7236, %7212
  %7282 = or i32 %7280, %7281
  %7283 = add i32 %7278, %7282
  %7284 = add i32 %7272, %7283
  %7285 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7273, i32 %7273, i32 26) #1
  %7286 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7273, i32 %7273, i32 21) #1
  %7287 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7273, i32 %7273, i32 7) #1
  %7288 = xor i32 %7285, %7286
  %7289 = xor i32 %7288, %7287
  %7290 = xor i32 %7249, %7225
  %7291 = and i32 %7290, %7273
  %7292 = xor i32 %7291, %7225
  %7293 = add i32 %7289, %7292
  %7294 = add i32 %7293, 264347078
  %7295 = add i32 %7294, %6748
  %7296 = add i32 %7201, %7295
  %7297 = add i32 %7212, %7296
  %7298 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7284, i32 %7284, i32 30) #1
  %7299 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7284, i32 %7284, i32 19) #1
  %7300 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7284, i32 %7284, i32 10) #1
  %7301 = xor i32 %7298, %7299
  %7302 = xor i32 %7301, %7300
  %7303 = or i32 %7260, %7236
  %7304 = and i32 %7303, %7284
  %7305 = and i32 %7260, %7236
  %7306 = or i32 %7304, %7305
  %7307 = add i32 %7302, %7306
  %7308 = add i32 %7296, %7307
  %7309 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7297, i32 %7297, i32 26) #1
  %7310 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7297, i32 %7297, i32 21) #1
  %7311 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7297, i32 %7297, i32 7) #1
  %7312 = xor i32 %7309, %7310
  %7313 = xor i32 %7312, %7311
  %7314 = xor i32 %7273, %7249
  %7315 = and i32 %7314, %7297
  %7316 = xor i32 %7315, %7249
  %7317 = add i32 %7313, %7316
  %7318 = add i32 %7317, 604807628
  %7319 = add i32 %7318, %6761
  %7320 = add i32 %7225, %7319
  %7321 = add i32 %7236, %7320
  %7322 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7308, i32 %7308, i32 30) #1
  %7323 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7308, i32 %7308, i32 19) #1
  %7324 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7308, i32 %7308, i32 10) #1
  %7325 = xor i32 %7322, %7323
  %7326 = xor i32 %7325, %7324
  %7327 = or i32 %7284, %7260
  %7328 = and i32 %7327, %7308
  %7329 = and i32 %7284, %7260
  %7330 = or i32 %7328, %7329
  %7331 = add i32 %7326, %7330
  %7332 = add i32 %7320, %7331
  %7333 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7321, i32 %7321, i32 26) #1
  %7334 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7321, i32 %7321, i32 21) #1
  %7335 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7321, i32 %7321, i32 7) #1
  %7336 = xor i32 %7333, %7334
  %7337 = xor i32 %7336, %7335
  %7338 = xor i32 %7297, %7273
  %7339 = and i32 %7338, %7321
  %7340 = xor i32 %7339, %7273
  %7341 = add i32 %7337, %7340
  %7342 = add i32 %7341, 770255983
  %7343 = add i32 %7342, %6774
  %7344 = add i32 %7249, %7343
  %7345 = add i32 %7260, %7344
  %7346 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7332, i32 %7332, i32 30) #1
  %7347 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7332, i32 %7332, i32 19) #1
  %7348 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7332, i32 %7332, i32 10) #1
  %7349 = xor i32 %7346, %7347
  %7350 = xor i32 %7349, %7348
  %7351 = or i32 %7308, %7284
  %7352 = and i32 %7351, %7332
  %7353 = and i32 %7308, %7284
  %7354 = or i32 %7352, %7353
  %7355 = add i32 %7350, %7354
  %7356 = add i32 %7344, %7355
  %7357 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7345, i32 %7345, i32 26) #1
  %7358 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7345, i32 %7345, i32 21) #1
  %7359 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7345, i32 %7345, i32 7) #1
  %7360 = xor i32 %7357, %7358
  %7361 = xor i32 %7360, %7359
  %7362 = xor i32 %7321, %7297
  %7363 = and i32 %7362, %7345
  %7364 = xor i32 %7363, %7297
  %7365 = add i32 %7361, %7364
  %7366 = add i32 %7365, 1249150122
  %7367 = add i32 %7366, %6787
  %7368 = add i32 %7273, %7367
  %7369 = add i32 %7284, %7368
  %7370 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7356, i32 %7356, i32 30) #1
  %7371 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7356, i32 %7356, i32 19) #1
  %7372 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7356, i32 %7356, i32 10) #1
  %7373 = xor i32 %7370, %7371
  %7374 = xor i32 %7373, %7372
  %7375 = or i32 %7332, %7308
  %7376 = and i32 %7375, %7356
  %7377 = and i32 %7332, %7308
  %7378 = or i32 %7376, %7377
  %7379 = add i32 %7374, %7378
  %7380 = add i32 %7368, %7379
  %7381 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7369, i32 %7369, i32 26) #1
  %7382 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7369, i32 %7369, i32 21) #1
  %7383 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7369, i32 %7369, i32 7) #1
  %7384 = xor i32 %7381, %7382
  %7385 = xor i32 %7384, %7383
  %7386 = xor i32 %7345, %7321
  %7387 = and i32 %7386, %7369
  %7388 = xor i32 %7387, %7321
  %7389 = add i32 %7385, %7388
  %7390 = add i32 %7389, 1555081692
  %7391 = add i32 %7390, %6800
  %7392 = add i32 %7297, %7391
  %7393 = add i32 %7308, %7392
  %7394 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7380, i32 %7380, i32 30) #1
  %7395 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7380, i32 %7380, i32 19) #1
  %7396 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7380, i32 %7380, i32 10) #1
  %7397 = xor i32 %7394, %7395
  %7398 = xor i32 %7397, %7396
  %7399 = or i32 %7356, %7332
  %7400 = and i32 %7399, %7380
  %7401 = and i32 %7356, %7332
  %7402 = or i32 %7400, %7401
  %7403 = add i32 %7398, %7402
  %7404 = add i32 %7392, %7403
  %7405 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7393, i32 %7393, i32 26) #1
  %7406 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7393, i32 %7393, i32 21) #1
  %7407 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7393, i32 %7393, i32 7) #1
  %7408 = xor i32 %7405, %7406
  %7409 = xor i32 %7408, %7407
  %7410 = xor i32 %7369, %7345
  %7411 = and i32 %7410, %7393
  %7412 = xor i32 %7411, %7345
  %7413 = add i32 %7409, %7412
  %7414 = add i32 %7413, 1996064986
  %7415 = add i32 %7414, %6808
  %7416 = add i32 %7321, %7415
  %7417 = add i32 %7332, %7416
  %7418 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7404, i32 %7404, i32 30) #1
  %7419 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7404, i32 %7404, i32 19) #1
  %7420 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7404, i32 %7404, i32 10) #1
  %7421 = xor i32 %7418, %7419
  %7422 = xor i32 %7421, %7420
  %7423 = or i32 %7380, %7356
  %7424 = and i32 %7423, %7404
  %7425 = and i32 %7380, %7356
  %7426 = or i32 %7424, %7425
  %7427 = add i32 %7422, %7426
  %7428 = add i32 %7416, %7427
  %7429 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7417, i32 %7417, i32 26) #1
  %7430 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7417, i32 %7417, i32 21) #1
  %7431 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7417, i32 %7417, i32 7) #1
  %7432 = xor i32 %7429, %7430
  %7433 = xor i32 %7432, %7431
  %7434 = xor i32 %7393, %7369
  %7435 = and i32 %7434, %7417
  %7436 = xor i32 %7435, %7369
  %7437 = add i32 %7433, %7436
  %7438 = add i32 %7437, -1740746414
  %7439 = add i32 %7438, %6816
  %7440 = add i32 %7345, %7439
  %7441 = add i32 %7356, %7440
  %7442 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7428, i32 %7428, i32 30) #1
  %7443 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7428, i32 %7428, i32 19) #1
  %7444 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7428, i32 %7428, i32 10) #1
  %7445 = xor i32 %7442, %7443
  %7446 = xor i32 %7445, %7444
  %7447 = or i32 %7404, %7380
  %7448 = and i32 %7447, %7428
  %7449 = and i32 %7404, %7380
  %7450 = or i32 %7448, %7449
  %7451 = add i32 %7446, %7450
  %7452 = add i32 %7440, %7451
  %7453 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7441, i32 %7441, i32 26) #1
  %7454 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7441, i32 %7441, i32 21) #1
  %7455 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7441, i32 %7441, i32 7) #1
  %7456 = xor i32 %7453, %7454
  %7457 = xor i32 %7456, %7455
  %7458 = xor i32 %7417, %7393
  %7459 = and i32 %7458, %7441
  %7460 = xor i32 %7459, %7393
  %7461 = add i32 %7457, %7460
  %7462 = add i32 %7461, -1473132947
  %7463 = add i32 %7462, %6824
  %7464 = add i32 %7369, %7463
  %7465 = add i32 %7380, %7464
  %7466 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7452, i32 %7452, i32 30) #1
  %7467 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7452, i32 %7452, i32 19) #1
  %7468 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7452, i32 %7452, i32 10) #1
  %7469 = xor i32 %7466, %7467
  %7470 = xor i32 %7469, %7468
  %7471 = or i32 %7428, %7404
  %7472 = and i32 %7471, %7452
  %7473 = and i32 %7428, %7404
  %7474 = or i32 %7472, %7473
  %7475 = add i32 %7470, %7474
  %7476 = add i32 %7464, %7475
  %7477 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7465, i32 %7465, i32 26) #1
  %7478 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7465, i32 %7465, i32 21) #1
  %7479 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7465, i32 %7465, i32 7) #1
  %7480 = xor i32 %7477, %7478
  %7481 = xor i32 %7480, %7479
  %7482 = xor i32 %7441, %7417
  %7483 = and i32 %7482, %7465
  %7484 = xor i32 %7483, %7417
  %7485 = add i32 %7481, %7484
  %7486 = add i32 %7485, -1341970488
  %7487 = add i32 %7486, %6832
  %7488 = add i32 %7393, %7487
  %7489 = add i32 %7404, %7488
  %7490 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7476, i32 %7476, i32 30) #1
  %7491 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7476, i32 %7476, i32 19) #1
  %7492 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7476, i32 %7476, i32 10) #1
  %7493 = xor i32 %7490, %7491
  %7494 = xor i32 %7493, %7492
  %7495 = or i32 %7452, %7428
  %7496 = and i32 %7495, %7476
  %7497 = and i32 %7452, %7428
  %7498 = or i32 %7496, %7497
  %7499 = add i32 %7494, %7498
  %7500 = add i32 %7488, %7499
  %7501 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7489, i32 %7489, i32 26) #1
  %7502 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7489, i32 %7489, i32 21) #1
  %7503 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7489, i32 %7489, i32 7) #1
  %7504 = xor i32 %7501, %7502
  %7505 = xor i32 %7504, %7503
  %7506 = xor i32 %7465, %7441
  %7507 = and i32 %7506, %7489
  %7508 = xor i32 %7507, %7441
  %7509 = add i32 %7505, %7508
  %7510 = add i32 %7509, -1084653625
  %7511 = add i32 %7510, %6840
  %7512 = add i32 %7417, %7511
  %7513 = add i32 %7428, %7512
  %7514 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7500, i32 %7500, i32 30) #1
  %7515 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7500, i32 %7500, i32 19) #1
  %7516 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7500, i32 %7500, i32 10) #1
  %7517 = xor i32 %7514, %7515
  %7518 = xor i32 %7517, %7516
  %7519 = or i32 %7476, %7452
  %7520 = and i32 %7519, %7500
  %7521 = and i32 %7476, %7452
  %7522 = or i32 %7520, %7521
  %7523 = add i32 %7518, %7522
  %7524 = add i32 %7512, %7523
  %7525 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7513, i32 %7513, i32 26) #1
  %7526 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7513, i32 %7513, i32 21) #1
  %7527 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7513, i32 %7513, i32 7) #1
  %7528 = xor i32 %7525, %7526
  %7529 = xor i32 %7528, %7527
  %7530 = xor i32 %7489, %7465
  %7531 = and i32 %7530, %7513
  %7532 = xor i32 %7531, %7465
  %7533 = add i32 %7529, %7532
  %7534 = add i32 %7533, -958395405
  %7535 = add i32 %7534, %6848
  %7536 = add i32 %7441, %7535
  %7537 = add i32 %7452, %7536
  %7538 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7524, i32 %7524, i32 30) #1
  %7539 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7524, i32 %7524, i32 19) #1
  %7540 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7524, i32 %7524, i32 10) #1
  %7541 = xor i32 %7538, %7539
  %7542 = xor i32 %7541, %7540
  %7543 = or i32 %7500, %7476
  %7544 = and i32 %7543, %7524
  %7545 = and i32 %7500, %7476
  %7546 = or i32 %7544, %7545
  %7547 = add i32 %7542, %7546
  %7548 = add i32 %7536, %7547
  %7549 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7537, i32 %7537, i32 26) #1
  %7550 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7537, i32 %7537, i32 21) #1
  %7551 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7537, i32 %7537, i32 7) #1
  %7552 = xor i32 %7549, %7550
  %7553 = xor i32 %7552, %7551
  %7554 = xor i32 %7513, %7489
  %7555 = and i32 %7554, %7537
  %7556 = xor i32 %7555, %7489
  %7557 = add i32 %7553, %7556
  %7558 = add i32 %7557, -710438585
  %7559 = add i32 %7558, %6856
  %7560 = add i32 %7465, %7559
  %7561 = add i32 %7476, %7560
  %7562 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7548, i32 %7548, i32 30) #1
  %7563 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7548, i32 %7548, i32 19) #1
  %7564 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7548, i32 %7548, i32 10) #1
  %7565 = xor i32 %7562, %7563
  %7566 = xor i32 %7565, %7564
  %7567 = or i32 %7524, %7500
  %7568 = and i32 %7567, %7548
  %7569 = and i32 %7524, %7500
  %7570 = or i32 %7568, %7569
  %7571 = add i32 %7566, %7570
  %7572 = add i32 %7560, %7571
  %7573 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7561, i32 %7561, i32 26) #1
  %7574 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7561, i32 %7561, i32 21) #1
  %7575 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7561, i32 %7561, i32 7) #1
  %7576 = xor i32 %7573, %7574
  %7577 = xor i32 %7576, %7575
  %7578 = xor i32 %7537, %7513
  %7579 = and i32 %7578, %7561
  %7580 = xor i32 %7579, %7513
  %7581 = add i32 %7577, %7580
  %7582 = add i32 %7581, 113926993
  %7583 = add i32 %7582, %6864
  %7584 = add i32 %7489, %7583
  %7585 = add i32 %7500, %7584
  %7586 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7572, i32 %7572, i32 30) #1
  %7587 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7572, i32 %7572, i32 19) #1
  %7588 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7572, i32 %7572, i32 10) #1
  %7589 = xor i32 %7586, %7587
  %7590 = xor i32 %7589, %7588
  %7591 = or i32 %7548, %7524
  %7592 = and i32 %7591, %7572
  %7593 = and i32 %7548, %7524
  %7594 = or i32 %7592, %7593
  %7595 = add i32 %7590, %7594
  %7596 = add i32 %7584, %7595
  %7597 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7585, i32 %7585, i32 26) #1
  %7598 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7585, i32 %7585, i32 21) #1
  %7599 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7585, i32 %7585, i32 7) #1
  %7600 = xor i32 %7597, %7598
  %7601 = xor i32 %7600, %7599
  %7602 = xor i32 %7561, %7537
  %7603 = and i32 %7602, %7585
  %7604 = xor i32 %7603, %7537
  %7605 = add i32 %7601, %7604
  %7606 = add i32 %7605, 338241895
  %7607 = add i32 %7606, %6877
  %7608 = add i32 %7513, %7607
  %7609 = add i32 %7524, %7608
  %7610 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7596, i32 %7596, i32 30) #1
  %7611 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7596, i32 %7596, i32 19) #1
  %7612 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7596, i32 %7596, i32 10) #1
  %7613 = xor i32 %7610, %7611
  %7614 = xor i32 %7613, %7612
  %7615 = or i32 %7572, %7548
  %7616 = and i32 %7615, %7596
  %7617 = and i32 %7572, %7548
  %7618 = or i32 %7616, %7617
  %7619 = add i32 %7614, %7618
  %7620 = add i32 %7608, %7619
  %7621 = add i32 %6727, %6824
  %7622 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6735, i32 %6735, i32 25) #1
  %7623 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6735, i32 %6735, i32 14) #1
  %7624 = lshr i32 %6735, 3
  %7625 = xor i32 %7622, %7623
  %7626 = xor i32 %7625, %7624
  %7627 = add i32 %7621, %7626
  %7628 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6864, i32 %6864, i32 15) #1
  %7629 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6864, i32 %6864, i32 13) #1
  %7630 = lshr i32 %6864, 10
  %7631 = xor i32 %7628, %7629
  %7632 = xor i32 %7631, %7630
  %7633 = add i32 %7627, %7632
  %7634 = add i32 %6735, %6832
  %7635 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6748, i32 %6748, i32 25) #1
  %7636 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6748, i32 %6748, i32 14) #1
  %7637 = lshr i32 %6748, 3
  %7638 = xor i32 %7635, %7636
  %7639 = xor i32 %7638, %7637
  %7640 = add i32 %7634, %7639
  %7641 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6877, i32 %6877, i32 15) #1
  %7642 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6877, i32 %6877, i32 13) #1
  %7643 = lshr i32 %6877, 10
  %7644 = xor i32 %7641, %7642
  %7645 = xor i32 %7644, %7643
  %7646 = add i32 %7640, %7645
  %7647 = add i32 %6748, %6840
  %7648 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6761, i32 %6761, i32 25) #1
  %7649 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6761, i32 %6761, i32 14) #1
  %7650 = lshr i32 %6761, 3
  %7651 = xor i32 %7648, %7649
  %7652 = xor i32 %7651, %7650
  %7653 = add i32 %7647, %7652
  %7654 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7633, i32 %7633, i32 15) #1
  %7655 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7633, i32 %7633, i32 13) #1
  %7656 = lshr i32 %7633, 10
  %7657 = xor i32 %7654, %7655
  %7658 = xor i32 %7657, %7656
  %7659 = add i32 %7653, %7658
  %7660 = add i32 %6761, %6848
  %7661 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6774, i32 %6774, i32 25) #1
  %7662 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6774, i32 %6774, i32 14) #1
  %7663 = lshr i32 %6774, 3
  %7664 = xor i32 %7661, %7662
  %7665 = xor i32 %7664, %7663
  %7666 = add i32 %7660, %7665
  %7667 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7646, i32 %7646, i32 15) #1
  %7668 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7646, i32 %7646, i32 13) #1
  %7669 = lshr i32 %7646, 10
  %7670 = xor i32 %7667, %7668
  %7671 = xor i32 %7670, %7669
  %7672 = add i32 %7666, %7671
  %7673 = add i32 %6774, %6856
  %7674 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6787, i32 %6787, i32 25) #1
  %7675 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6787, i32 %6787, i32 14) #1
  %7676 = lshr i32 %6787, 3
  %7677 = xor i32 %7674, %7675
  %7678 = xor i32 %7677, %7676
  %7679 = add i32 %7673, %7678
  %7680 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7659, i32 %7659, i32 15) #1
  %7681 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7659, i32 %7659, i32 13) #1
  %7682 = lshr i32 %7659, 10
  %7683 = xor i32 %7680, %7681
  %7684 = xor i32 %7683, %7682
  %7685 = add i32 %7679, %7684
  %7686 = add i32 %6787, %6864
  %7687 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6800, i32 %6800, i32 25) #1
  %7688 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6800, i32 %6800, i32 14) #1
  %7689 = lshr i32 %6800, 3
  %7690 = xor i32 %7687, %7688
  %7691 = xor i32 %7690, %7689
  %7692 = add i32 %7686, %7691
  %7693 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7672, i32 %7672, i32 15) #1
  %7694 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7672, i32 %7672, i32 13) #1
  %7695 = lshr i32 %7672, 10
  %7696 = xor i32 %7693, %7694
  %7697 = xor i32 %7696, %7695
  %7698 = add i32 %7692, %7697
  %7699 = add i32 %6800, %6877
  %7700 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6808, i32 %6808, i32 25) #1
  %7701 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6808, i32 %6808, i32 14) #1
  %7702 = lshr i32 %6808, 3
  %7703 = xor i32 %7700, %7701
  %7704 = xor i32 %7703, %7702
  %7705 = add i32 %7699, %7704
  %7706 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7685, i32 %7685, i32 15) #1
  %7707 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7685, i32 %7685, i32 13) #1
  %7708 = lshr i32 %7685, 10
  %7709 = xor i32 %7706, %7707
  %7710 = xor i32 %7709, %7708
  %7711 = add i32 %7705, %7710
  %7712 = add i32 %6808, %7633
  %7713 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6816, i32 %6816, i32 25) #1
  %7714 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6816, i32 %6816, i32 14) #1
  %7715 = lshr i32 %6816, 3
  %7716 = xor i32 %7713, %7714
  %7717 = xor i32 %7716, %7715
  %7718 = add i32 %7712, %7717
  %7719 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7698, i32 %7698, i32 15) #1
  %7720 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7698, i32 %7698, i32 13) #1
  %7721 = lshr i32 %7698, 10
  %7722 = xor i32 %7719, %7720
  %7723 = xor i32 %7722, %7721
  %7724 = add i32 %7718, %7723
  %7725 = add i32 %6816, %7646
  %7726 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6824, i32 %6824, i32 25) #1
  %7727 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6824, i32 %6824, i32 14) #1
  %7728 = lshr i32 %6824, 3
  %7729 = xor i32 %7726, %7727
  %7730 = xor i32 %7729, %7728
  %7731 = add i32 %7725, %7730
  %7732 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7711, i32 %7711, i32 15) #1
  %7733 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7711, i32 %7711, i32 13) #1
  %7734 = lshr i32 %7711, 10
  %7735 = xor i32 %7732, %7733
  %7736 = xor i32 %7735, %7734
  %7737 = add i32 %7731, %7736
  %7738 = add i32 %6824, %7659
  %7739 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6832, i32 %6832, i32 25) #1
  %7740 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6832, i32 %6832, i32 14) #1
  %7741 = lshr i32 %6832, 3
  %7742 = xor i32 %7739, %7740
  %7743 = xor i32 %7742, %7741
  %7744 = add i32 %7738, %7743
  %7745 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7724, i32 %7724, i32 15) #1
  %7746 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7724, i32 %7724, i32 13) #1
  %7747 = lshr i32 %7724, 10
  %7748 = xor i32 %7745, %7746
  %7749 = xor i32 %7748, %7747
  %7750 = add i32 %7744, %7749
  %7751 = add i32 %6832, %7672
  %7752 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6840, i32 %6840, i32 25) #1
  %7753 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6840, i32 %6840, i32 14) #1
  %7754 = lshr i32 %6840, 3
  %7755 = xor i32 %7752, %7753
  %7756 = xor i32 %7755, %7754
  %7757 = add i32 %7751, %7756
  %7758 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7737, i32 %7737, i32 15) #1
  %7759 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7737, i32 %7737, i32 13) #1
  %7760 = lshr i32 %7737, 10
  %7761 = xor i32 %7758, %7759
  %7762 = xor i32 %7761, %7760
  %7763 = add i32 %7757, %7762
  %7764 = add i32 %6840, %7685
  %7765 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6848, i32 %6848, i32 25) #1
  %7766 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6848, i32 %6848, i32 14) #1
  %7767 = lshr i32 %6848, 3
  %7768 = xor i32 %7765, %7766
  %7769 = xor i32 %7768, %7767
  %7770 = add i32 %7764, %7769
  %7771 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7750, i32 %7750, i32 15) #1
  %7772 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7750, i32 %7750, i32 13) #1
  %7773 = lshr i32 %7750, 10
  %7774 = xor i32 %7771, %7772
  %7775 = xor i32 %7774, %7773
  %7776 = add i32 %7770, %7775
  %7777 = add i32 %6848, %7698
  %7778 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6856, i32 %6856, i32 25) #1
  %7779 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6856, i32 %6856, i32 14) #1
  %7780 = lshr i32 %6856, 3
  %7781 = xor i32 %7778, %7779
  %7782 = xor i32 %7781, %7780
  %7783 = add i32 %7777, %7782
  %7784 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7763, i32 %7763, i32 15) #1
  %7785 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7763, i32 %7763, i32 13) #1
  %7786 = lshr i32 %7763, 10
  %7787 = xor i32 %7784, %7785
  %7788 = xor i32 %7787, %7786
  %7789 = add i32 %7783, %7788
  %7790 = add i32 %6856, %7711
  %7791 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6864, i32 %6864, i32 25) #1
  %7792 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6864, i32 %6864, i32 14) #1
  %7793 = lshr i32 %6864, 3
  %7794 = xor i32 %7791, %7792
  %7795 = xor i32 %7794, %7793
  %7796 = add i32 %7790, %7795
  %7797 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7776, i32 %7776, i32 15) #1
  %7798 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7776, i32 %7776, i32 13) #1
  %7799 = lshr i32 %7776, 10
  %7800 = xor i32 %7797, %7798
  %7801 = xor i32 %7800, %7799
  %7802 = add i32 %7796, %7801
  %7803 = add i32 %6864, %7724
  %7804 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6877, i32 %6877, i32 25) #1
  %7805 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %6877, i32 %6877, i32 14) #1
  %7806 = lshr i32 %6877, 3
  %7807 = xor i32 %7804, %7805
  %7808 = xor i32 %7807, %7806
  %7809 = add i32 %7803, %7808
  %7810 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7789, i32 %7789, i32 15) #1
  %7811 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7789, i32 %7789, i32 13) #1
  %7812 = lshr i32 %7789, 10
  %7813 = xor i32 %7810, %7811
  %7814 = xor i32 %7813, %7812
  %7815 = add i32 %7809, %7814
  %7816 = add i32 %6877, %7737
  %7817 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7633, i32 %7633, i32 25) #1
  %7818 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7633, i32 %7633, i32 14) #1
  %7819 = lshr i32 %7633, 3
  %7820 = xor i32 %7817, %7818
  %7821 = xor i32 %7820, %7819
  %7822 = add i32 %7816, %7821
  %7823 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7802, i32 %7802, i32 15) #1
  %7824 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7802, i32 %7802, i32 13) #1
  %7825 = lshr i32 %7802, 10
  %7826 = xor i32 %7823, %7824
  %7827 = xor i32 %7826, %7825
  %7828 = add i32 %7822, %7827
  %7829 = add i32 %7633, %7750
  %7830 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7646, i32 %7646, i32 25) #1
  %7831 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7646, i32 %7646, i32 14) #1
  %7832 = lshr i32 %7646, 3
  %7833 = xor i32 %7830, %7831
  %7834 = xor i32 %7833, %7832
  %7835 = add i32 %7829, %7834
  %7836 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7815, i32 %7815, i32 15) #1
  %7837 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7815, i32 %7815, i32 13) #1
  %7838 = lshr i32 %7815, 10
  %7839 = xor i32 %7836, %7837
  %7840 = xor i32 %7839, %7838
  %7841 = add i32 %7835, %7840
  %7842 = add i32 %7646, %7763
  %7843 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7659, i32 %7659, i32 25) #1
  %7844 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7659, i32 %7659, i32 14) #1
  %7845 = lshr i32 %7659, 3
  %7846 = xor i32 %7843, %7844
  %7847 = xor i32 %7846, %7845
  %7848 = add i32 %7842, %7847
  %7849 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7828, i32 %7828, i32 15) #1
  %7850 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7828, i32 %7828, i32 13) #1
  %7851 = lshr i32 %7828, 10
  %7852 = xor i32 %7849, %7850
  %7853 = xor i32 %7852, %7851
  %7854 = add i32 %7848, %7853
  %7855 = add i32 %7659, %7776
  %7856 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7672, i32 %7672, i32 25) #1
  %7857 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7672, i32 %7672, i32 14) #1
  %7858 = lshr i32 %7672, 3
  %7859 = xor i32 %7856, %7857
  %7860 = xor i32 %7859, %7858
  %7861 = add i32 %7855, %7860
  %7862 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7841, i32 %7841, i32 15) #1
  %7863 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7841, i32 %7841, i32 13) #1
  %7864 = lshr i32 %7841, 10
  %7865 = xor i32 %7862, %7863
  %7866 = xor i32 %7865, %7864
  %7867 = add i32 %7861, %7866
  %7868 = add i32 %7672, %7789
  %7869 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7685, i32 %7685, i32 25) #1
  %7870 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7685, i32 %7685, i32 14) #1
  %7871 = lshr i32 %7685, 3
  %7872 = xor i32 %7869, %7870
  %7873 = xor i32 %7872, %7871
  %7874 = add i32 %7868, %7873
  %7875 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7854, i32 %7854, i32 15) #1
  %7876 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7854, i32 %7854, i32 13) #1
  %7877 = lshr i32 %7854, 10
  %7878 = xor i32 %7875, %7876
  %7879 = xor i32 %7878, %7877
  %7880 = add i32 %7874, %7879
  %7881 = add i32 %7685, %7802
  %7882 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7698, i32 %7698, i32 25) #1
  %7883 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7698, i32 %7698, i32 14) #1
  %7884 = lshr i32 %7698, 3
  %7885 = xor i32 %7882, %7883
  %7886 = xor i32 %7885, %7884
  %7887 = add i32 %7881, %7886
  %7888 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7867, i32 %7867, i32 15) #1
  %7889 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7867, i32 %7867, i32 13) #1
  %7890 = lshr i32 %7867, 10
  %7891 = xor i32 %7888, %7889
  %7892 = xor i32 %7891, %7890
  %7893 = add i32 %7887, %7892
  %7894 = add i32 %7698, %7815
  %7895 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7711, i32 %7711, i32 25) #1
  %7896 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7711, i32 %7711, i32 14) #1
  %7897 = lshr i32 %7711, 3
  %7898 = xor i32 %7895, %7896
  %7899 = xor i32 %7898, %7897
  %7900 = add i32 %7894, %7899
  %7901 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7880, i32 %7880, i32 15) #1
  %7902 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7880, i32 %7880, i32 13) #1
  %7903 = lshr i32 %7880, 10
  %7904 = xor i32 %7901, %7902
  %7905 = xor i32 %7904, %7903
  %7906 = add i32 %7900, %7905
  %7907 = add i32 %7711, %7828
  %7908 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7724, i32 %7724, i32 25) #1
  %7909 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7724, i32 %7724, i32 14) #1
  %7910 = lshr i32 %7724, 3
  %7911 = xor i32 %7908, %7909
  %7912 = xor i32 %7911, %7910
  %7913 = add i32 %7907, %7912
  %7914 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7893, i32 %7893, i32 15) #1
  %7915 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7893, i32 %7893, i32 13) #1
  %7916 = lshr i32 %7893, 10
  %7917 = xor i32 %7914, %7915
  %7918 = xor i32 %7917, %7916
  %7919 = add i32 %7913, %7918
  %7920 = add i32 %7724, %7841
  %7921 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7737, i32 %7737, i32 25) #1
  %7922 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7737, i32 %7737, i32 14) #1
  %7923 = lshr i32 %7737, 3
  %7924 = xor i32 %7921, %7922
  %7925 = xor i32 %7924, %7923
  %7926 = add i32 %7920, %7925
  %7927 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7906, i32 %7906, i32 15) #1
  %7928 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7906, i32 %7906, i32 13) #1
  %7929 = lshr i32 %7906, 10
  %7930 = xor i32 %7927, %7928
  %7931 = xor i32 %7930, %7929
  %7932 = add i32 %7926, %7931
  %7933 = add i32 %7737, %7854
  %7934 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7750, i32 %7750, i32 25) #1
  %7935 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7750, i32 %7750, i32 14) #1
  %7936 = lshr i32 %7750, 3
  %7937 = xor i32 %7934, %7935
  %7938 = xor i32 %7937, %7936
  %7939 = add i32 %7933, %7938
  %7940 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7919, i32 %7919, i32 15) #1
  %7941 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7919, i32 %7919, i32 13) #1
  %7942 = lshr i32 %7919, 10
  %7943 = xor i32 %7940, %7941
  %7944 = xor i32 %7943, %7942
  %7945 = add i32 %7939, %7944
  %7946 = add i32 %7750, %7867
  %7947 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7763, i32 %7763, i32 25) #1
  %7948 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7763, i32 %7763, i32 14) #1
  %7949 = lshr i32 %7763, 3
  %7950 = xor i32 %7947, %7948
  %7951 = xor i32 %7950, %7949
  %7952 = add i32 %7946, %7951
  %7953 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7932, i32 %7932, i32 15) #1
  %7954 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7932, i32 %7932, i32 13) #1
  %7955 = lshr i32 %7932, 10
  %7956 = xor i32 %7953, %7954
  %7957 = xor i32 %7956, %7955
  %7958 = add i32 %7952, %7957
  %7959 = add i32 %7763, %7880
  %7960 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7776, i32 %7776, i32 25) #1
  %7961 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7776, i32 %7776, i32 14) #1
  %7962 = lshr i32 %7776, 3
  %7963 = xor i32 %7960, %7961
  %7964 = xor i32 %7963, %7962
  %7965 = add i32 %7959, %7964
  %7966 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7945, i32 %7945, i32 15) #1
  %7967 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7945, i32 %7945, i32 13) #1
  %7968 = lshr i32 %7945, 10
  %7969 = xor i32 %7966, %7967
  %7970 = xor i32 %7969, %7968
  %7971 = add i32 %7965, %7970
  %7972 = add i32 %7776, %7893
  %7973 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7789, i32 %7789, i32 25) #1
  %7974 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7789, i32 %7789, i32 14) #1
  %7975 = lshr i32 %7789, 3
  %7976 = xor i32 %7973, %7974
  %7977 = xor i32 %7976, %7975
  %7978 = add i32 %7972, %7977
  %7979 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7958, i32 %7958, i32 15) #1
  %7980 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7958, i32 %7958, i32 13) #1
  %7981 = lshr i32 %7958, 10
  %7982 = xor i32 %7979, %7980
  %7983 = xor i32 %7982, %7981
  %7984 = add i32 %7978, %7983
  %7985 = add i32 %7789, %7906
  %7986 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7802, i32 %7802, i32 25) #1
  %7987 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7802, i32 %7802, i32 14) #1
  %7988 = lshr i32 %7802, 3
  %7989 = xor i32 %7986, %7987
  %7990 = xor i32 %7989, %7988
  %7991 = add i32 %7985, %7990
  %7992 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7971, i32 %7971, i32 15) #1
  %7993 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7971, i32 %7971, i32 13) #1
  %7994 = lshr i32 %7971, 10
  %7995 = xor i32 %7992, %7993
  %7996 = xor i32 %7995, %7994
  %7997 = add i32 %7991, %7996
  %7998 = add i32 %7802, %7919
  %7999 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7815, i32 %7815, i32 25) #1
  %8000 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7815, i32 %7815, i32 14) #1
  %8001 = lshr i32 %7815, 3
  %8002 = xor i32 %7999, %8000
  %8003 = xor i32 %8002, %8001
  %8004 = add i32 %7998, %8003
  %8005 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7984, i32 %7984, i32 15) #1
  %8006 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7984, i32 %7984, i32 13) #1
  %8007 = lshr i32 %7984, 10
  %8008 = xor i32 %8005, %8006
  %8009 = xor i32 %8008, %8007
  %8010 = add i32 %8004, %8009
  %8011 = add i32 %7815, %7932
  %8012 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7828, i32 %7828, i32 25) #1
  %8013 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7828, i32 %7828, i32 14) #1
  %8014 = lshr i32 %7828, 3
  %8015 = xor i32 %8012, %8013
  %8016 = xor i32 %8015, %8014
  %8017 = add i32 %8011, %8016
  %8018 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7997, i32 %7997, i32 15) #1
  %8019 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7997, i32 %7997, i32 13) #1
  %8020 = lshr i32 %7997, 10
  %8021 = xor i32 %8018, %8019
  %8022 = xor i32 %8021, %8020
  %8023 = add i32 %8017, %8022
  %8024 = add i32 %7828, %7945
  %8025 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7841, i32 %7841, i32 25) #1
  %8026 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7841, i32 %7841, i32 14) #1
  %8027 = lshr i32 %7841, 3
  %8028 = xor i32 %8025, %8026
  %8029 = xor i32 %8028, %8027
  %8030 = add i32 %8024, %8029
  %8031 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8010, i32 %8010, i32 15) #1
  %8032 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8010, i32 %8010, i32 13) #1
  %8033 = lshr i32 %8010, 10
  %8034 = xor i32 %8031, %8032
  %8035 = xor i32 %8034, %8033
  %8036 = add i32 %8030, %8035
  %8037 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7609, i32 %7609, i32 26) #1
  %8038 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7609, i32 %7609, i32 21) #1
  %8039 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7609, i32 %7609, i32 7) #1
  %8040 = xor i32 %8037, %8038
  %8041 = xor i32 %8040, %8039
  %8042 = xor i32 %7585, %7561
  %8043 = and i32 %8042, %7609
  %8044 = xor i32 %8043, %7561
  %8045 = add i32 %8041, %8044
  %8046 = add i32 %8045, 666307205
  %8047 = add i32 %8046, %7633
  %8048 = add i32 %7537, %8047
  %8049 = add i32 %7548, %8048
  %8050 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7620, i32 %7620, i32 30) #1
  %8051 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7620, i32 %7620, i32 19) #1
  %8052 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %7620, i32 %7620, i32 10) #1
  %8053 = xor i32 %8050, %8051
  %8054 = xor i32 %8053, %8052
  %8055 = or i32 %7596, %7572
  %8056 = and i32 %8055, %7620
  %8057 = and i32 %7596, %7572
  %8058 = or i32 %8056, %8057
  %8059 = add i32 %8054, %8058
  %8060 = add i32 %8048, %8059
  %8061 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8049, i32 %8049, i32 26) #1
  %8062 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8049, i32 %8049, i32 21) #1
  %8063 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8049, i32 %8049, i32 7) #1
  %8064 = xor i32 %8061, %8062
  %8065 = xor i32 %8064, %8063
  %8066 = xor i32 %7609, %7585
  %8067 = and i32 %8066, %8049
  %8068 = xor i32 %8067, %7585
  %8069 = add i32 %8065, %8068
  %8070 = add i32 %8069, 773529912
  %8071 = add i32 %8070, %7646
  %8072 = add i32 %7561, %8071
  %8073 = add i32 %7572, %8072
  %8074 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8060, i32 %8060, i32 30) #1
  %8075 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8060, i32 %8060, i32 19) #1
  %8076 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8060, i32 %8060, i32 10) #1
  %8077 = xor i32 %8074, %8075
  %8078 = xor i32 %8077, %8076
  %8079 = or i32 %7620, %7596
  %8080 = and i32 %8079, %8060
  %8081 = and i32 %7620, %7596
  %8082 = or i32 %8080, %8081
  %8083 = add i32 %8078, %8082
  %8084 = add i32 %8072, %8083
  %8085 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8073, i32 %8073, i32 26) #1
  %8086 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8073, i32 %8073, i32 21) #1
  %8087 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8073, i32 %8073, i32 7) #1
  %8088 = xor i32 %8085, %8086
  %8089 = xor i32 %8088, %8087
  %8090 = xor i32 %8049, %7609
  %8091 = and i32 %8090, %8073
  %8092 = xor i32 %8091, %7609
  %8093 = add i32 %8089, %8092
  %8094 = add i32 %8093, 1294757372
  %8095 = add i32 %8094, %7659
  %8096 = add i32 %7585, %8095
  %8097 = add i32 %7596, %8096
  %8098 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8084, i32 %8084, i32 30) #1
  %8099 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8084, i32 %8084, i32 19) #1
  %8100 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8084, i32 %8084, i32 10) #1
  %8101 = xor i32 %8098, %8099
  %8102 = xor i32 %8101, %8100
  %8103 = or i32 %8060, %7620
  %8104 = and i32 %8103, %8084
  %8105 = and i32 %8060, %7620
  %8106 = or i32 %8104, %8105
  %8107 = add i32 %8102, %8106
  %8108 = add i32 %8096, %8107
  %8109 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8097, i32 %8097, i32 26) #1
  %8110 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8097, i32 %8097, i32 21) #1
  %8111 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8097, i32 %8097, i32 7) #1
  %8112 = xor i32 %8109, %8110
  %8113 = xor i32 %8112, %8111
  %8114 = xor i32 %8073, %8049
  %8115 = and i32 %8114, %8097
  %8116 = xor i32 %8115, %8049
  %8117 = add i32 %8113, %8116
  %8118 = add i32 %8117, 1396182291
  %8119 = add i32 %8118, %7672
  %8120 = add i32 %7609, %8119
  %8121 = add i32 %7620, %8120
  %8122 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8108, i32 %8108, i32 30) #1
  %8123 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8108, i32 %8108, i32 19) #1
  %8124 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8108, i32 %8108, i32 10) #1
  %8125 = xor i32 %8122, %8123
  %8126 = xor i32 %8125, %8124
  %8127 = or i32 %8084, %8060
  %8128 = and i32 %8127, %8108
  %8129 = and i32 %8084, %8060
  %8130 = or i32 %8128, %8129
  %8131 = add i32 %8126, %8130
  %8132 = add i32 %8120, %8131
  %8133 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8121, i32 %8121, i32 26) #1
  %8134 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8121, i32 %8121, i32 21) #1
  %8135 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8121, i32 %8121, i32 7) #1
  %8136 = xor i32 %8133, %8134
  %8137 = xor i32 %8136, %8135
  %8138 = xor i32 %8097, %8073
  %8139 = and i32 %8138, %8121
  %8140 = xor i32 %8139, %8073
  %8141 = add i32 %8137, %8140
  %8142 = add i32 %8141, 1695183700
  %8143 = add i32 %8142, %7685
  %8144 = add i32 %8049, %8143
  %8145 = add i32 %8060, %8144
  %8146 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8132, i32 %8132, i32 30) #1
  %8147 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8132, i32 %8132, i32 19) #1
  %8148 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8132, i32 %8132, i32 10) #1
  %8149 = xor i32 %8146, %8147
  %8150 = xor i32 %8149, %8148
  %8151 = or i32 %8108, %8084
  %8152 = and i32 %8151, %8132
  %8153 = and i32 %8108, %8084
  %8154 = or i32 %8152, %8153
  %8155 = add i32 %8150, %8154
  %8156 = add i32 %8144, %8155
  %8157 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8145, i32 %8145, i32 26) #1
  %8158 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8145, i32 %8145, i32 21) #1
  %8159 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8145, i32 %8145, i32 7) #1
  %8160 = xor i32 %8157, %8158
  %8161 = xor i32 %8160, %8159
  %8162 = xor i32 %8121, %8097
  %8163 = and i32 %8162, %8145
  %8164 = xor i32 %8163, %8097
  %8165 = add i32 %8161, %8164
  %8166 = add i32 %8165, 1986661051
  %8167 = add i32 %8166, %7698
  %8168 = add i32 %8073, %8167
  %8169 = add i32 %8084, %8168
  %8170 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8156, i32 %8156, i32 30) #1
  %8171 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8156, i32 %8156, i32 19) #1
  %8172 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8156, i32 %8156, i32 10) #1
  %8173 = xor i32 %8170, %8171
  %8174 = xor i32 %8173, %8172
  %8175 = or i32 %8132, %8108
  %8176 = and i32 %8175, %8156
  %8177 = and i32 %8132, %8108
  %8178 = or i32 %8176, %8177
  %8179 = add i32 %8174, %8178
  %8180 = add i32 %8168, %8179
  %8181 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8169, i32 %8169, i32 26) #1
  %8182 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8169, i32 %8169, i32 21) #1
  %8183 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8169, i32 %8169, i32 7) #1
  %8184 = xor i32 %8181, %8182
  %8185 = xor i32 %8184, %8183
  %8186 = xor i32 %8145, %8121
  %8187 = and i32 %8186, %8169
  %8188 = xor i32 %8187, %8121
  %8189 = add i32 %8185, %8188
  %8190 = add i32 %8189, -2117940946
  %8191 = add i32 %8190, %7711
  %8192 = add i32 %8097, %8191
  %8193 = add i32 %8108, %8192
  %8194 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8180, i32 %8180, i32 30) #1
  %8195 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8180, i32 %8180, i32 19) #1
  %8196 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8180, i32 %8180, i32 10) #1
  %8197 = xor i32 %8194, %8195
  %8198 = xor i32 %8197, %8196
  %8199 = or i32 %8156, %8132
  %8200 = and i32 %8199, %8180
  %8201 = and i32 %8156, %8132
  %8202 = or i32 %8200, %8201
  %8203 = add i32 %8198, %8202
  %8204 = add i32 %8192, %8203
  %8205 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8193, i32 %8193, i32 26) #1
  %8206 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8193, i32 %8193, i32 21) #1
  %8207 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8193, i32 %8193, i32 7) #1
  %8208 = xor i32 %8205, %8206
  %8209 = xor i32 %8208, %8207
  %8210 = xor i32 %8169, %8145
  %8211 = and i32 %8210, %8193
  %8212 = xor i32 %8211, %8145
  %8213 = add i32 %8209, %8212
  %8214 = add i32 %8213, -1838011259
  %8215 = add i32 %8214, %7724
  %8216 = add i32 %8121, %8215
  %8217 = add i32 %8132, %8216
  %8218 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8204, i32 %8204, i32 30) #1
  %8219 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8204, i32 %8204, i32 19) #1
  %8220 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8204, i32 %8204, i32 10) #1
  %8221 = xor i32 %8218, %8219
  %8222 = xor i32 %8221, %8220
  %8223 = or i32 %8180, %8156
  %8224 = and i32 %8223, %8204
  %8225 = and i32 %8180, %8156
  %8226 = or i32 %8224, %8225
  %8227 = add i32 %8222, %8226
  %8228 = add i32 %8216, %8227
  %8229 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8217, i32 %8217, i32 26) #1
  %8230 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8217, i32 %8217, i32 21) #1
  %8231 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8217, i32 %8217, i32 7) #1
  %8232 = xor i32 %8229, %8230
  %8233 = xor i32 %8232, %8231
  %8234 = xor i32 %8193, %8169
  %8235 = and i32 %8234, %8217
  %8236 = xor i32 %8235, %8169
  %8237 = add i32 %8233, %8236
  %8238 = add i32 %8237, -1564481375
  %8239 = add i32 %8238, %7737
  %8240 = add i32 %8145, %8239
  %8241 = add i32 %8156, %8240
  %8242 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8228, i32 %8228, i32 30) #1
  %8243 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8228, i32 %8228, i32 19) #1
  %8244 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8228, i32 %8228, i32 10) #1
  %8245 = xor i32 %8242, %8243
  %8246 = xor i32 %8245, %8244
  %8247 = or i32 %8204, %8180
  %8248 = and i32 %8247, %8228
  %8249 = and i32 %8204, %8180
  %8250 = or i32 %8248, %8249
  %8251 = add i32 %8246, %8250
  %8252 = add i32 %8240, %8251
  %8253 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8241, i32 %8241, i32 26) #1
  %8254 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8241, i32 %8241, i32 21) #1
  %8255 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8241, i32 %8241, i32 7) #1
  %8256 = xor i32 %8253, %8254
  %8257 = xor i32 %8256, %8255
  %8258 = xor i32 %8217, %8193
  %8259 = and i32 %8258, %8241
  %8260 = xor i32 %8259, %8193
  %8261 = add i32 %8257, %8260
  %8262 = add i32 %8261, -1474664885
  %8263 = add i32 %8262, %7750
  %8264 = add i32 %8169, %8263
  %8265 = add i32 %8180, %8264
  %8266 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8252, i32 %8252, i32 30) #1
  %8267 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8252, i32 %8252, i32 19) #1
  %8268 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8252, i32 %8252, i32 10) #1
  %8269 = xor i32 %8266, %8267
  %8270 = xor i32 %8269, %8268
  %8271 = or i32 %8228, %8204
  %8272 = and i32 %8271, %8252
  %8273 = and i32 %8228, %8204
  %8274 = or i32 %8272, %8273
  %8275 = add i32 %8270, %8274
  %8276 = add i32 %8264, %8275
  %8277 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8265, i32 %8265, i32 26) #1
  %8278 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8265, i32 %8265, i32 21) #1
  %8279 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8265, i32 %8265, i32 7) #1
  %8280 = xor i32 %8277, %8278
  %8281 = xor i32 %8280, %8279
  %8282 = xor i32 %8241, %8217
  %8283 = and i32 %8282, %8265
  %8284 = xor i32 %8283, %8217
  %8285 = add i32 %8281, %8284
  %8286 = add i32 %8285, -1035236496
  %8287 = add i32 %8286, %7763
  %8288 = add i32 %8193, %8287
  %8289 = add i32 %8204, %8288
  %8290 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8276, i32 %8276, i32 30) #1
  %8291 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8276, i32 %8276, i32 19) #1
  %8292 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8276, i32 %8276, i32 10) #1
  %8293 = xor i32 %8290, %8291
  %8294 = xor i32 %8293, %8292
  %8295 = or i32 %8252, %8228
  %8296 = and i32 %8295, %8276
  %8297 = and i32 %8252, %8228
  %8298 = or i32 %8296, %8297
  %8299 = add i32 %8294, %8298
  %8300 = add i32 %8288, %8299
  %8301 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8289, i32 %8289, i32 26) #1
  %8302 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8289, i32 %8289, i32 21) #1
  %8303 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8289, i32 %8289, i32 7) #1
  %8304 = xor i32 %8301, %8302
  %8305 = xor i32 %8304, %8303
  %8306 = xor i32 %8265, %8241
  %8307 = and i32 %8306, %8289
  %8308 = xor i32 %8307, %8241
  %8309 = add i32 %8305, %8308
  %8310 = add i32 %8309, -949202525
  %8311 = add i32 %8310, %7776
  %8312 = add i32 %8217, %8311
  %8313 = add i32 %8228, %8312
  %8314 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8300, i32 %8300, i32 30) #1
  %8315 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8300, i32 %8300, i32 19) #1
  %8316 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8300, i32 %8300, i32 10) #1
  %8317 = xor i32 %8314, %8315
  %8318 = xor i32 %8317, %8316
  %8319 = or i32 %8276, %8252
  %8320 = and i32 %8319, %8300
  %8321 = and i32 %8276, %8252
  %8322 = or i32 %8320, %8321
  %8323 = add i32 %8318, %8322
  %8324 = add i32 %8312, %8323
  %8325 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8313, i32 %8313, i32 26) #1
  %8326 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8313, i32 %8313, i32 21) #1
  %8327 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8313, i32 %8313, i32 7) #1
  %8328 = xor i32 %8325, %8326
  %8329 = xor i32 %8328, %8327
  %8330 = xor i32 %8289, %8265
  %8331 = and i32 %8330, %8313
  %8332 = xor i32 %8331, %8265
  %8333 = add i32 %8329, %8332
  %8334 = add i32 %8333, -778901479
  %8335 = add i32 %8334, %7789
  %8336 = add i32 %8241, %8335
  %8337 = add i32 %8252, %8336
  %8338 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8324, i32 %8324, i32 30) #1
  %8339 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8324, i32 %8324, i32 19) #1
  %8340 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8324, i32 %8324, i32 10) #1
  %8341 = xor i32 %8338, %8339
  %8342 = xor i32 %8341, %8340
  %8343 = or i32 %8300, %8276
  %8344 = and i32 %8343, %8324
  %8345 = and i32 %8300, %8276
  %8346 = or i32 %8344, %8345
  %8347 = add i32 %8342, %8346
  %8348 = add i32 %8336, %8347
  %8349 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8337, i32 %8337, i32 26) #1
  %8350 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8337, i32 %8337, i32 21) #1
  %8351 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8337, i32 %8337, i32 7) #1
  %8352 = xor i32 %8349, %8350
  %8353 = xor i32 %8352, %8351
  %8354 = xor i32 %8313, %8289
  %8355 = and i32 %8354, %8337
  %8356 = xor i32 %8355, %8289
  %8357 = add i32 %8353, %8356
  %8358 = add i32 %8357, -694614492
  %8359 = add i32 %8358, %7802
  %8360 = add i32 %8265, %8359
  %8361 = add i32 %8276, %8360
  %8362 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8348, i32 %8348, i32 30) #1
  %8363 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8348, i32 %8348, i32 19) #1
  %8364 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8348, i32 %8348, i32 10) #1
  %8365 = xor i32 %8362, %8363
  %8366 = xor i32 %8365, %8364
  %8367 = or i32 %8324, %8300
  %8368 = and i32 %8367, %8348
  %8369 = and i32 %8324, %8300
  %8370 = or i32 %8368, %8369
  %8371 = add i32 %8366, %8370
  %8372 = add i32 %8360, %8371
  %8373 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8361, i32 %8361, i32 26) #1
  %8374 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8361, i32 %8361, i32 21) #1
  %8375 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8361, i32 %8361, i32 7) #1
  %8376 = xor i32 %8373, %8374
  %8377 = xor i32 %8376, %8375
  %8378 = xor i32 %8337, %8313
  %8379 = and i32 %8378, %8361
  %8380 = xor i32 %8379, %8313
  %8381 = add i32 %8377, %8380
  %8382 = add i32 %8381, -200395387
  %8383 = add i32 %8382, %7815
  %8384 = add i32 %8289, %8383
  %8385 = add i32 %8300, %8384
  %8386 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8372, i32 %8372, i32 30) #1
  %8387 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8372, i32 %8372, i32 19) #1
  %8388 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8372, i32 %8372, i32 10) #1
  %8389 = xor i32 %8386, %8387
  %8390 = xor i32 %8389, %8388
  %8391 = or i32 %8348, %8324
  %8392 = and i32 %8391, %8372
  %8393 = and i32 %8348, %8324
  %8394 = or i32 %8392, %8393
  %8395 = add i32 %8390, %8394
  %8396 = add i32 %8384, %8395
  %8397 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8385, i32 %8385, i32 26) #1
  %8398 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8385, i32 %8385, i32 21) #1
  %8399 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8385, i32 %8385, i32 7) #1
  %8400 = xor i32 %8397, %8398
  %8401 = xor i32 %8400, %8399
  %8402 = xor i32 %8361, %8337
  %8403 = and i32 %8402, %8385
  %8404 = xor i32 %8403, %8337
  %8405 = add i32 %8401, %8404
  %8406 = add i32 %8405, 275423344
  %8407 = add i32 %8406, %7828
  %8408 = add i32 %8313, %8407
  %8409 = add i32 %8324, %8408
  %8410 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8396, i32 %8396, i32 30) #1
  %8411 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8396, i32 %8396, i32 19) #1
  %8412 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8396, i32 %8396, i32 10) #1
  %8413 = xor i32 %8410, %8411
  %8414 = xor i32 %8413, %8412
  %8415 = or i32 %8372, %8348
  %8416 = and i32 %8415, %8396
  %8417 = and i32 %8372, %8348
  %8418 = or i32 %8416, %8417
  %8419 = add i32 %8414, %8418
  %8420 = add i32 %8408, %8419
  %8421 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8409, i32 %8409, i32 26) #1
  %8422 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8409, i32 %8409, i32 21) #1
  %8423 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8409, i32 %8409, i32 7) #1
  %8424 = xor i32 %8421, %8422
  %8425 = xor i32 %8424, %8423
  %8426 = xor i32 %8385, %8361
  %8427 = and i32 %8426, %8409
  %8428 = xor i32 %8427, %8361
  %8429 = add i32 %8425, %8428
  %8430 = add i32 %8429, 430227734
  %8431 = add i32 %8430, %7841
  %8432 = add i32 %8337, %8431
  %8433 = add i32 %8348, %8432
  %8434 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8420, i32 %8420, i32 30) #1
  %8435 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8420, i32 %8420, i32 19) #1
  %8436 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8420, i32 %8420, i32 10) #1
  %8437 = xor i32 %8434, %8435
  %8438 = xor i32 %8437, %8436
  %8439 = or i32 %8396, %8372
  %8440 = and i32 %8439, %8420
  %8441 = and i32 %8396, %8372
  %8442 = or i32 %8440, %8441
  %8443 = add i32 %8438, %8442
  %8444 = add i32 %8432, %8443
  %8445 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8433, i32 %8433, i32 26) #1
  %8446 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8433, i32 %8433, i32 21) #1
  %8447 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8433, i32 %8433, i32 7) #1
  %8448 = xor i32 %8445, %8446
  %8449 = xor i32 %8448, %8447
  %8450 = xor i32 %8409, %8385
  %8451 = and i32 %8450, %8433
  %8452 = xor i32 %8451, %8385
  %8453 = add i32 %8449, %8452
  %8454 = add i32 %8453, 506948616
  %8455 = add i32 %8454, %7854
  %8456 = add i32 %8361, %8455
  %8457 = add i32 %8372, %8456
  %8458 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8444, i32 %8444, i32 30) #1
  %8459 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8444, i32 %8444, i32 19) #1
  %8460 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8444, i32 %8444, i32 10) #1
  %8461 = xor i32 %8458, %8459
  %8462 = xor i32 %8461, %8460
  %8463 = or i32 %8420, %8396
  %8464 = and i32 %8463, %8444
  %8465 = and i32 %8420, %8396
  %8466 = or i32 %8464, %8465
  %8467 = add i32 %8462, %8466
  %8468 = add i32 %8456, %8467
  %8469 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8457, i32 %8457, i32 26) #1
  %8470 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8457, i32 %8457, i32 21) #1
  %8471 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8457, i32 %8457, i32 7) #1
  %8472 = xor i32 %8469, %8470
  %8473 = xor i32 %8472, %8471
  %8474 = xor i32 %8433, %8409
  %8475 = and i32 %8474, %8457
  %8476 = xor i32 %8475, %8409
  %8477 = add i32 %8473, %8476
  %8478 = add i32 %8477, 659060556
  %8479 = add i32 %8478, %7867
  %8480 = add i32 %8385, %8479
  %8481 = add i32 %8396, %8480
  %8482 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8468, i32 %8468, i32 30) #1
  %8483 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8468, i32 %8468, i32 19) #1
  %8484 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8468, i32 %8468, i32 10) #1
  %8485 = xor i32 %8482, %8483
  %8486 = xor i32 %8485, %8484
  %8487 = or i32 %8444, %8420
  %8488 = and i32 %8487, %8468
  %8489 = and i32 %8444, %8420
  %8490 = or i32 %8488, %8489
  %8491 = add i32 %8486, %8490
  %8492 = add i32 %8480, %8491
  %8493 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8481, i32 %8481, i32 26) #1
  %8494 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8481, i32 %8481, i32 21) #1
  %8495 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8481, i32 %8481, i32 7) #1
  %8496 = xor i32 %8493, %8494
  %8497 = xor i32 %8496, %8495
  %8498 = xor i32 %8457, %8433
  %8499 = and i32 %8498, %8481
  %8500 = xor i32 %8499, %8433
  %8501 = add i32 %8497, %8500
  %8502 = add i32 %8501, 883997877
  %8503 = add i32 %8502, %7880
  %8504 = add i32 %8409, %8503
  %8505 = add i32 %8420, %8504
  %8506 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8492, i32 %8492, i32 30) #1
  %8507 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8492, i32 %8492, i32 19) #1
  %8508 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8492, i32 %8492, i32 10) #1
  %8509 = xor i32 %8506, %8507
  %8510 = xor i32 %8509, %8508
  %8511 = or i32 %8468, %8444
  %8512 = and i32 %8511, %8492
  %8513 = and i32 %8468, %8444
  %8514 = or i32 %8512, %8513
  %8515 = add i32 %8510, %8514
  %8516 = add i32 %8504, %8515
  %8517 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8505, i32 %8505, i32 26) #1
  %8518 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8505, i32 %8505, i32 21) #1
  %8519 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8505, i32 %8505, i32 7) #1
  %8520 = xor i32 %8517, %8518
  %8521 = xor i32 %8520, %8519
  %8522 = xor i32 %8481, %8457
  %8523 = and i32 %8522, %8505
  %8524 = xor i32 %8523, %8457
  %8525 = add i32 %8521, %8524
  %8526 = add i32 %8525, 958139571
  %8527 = add i32 %8526, %7893
  %8528 = add i32 %8433, %8527
  %8529 = add i32 %8444, %8528
  %8530 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8516, i32 %8516, i32 30) #1
  %8531 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8516, i32 %8516, i32 19) #1
  %8532 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8516, i32 %8516, i32 10) #1
  %8533 = xor i32 %8530, %8531
  %8534 = xor i32 %8533, %8532
  %8535 = or i32 %8492, %8468
  %8536 = and i32 %8535, %8516
  %8537 = and i32 %8492, %8468
  %8538 = or i32 %8536, %8537
  %8539 = add i32 %8534, %8538
  %8540 = add i32 %8528, %8539
  %8541 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8529, i32 %8529, i32 26) #1
  %8542 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8529, i32 %8529, i32 21) #1
  %8543 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8529, i32 %8529, i32 7) #1
  %8544 = xor i32 %8541, %8542
  %8545 = xor i32 %8544, %8543
  %8546 = xor i32 %8505, %8481
  %8547 = and i32 %8546, %8529
  %8548 = xor i32 %8547, %8481
  %8549 = add i32 %8545, %8548
  %8550 = add i32 %8549, 1322822218
  %8551 = add i32 %8550, %7906
  %8552 = add i32 %8457, %8551
  %8553 = add i32 %8468, %8552
  %8554 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8540, i32 %8540, i32 30) #1
  %8555 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8540, i32 %8540, i32 19) #1
  %8556 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8540, i32 %8540, i32 10) #1
  %8557 = xor i32 %8554, %8555
  %8558 = xor i32 %8557, %8556
  %8559 = or i32 %8516, %8492
  %8560 = and i32 %8559, %8540
  %8561 = and i32 %8516, %8492
  %8562 = or i32 %8560, %8561
  %8563 = add i32 %8558, %8562
  %8564 = add i32 %8552, %8563
  %8565 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8553, i32 %8553, i32 26) #1
  %8566 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8553, i32 %8553, i32 21) #1
  %8567 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8553, i32 %8553, i32 7) #1
  %8568 = xor i32 %8565, %8566
  %8569 = xor i32 %8568, %8567
  %8570 = xor i32 %8529, %8505
  %8571 = and i32 %8570, %8553
  %8572 = xor i32 %8571, %8505
  %8573 = add i32 %8569, %8572
  %8574 = add i32 %8573, 1537002063
  %8575 = add i32 %8574, %7919
  %8576 = add i32 %8481, %8575
  %8577 = add i32 %8492, %8576
  %8578 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8564, i32 %8564, i32 30) #1
  %8579 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8564, i32 %8564, i32 19) #1
  %8580 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8564, i32 %8564, i32 10) #1
  %8581 = xor i32 %8578, %8579
  %8582 = xor i32 %8581, %8580
  %8583 = or i32 %8540, %8516
  %8584 = and i32 %8583, %8564
  %8585 = and i32 %8540, %8516
  %8586 = or i32 %8584, %8585
  %8587 = add i32 %8582, %8586
  %8588 = add i32 %8576, %8587
  %8589 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8577, i32 %8577, i32 26) #1
  %8590 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8577, i32 %8577, i32 21) #1
  %8591 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8577, i32 %8577, i32 7) #1
  %8592 = xor i32 %8589, %8590
  %8593 = xor i32 %8592, %8591
  %8594 = xor i32 %8553, %8529
  %8595 = and i32 %8594, %8577
  %8596 = xor i32 %8595, %8529
  %8597 = add i32 %8593, %8596
  %8598 = add i32 %8597, 1747873779
  %8599 = add i32 %8598, %7932
  %8600 = add i32 %8505, %8599
  %8601 = add i32 %8516, %8600
  %8602 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8588, i32 %8588, i32 30) #1
  %8603 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8588, i32 %8588, i32 19) #1
  %8604 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8588, i32 %8588, i32 10) #1
  %8605 = xor i32 %8602, %8603
  %8606 = xor i32 %8605, %8604
  %8607 = or i32 %8564, %8540
  %8608 = and i32 %8607, %8588
  %8609 = and i32 %8564, %8540
  %8610 = or i32 %8608, %8609
  %8611 = add i32 %8606, %8610
  %8612 = add i32 %8600, %8611
  %8613 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8601, i32 %8601, i32 26) #1
  %8614 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8601, i32 %8601, i32 21) #1
  %8615 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8601, i32 %8601, i32 7) #1
  %8616 = xor i32 %8613, %8614
  %8617 = xor i32 %8616, %8615
  %8618 = xor i32 %8577, %8553
  %8619 = and i32 %8618, %8601
  %8620 = xor i32 %8619, %8553
  %8621 = add i32 %8617, %8620
  %8622 = add i32 %8621, 1955562222
  %8623 = add i32 %8622, %7945
  %8624 = add i32 %8529, %8623
  %8625 = add i32 %8540, %8624
  %8626 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8612, i32 %8612, i32 30) #1
  %8627 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8612, i32 %8612, i32 19) #1
  %8628 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8612, i32 %8612, i32 10) #1
  %8629 = xor i32 %8626, %8627
  %8630 = xor i32 %8629, %8628
  %8631 = or i32 %8588, %8564
  %8632 = and i32 %8631, %8612
  %8633 = and i32 %8588, %8564
  %8634 = or i32 %8632, %8633
  %8635 = add i32 %8630, %8634
  %8636 = add i32 %8624, %8635
  %8637 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8625, i32 %8625, i32 26) #1
  %8638 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8625, i32 %8625, i32 21) #1
  %8639 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8625, i32 %8625, i32 7) #1
  %8640 = xor i32 %8637, %8638
  %8641 = xor i32 %8640, %8639
  %8642 = xor i32 %8601, %8577
  %8643 = and i32 %8642, %8625
  %8644 = xor i32 %8643, %8577
  %8645 = add i32 %8641, %8644
  %8646 = add i32 %8645, 2024104815
  %8647 = add i32 %8646, %7958
  %8648 = add i32 %8553, %8647
  %8649 = add i32 %8564, %8648
  %8650 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8636, i32 %8636, i32 30) #1
  %8651 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8636, i32 %8636, i32 19) #1
  %8652 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8636, i32 %8636, i32 10) #1
  %8653 = xor i32 %8650, %8651
  %8654 = xor i32 %8653, %8652
  %8655 = or i32 %8612, %8588
  %8656 = and i32 %8655, %8636
  %8657 = and i32 %8612, %8588
  %8658 = or i32 %8656, %8657
  %8659 = add i32 %8654, %8658
  %8660 = add i32 %8648, %8659
  %8661 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8649, i32 %8649, i32 26) #1
  %8662 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8649, i32 %8649, i32 21) #1
  %8663 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8649, i32 %8649, i32 7) #1
  %8664 = xor i32 %8661, %8662
  %8665 = xor i32 %8664, %8663
  %8666 = xor i32 %8625, %8601
  %8667 = and i32 %8666, %8649
  %8668 = xor i32 %8667, %8601
  %8669 = add i32 %8665, %8668
  %8670 = add i32 %8669, -2067236844
  %8671 = add i32 %8670, %7971
  %8672 = add i32 %8577, %8671
  %8673 = add i32 %8588, %8672
  %8674 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8660, i32 %8660, i32 30) #1
  %8675 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8660, i32 %8660, i32 19) #1
  %8676 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8660, i32 %8660, i32 10) #1
  %8677 = xor i32 %8674, %8675
  %8678 = xor i32 %8677, %8676
  %8679 = or i32 %8636, %8612
  %8680 = and i32 %8679, %8660
  %8681 = and i32 %8636, %8612
  %8682 = or i32 %8680, %8681
  %8683 = add i32 %8678, %8682
  %8684 = add i32 %8672, %8683
  %8685 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8673, i32 %8673, i32 26) #1
  %8686 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8673, i32 %8673, i32 21) #1
  %8687 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8673, i32 %8673, i32 7) #1
  %8688 = xor i32 %8685, %8686
  %8689 = xor i32 %8688, %8687
  %8690 = xor i32 %8649, %8625
  %8691 = and i32 %8690, %8673
  %8692 = xor i32 %8691, %8625
  %8693 = add i32 %8689, %8692
  %8694 = add i32 %8693, -1933114872
  %8695 = add i32 %8694, %7984
  %8696 = add i32 %8601, %8695
  %8697 = add i32 %8612, %8696
  %8698 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8684, i32 %8684, i32 30) #1
  %8699 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8684, i32 %8684, i32 19) #1
  %8700 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8684, i32 %8684, i32 10) #1
  %8701 = xor i32 %8698, %8699
  %8702 = xor i32 %8701, %8700
  %8703 = or i32 %8660, %8636
  %8704 = and i32 %8703, %8684
  %8705 = and i32 %8660, %8636
  %8706 = or i32 %8704, %8705
  %8707 = add i32 %8702, %8706
  %8708 = add i32 %8696, %8707
  %8709 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8697, i32 %8697, i32 26) #1
  %8710 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8697, i32 %8697, i32 21) #1
  %8711 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8697, i32 %8697, i32 7) #1
  %8712 = xor i32 %8709, %8710
  %8713 = xor i32 %8712, %8711
  %8714 = xor i32 %8673, %8649
  %8715 = and i32 %8714, %8697
  %8716 = xor i32 %8715, %8649
  %8717 = add i32 %8713, %8716
  %8718 = add i32 %8717, -1866530822
  %8719 = add i32 %8718, %7997
  %8720 = add i32 %8625, %8719
  %8721 = add i32 %8636, %8720
  %8722 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8708, i32 %8708, i32 30) #1
  %8723 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8708, i32 %8708, i32 19) #1
  %8724 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8708, i32 %8708, i32 10) #1
  %8725 = xor i32 %8722, %8723
  %8726 = xor i32 %8725, %8724
  %8727 = or i32 %8684, %8660
  %8728 = and i32 %8727, %8708
  %8729 = and i32 %8684, %8660
  %8730 = or i32 %8728, %8729
  %8731 = add i32 %8726, %8730
  %8732 = add i32 %8720, %8731
  %8733 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8721, i32 %8721, i32 26) #1
  %8734 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8721, i32 %8721, i32 21) #1
  %8735 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8721, i32 %8721, i32 7) #1
  %8736 = xor i32 %8733, %8734
  %8737 = xor i32 %8736, %8735
  %8738 = xor i32 %8697, %8673
  %8739 = and i32 %8738, %8721
  %8740 = xor i32 %8739, %8673
  %8741 = add i32 %8737, %8740
  %8742 = add i32 %8741, -1538233109
  %8743 = add i32 %8742, %8010
  %8744 = add i32 %8649, %8743
  %8745 = add i32 %8660, %8744
  %8746 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8732, i32 %8732, i32 30) #1
  %8747 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8732, i32 %8732, i32 19) #1
  %8748 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8732, i32 %8732, i32 10) #1
  %8749 = xor i32 %8746, %8747
  %8750 = xor i32 %8749, %8748
  %8751 = or i32 %8708, %8684
  %8752 = and i32 %8751, %8732
  %8753 = and i32 %8708, %8684
  %8754 = or i32 %8752, %8753
  %8755 = add i32 %8750, %8754
  %8756 = add i32 %8744, %8755
  %8757 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8745, i32 %8745, i32 26) #1
  %8758 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8745, i32 %8745, i32 21) #1
  %8759 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8745, i32 %8745, i32 7) #1
  %8760 = xor i32 %8757, %8758
  %8761 = xor i32 %8760, %8759
  %8762 = xor i32 %8721, %8697
  %8763 = and i32 %8762, %8745
  %8764 = xor i32 %8763, %8697
  %8765 = add i32 %8761, %8764
  %8766 = add i32 %8765, -1090935817
  %8767 = add i32 %8766, %8023
  %8768 = add i32 %8673, %8767
  %8769 = add i32 %8684, %8768
  %8770 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8756, i32 %8756, i32 30) #1
  %8771 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8756, i32 %8756, i32 19) #1
  %8772 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8756, i32 %8756, i32 10) #1
  %8773 = xor i32 %8770, %8771
  %8774 = xor i32 %8773, %8772
  %8775 = or i32 %8732, %8708
  %8776 = and i32 %8775, %8756
  %8777 = and i32 %8732, %8708
  %8778 = or i32 %8776, %8777
  %8779 = add i32 %8774, %8778
  %8780 = add i32 %8768, %8779
  %8781 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8769, i32 %8769, i32 26) #1
  %8782 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8769, i32 %8769, i32 21) #1
  %8783 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8769, i32 %8769, i32 7) #1
  %8784 = xor i32 %8781, %8782
  %8785 = xor i32 %8784, %8783
  %8786 = xor i32 %8745, %8721
  %8787 = and i32 %8786, %8769
  %8788 = xor i32 %8787, %8721
  %8789 = add i32 %8785, %8788
  %8790 = add i32 %8789, -965641998
  %8791 = add i32 %8790, %8036
  %8792 = add i32 %8697, %8791
  %8793 = add i32 %8708, %8792
  %8794 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8780, i32 %8780, i32 30) #1
  %8795 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8780, i32 %8780, i32 19) #1
  %8796 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8780, i32 %8780, i32 10) #1
  %8797 = xor i32 %8794, %8795
  %8798 = xor i32 %8797, %8796
  %8799 = or i32 %8756, %8732
  %8800 = and i32 %8799, %8780
  %8801 = and i32 %8756, %8732
  %8802 = or i32 %8800, %8801
  %8803 = add i32 %8798, %8802
  %8804 = add i32 %8792, %8803
  %8805 = add i32 %8804, 1779033703
  %8806 = add i32 %8780, -1150833019
  %8807 = add i32 %8756, 1013904242
  %8808 = add i32 %8732, -1521486534
  %8809 = add i32 %8793, 1359893119
  %8810 = add i32 %8769, -1694144372
  %8811 = add i32 %8745, 528734635
  %8812 = add i32 %8721, 1541459225
  %8813 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8809, i32 %8809, i32 26) #1
  %8814 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8809, i32 %8809, i32 21) #1
  %8815 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8809, i32 %8809, i32 7) #1
  %8816 = xor i32 %8813, %8814
  %8817 = xor i32 %8816, %8815
  %8818 = xor i32 %8810, %8811
  %8819 = and i32 %8818, %8809
  %8820 = xor i32 %8819, %8811
  %8821 = add i32 %8817, %8820
  %8822 = add i32 %8821, 1116352408
  %8823 = add i32 %8822, %7
  %8824 = add i32 %8812, %8823
  %8825 = add i32 %8808, %8824
  %8826 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8805, i32 %8805, i32 30) #1
  %8827 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8805, i32 %8805, i32 19) #1
  %8828 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8805, i32 %8805, i32 10) #1
  %8829 = xor i32 %8826, %8827
  %8830 = xor i32 %8829, %8828
  %8831 = or i32 %8806, %8807
  %8832 = and i32 %8831, %8805
  %8833 = and i32 %8806, %8807
  %8834 = or i32 %8832, %8833
  %8835 = add i32 %8830, %8834
  %8836 = add i32 %8824, %8835
  %8837 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8825, i32 %8825, i32 26) #1
  %8838 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8825, i32 %8825, i32 21) #1
  %8839 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8825, i32 %8825, i32 7) #1
  %8840 = xor i32 %8837, %8838
  %8841 = xor i32 %8840, %8839
  %8842 = xor i32 %8809, %8810
  %8843 = and i32 %8842, %8825
  %8844 = xor i32 %8843, %8810
  %8845 = add i32 %8841, %8844
  %8846 = add i32 %8845, 1899447441
  %8847 = add i32 %8846, %8
  %8848 = add i32 %8811, %8847
  %8849 = add i32 %8807, %8848
  %8850 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8836, i32 %8836, i32 30) #1
  %8851 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8836, i32 %8836, i32 19) #1
  %8852 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8836, i32 %8836, i32 10) #1
  %8853 = xor i32 %8850, %8851
  %8854 = xor i32 %8853, %8852
  %8855 = or i32 %8805, %8806
  %8856 = and i32 %8855, %8836
  %8857 = and i32 %8805, %8806
  %8858 = or i32 %8856, %8857
  %8859 = add i32 %8854, %8858
  %8860 = add i32 %8848, %8859
  %8861 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8849, i32 %8849, i32 26) #1
  %8862 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8849, i32 %8849, i32 21) #1
  %8863 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8849, i32 %8849, i32 7) #1
  %8864 = xor i32 %8861, %8862
  %8865 = xor i32 %8864, %8863
  %8866 = xor i32 %8825, %8809
  %8867 = and i32 %8866, %8849
  %8868 = xor i32 %8867, %8809
  %8869 = add i32 %8865, %8868
  %8870 = add i32 %8869, -1245643825
  %8871 = add i32 %8870, %9
  %8872 = add i32 %8810, %8871
  %8873 = add i32 %8806, %8872
  %8874 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8860, i32 %8860, i32 30) #1
  %8875 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8860, i32 %8860, i32 19) #1
  %8876 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8860, i32 %8860, i32 10) #1
  %8877 = xor i32 %8874, %8875
  %8878 = xor i32 %8877, %8876
  %8879 = or i32 %8836, %8805
  %8880 = and i32 %8879, %8860
  %8881 = and i32 %8836, %8805
  %8882 = or i32 %8880, %8881
  %8883 = add i32 %8878, %8882
  %8884 = add i32 %8872, %8883
  %8885 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8873, i32 %8873, i32 26) #1
  %8886 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8873, i32 %8873, i32 21) #1
  %8887 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8873, i32 %8873, i32 7) #1
  %8888 = xor i32 %8885, %8886
  %8889 = xor i32 %8888, %8887
  %8890 = xor i32 %8849, %8825
  %8891 = and i32 %8890, %8873
  %8892 = xor i32 %8891, %8825
  %8893 = add i32 %8889, %8892
  %8894 = add i32 %8893, -373957723
  %8895 = add i32 %8894, %10
  %8896 = add i32 %8809, %8895
  %8897 = add i32 %8805, %8896
  %8898 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8884, i32 %8884, i32 30) #1
  %8899 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8884, i32 %8884, i32 19) #1
  %8900 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8884, i32 %8884, i32 10) #1
  %8901 = xor i32 %8898, %8899
  %8902 = xor i32 %8901, %8900
  %8903 = or i32 %8860, %8836
  %8904 = and i32 %8903, %8884
  %8905 = and i32 %8860, %8836
  %8906 = or i32 %8904, %8905
  %8907 = add i32 %8902, %8906
  %8908 = add i32 %8896, %8907
  %8909 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8897, i32 %8897, i32 26) #1
  %8910 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8897, i32 %8897, i32 21) #1
  %8911 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8897, i32 %8897, i32 7) #1
  %8912 = xor i32 %8909, %8910
  %8913 = xor i32 %8912, %8911
  %8914 = xor i32 %8873, %8849
  %8915 = and i32 %8914, %8897
  %8916 = xor i32 %8915, %8849
  %8917 = add i32 %8913, %8916
  %8918 = add i32 %8917, 961987163
  %8919 = or i32 %6717, 4
  %8920 = sext i32 %8919 to i64
  %8921 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %8920
  %8922 = load i32, i32 addrspace(4)* %8921, align 4
  %8923 = add i32 %8918, %8922
  %8924 = add i32 %8825, %8923
  %8925 = add i32 %8836, %8924
  %8926 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8908, i32 %8908, i32 30) #1
  %8927 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8908, i32 %8908, i32 19) #1
  %8928 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8908, i32 %8908, i32 10) #1
  %8929 = xor i32 %8926, %8927
  %8930 = xor i32 %8929, %8928
  %8931 = or i32 %8884, %8860
  %8932 = and i32 %8931, %8908
  %8933 = and i32 %8884, %8860
  %8934 = or i32 %8932, %8933
  %8935 = add i32 %8930, %8934
  %8936 = add i32 %8924, %8935
  %8937 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8925, i32 %8925, i32 26) #1
  %8938 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8925, i32 %8925, i32 21) #1
  %8939 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8925, i32 %8925, i32 7) #1
  %8940 = xor i32 %8937, %8938
  %8941 = xor i32 %8940, %8939
  %8942 = xor i32 %8897, %8873
  %8943 = and i32 %8942, %8925
  %8944 = xor i32 %8943, %8873
  %8945 = add i32 %8941, %8944
  %8946 = add i32 %8945, 1508970993
  %8947 = or i32 %6717, 5
  %8948 = sext i32 %8947 to i64
  %8949 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %8948
  %8950 = load i32, i32 addrspace(4)* %8949, align 4
  %8951 = add i32 %8946, %8950
  %8952 = add i32 %8849, %8951
  %8953 = add i32 %8860, %8952
  %8954 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8936, i32 %8936, i32 30) #1
  %8955 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8936, i32 %8936, i32 19) #1
  %8956 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8936, i32 %8936, i32 10) #1
  %8957 = xor i32 %8954, %8955
  %8958 = xor i32 %8957, %8956
  %8959 = or i32 %8908, %8884
  %8960 = and i32 %8959, %8936
  %8961 = and i32 %8908, %8884
  %8962 = or i32 %8960, %8961
  %8963 = add i32 %8958, %8962
  %8964 = add i32 %8952, %8963
  %8965 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8953, i32 %8953, i32 26) #1
  %8966 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8953, i32 %8953, i32 21) #1
  %8967 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8953, i32 %8953, i32 7) #1
  %8968 = xor i32 %8965, %8966
  %8969 = xor i32 %8968, %8967
  %8970 = xor i32 %8925, %8897
  %8971 = and i32 %8970, %8953
  %8972 = xor i32 %8971, %8897
  %8973 = add i32 %8969, %8972
  %8974 = add i32 %8973, -1841331548
  %8975 = or i32 %6717, 6
  %8976 = sext i32 %8975 to i64
  %8977 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %8976
  %8978 = load i32, i32 addrspace(4)* %8977, align 4
  %8979 = add i32 %8974, %8978
  %8980 = add i32 %8873, %8979
  %8981 = add i32 %8884, %8980
  %8982 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8964, i32 %8964, i32 30) #1
  %8983 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8964, i32 %8964, i32 19) #1
  %8984 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8964, i32 %8964, i32 10) #1
  %8985 = xor i32 %8982, %8983
  %8986 = xor i32 %8985, %8984
  %8987 = or i32 %8936, %8908
  %8988 = and i32 %8987, %8964
  %8989 = and i32 %8936, %8908
  %8990 = or i32 %8988, %8989
  %8991 = add i32 %8986, %8990
  %8992 = add i32 %8980, %8991
  %8993 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8981, i32 %8981, i32 26) #1
  %8994 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8981, i32 %8981, i32 21) #1
  %8995 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8981, i32 %8981, i32 7) #1
  %8996 = xor i32 %8993, %8994
  %8997 = xor i32 %8996, %8995
  %8998 = xor i32 %8953, %8925
  %8999 = and i32 %8998, %8981
  %9000 = xor i32 %8999, %8925
  %9001 = add i32 %8997, %9000
  %9002 = add i32 %9001, -1424204075
  %9003 = or i32 %6717, 7
  %9004 = sext i32 %9003 to i64
  %9005 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9004
  %9006 = load i32, i32 addrspace(4)* %9005, align 4
  %9007 = add i32 %9002, %9006
  %9008 = add i32 %8897, %9007
  %9009 = add i32 %8908, %9008
  %9010 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8992, i32 %8992, i32 30) #1
  %9011 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8992, i32 %8992, i32 19) #1
  %9012 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %8992, i32 %8992, i32 10) #1
  %9013 = xor i32 %9010, %9011
  %9014 = xor i32 %9013, %9012
  %9015 = or i32 %8964, %8936
  %9016 = and i32 %9015, %8992
  %9017 = and i32 %8964, %8936
  %9018 = or i32 %9016, %9017
  %9019 = add i32 %9014, %9018
  %9020 = add i32 %9008, %9019
  %9021 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9009, i32 %9009, i32 26) #1
  %9022 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9009, i32 %9009, i32 21) #1
  %9023 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9009, i32 %9009, i32 7) #1
  %9024 = xor i32 %9021, %9022
  %9025 = xor i32 %9024, %9023
  %9026 = xor i32 %8981, %8953
  %9027 = and i32 %9026, %9009
  %9028 = xor i32 %9027, %8953
  %9029 = add i32 %9025, %9028
  %9030 = add i32 %9029, -670586216
  %9031 = or i32 %6717, 8
  %9032 = sext i32 %9031 to i64
  %9033 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9032
  %9034 = load i32, i32 addrspace(4)* %9033, align 4
  %9035 = add i32 %9030, %9034
  %9036 = add i32 %8925, %9035
  %9037 = add i32 %8936, %9036
  %9038 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9020, i32 %9020, i32 30) #1
  %9039 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9020, i32 %9020, i32 19) #1
  %9040 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9020, i32 %9020, i32 10) #1
  %9041 = xor i32 %9038, %9039
  %9042 = xor i32 %9041, %9040
  %9043 = or i32 %8992, %8964
  %9044 = and i32 %9043, %9020
  %9045 = and i32 %8992, %8964
  %9046 = or i32 %9044, %9045
  %9047 = add i32 %9042, %9046
  %9048 = add i32 %9036, %9047
  %9049 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9037, i32 %9037, i32 26) #1
  %9050 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9037, i32 %9037, i32 21) #1
  %9051 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9037, i32 %9037, i32 7) #1
  %9052 = xor i32 %9049, %9050
  %9053 = xor i32 %9052, %9051
  %9054 = xor i32 %9009, %8981
  %9055 = and i32 %9054, %9037
  %9056 = xor i32 %9055, %8981
  %9057 = add i32 %9053, %9056
  %9058 = add i32 %9057, 310598401
  %9059 = or i32 %6717, 9
  %9060 = sext i32 %9059 to i64
  %9061 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9060
  %9062 = load i32, i32 addrspace(4)* %9061, align 4
  %9063 = add i32 %9058, %9062
  %9064 = add i32 %8953, %9063
  %9065 = add i32 %8964, %9064
  %9066 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9048, i32 %9048, i32 30) #1
  %9067 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9048, i32 %9048, i32 19) #1
  %9068 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9048, i32 %9048, i32 10) #1
  %9069 = xor i32 %9066, %9067
  %9070 = xor i32 %9069, %9068
  %9071 = or i32 %9020, %8992
  %9072 = and i32 %9071, %9048
  %9073 = and i32 %9020, %8992
  %9074 = or i32 %9072, %9073
  %9075 = add i32 %9070, %9074
  %9076 = add i32 %9064, %9075
  %9077 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9065, i32 %9065, i32 26) #1
  %9078 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9065, i32 %9065, i32 21) #1
  %9079 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9065, i32 %9065, i32 7) #1
  %9080 = xor i32 %9077, %9078
  %9081 = xor i32 %9080, %9079
  %9082 = xor i32 %9037, %9009
  %9083 = and i32 %9082, %9065
  %9084 = xor i32 %9083, %9009
  %9085 = add i32 %9081, %9084
  %9086 = add i32 %9085, 607225278
  %9087 = or i32 %6717, 10
  %9088 = sext i32 %9087 to i64
  %9089 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9088
  %9090 = load i32, i32 addrspace(4)* %9089, align 4
  %9091 = add i32 %9086, %9090
  %9092 = add i32 %8981, %9091
  %9093 = add i32 %8992, %9092
  %9094 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9076, i32 %9076, i32 30) #1
  %9095 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9076, i32 %9076, i32 19) #1
  %9096 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9076, i32 %9076, i32 10) #1
  %9097 = xor i32 %9094, %9095
  %9098 = xor i32 %9097, %9096
  %9099 = or i32 %9048, %9020
  %9100 = and i32 %9099, %9076
  %9101 = and i32 %9048, %9020
  %9102 = or i32 %9100, %9101
  %9103 = add i32 %9098, %9102
  %9104 = add i32 %9092, %9103
  %9105 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9093, i32 %9093, i32 26) #1
  %9106 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9093, i32 %9093, i32 21) #1
  %9107 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9093, i32 %9093, i32 7) #1
  %9108 = xor i32 %9105, %9106
  %9109 = xor i32 %9108, %9107
  %9110 = xor i32 %9065, %9037
  %9111 = and i32 %9110, %9093
  %9112 = xor i32 %9111, %9037
  %9113 = add i32 %9109, %9112
  %9114 = add i32 %9113, 1426881987
  %9115 = or i32 %6717, 11
  %9116 = sext i32 %9115 to i64
  %9117 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9116
  %9118 = load i32, i32 addrspace(4)* %9117, align 4
  %9119 = add i32 %9114, %9118
  %9120 = add i32 %9009, %9119
  %9121 = add i32 %9020, %9120
  %9122 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9104, i32 %9104, i32 30) #1
  %9123 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9104, i32 %9104, i32 19) #1
  %9124 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9104, i32 %9104, i32 10) #1
  %9125 = xor i32 %9122, %9123
  %9126 = xor i32 %9125, %9124
  %9127 = or i32 %9076, %9048
  %9128 = and i32 %9127, %9104
  %9129 = and i32 %9076, %9048
  %9130 = or i32 %9128, %9129
  %9131 = add i32 %9126, %9130
  %9132 = add i32 %9120, %9131
  %9133 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9121, i32 %9121, i32 26) #1
  %9134 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9121, i32 %9121, i32 21) #1
  %9135 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9121, i32 %9121, i32 7) #1
  %9136 = xor i32 %9133, %9134
  %9137 = xor i32 %9136, %9135
  %9138 = xor i32 %9093, %9065
  %9139 = and i32 %9138, %9121
  %9140 = xor i32 %9139, %9065
  %9141 = add i32 %9137, %9140
  %9142 = add i32 %9141, 1925078388
  %9143 = or i32 %6717, 12
  %9144 = sext i32 %9143 to i64
  %9145 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9144
  %9146 = load i32, i32 addrspace(4)* %9145, align 4
  %9147 = add i32 %9142, %9146
  %9148 = add i32 %9037, %9147
  %9149 = add i32 %9048, %9148
  %9150 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9132, i32 %9132, i32 30) #1
  %9151 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9132, i32 %9132, i32 19) #1
  %9152 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9132, i32 %9132, i32 10) #1
  %9153 = xor i32 %9150, %9151
  %9154 = xor i32 %9153, %9152
  %9155 = or i32 %9104, %9076
  %9156 = and i32 %9155, %9132
  %9157 = and i32 %9104, %9076
  %9158 = or i32 %9156, %9157
  %9159 = add i32 %9154, %9158
  %9160 = add i32 %9148, %9159
  %9161 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9149, i32 %9149, i32 26) #1
  %9162 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9149, i32 %9149, i32 21) #1
  %9163 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9149, i32 %9149, i32 7) #1
  %9164 = xor i32 %9161, %9162
  %9165 = xor i32 %9164, %9163
  %9166 = xor i32 %9121, %9093
  %9167 = and i32 %9166, %9149
  %9168 = xor i32 %9167, %9093
  %9169 = add i32 %9165, %9168
  %9170 = add i32 %9169, -2132889090
  %9171 = or i32 %6717, 13
  %9172 = sext i32 %9171 to i64
  %9173 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9172
  %9174 = load i32, i32 addrspace(4)* %9173, align 4
  %9175 = add i32 %9170, %9174
  %9176 = add i32 %9065, %9175
  %9177 = add i32 %9076, %9176
  %9178 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9160, i32 %9160, i32 30) #1
  %9179 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9160, i32 %9160, i32 19) #1
  %9180 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9160, i32 %9160, i32 10) #1
  %9181 = xor i32 %9178, %9179
  %9182 = xor i32 %9181, %9180
  %9183 = or i32 %9132, %9104
  %9184 = and i32 %9183, %9160
  %9185 = and i32 %9132, %9104
  %9186 = or i32 %9184, %9185
  %9187 = add i32 %9182, %9186
  %9188 = add i32 %9176, %9187
  %9189 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9177, i32 %9177, i32 26) #1
  %9190 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9177, i32 %9177, i32 21) #1
  %9191 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9177, i32 %9177, i32 7) #1
  %9192 = xor i32 %9189, %9190
  %9193 = xor i32 %9192, %9191
  %9194 = xor i32 %9149, %9121
  %9195 = and i32 %9194, %9177
  %9196 = xor i32 %9195, %9121
  %9197 = add i32 %9193, %9196
  %9198 = add i32 %9197, -1680079193
  %9199 = or i32 %6717, 14
  %9200 = sext i32 %9199 to i64
  %9201 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9200
  %9202 = load i32, i32 addrspace(4)* %9201, align 4
  %9203 = add i32 %9198, %9202
  %9204 = add i32 %9093, %9203
  %9205 = add i32 %9104, %9204
  %9206 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9188, i32 %9188, i32 30) #1
  %9207 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9188, i32 %9188, i32 19) #1
  %9208 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9188, i32 %9188, i32 10) #1
  %9209 = xor i32 %9206, %9207
  %9210 = xor i32 %9209, %9208
  %9211 = or i32 %9160, %9132
  %9212 = and i32 %9211, %9188
  %9213 = and i32 %9160, %9132
  %9214 = or i32 %9212, %9213
  %9215 = add i32 %9210, %9214
  %9216 = add i32 %9204, %9215
  %9217 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9205, i32 %9205, i32 26) #1
  %9218 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9205, i32 %9205, i32 21) #1
  %9219 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9205, i32 %9205, i32 7) #1
  %9220 = xor i32 %9217, %9218
  %9221 = xor i32 %9220, %9219
  %9222 = xor i32 %9177, %9149
  %9223 = and i32 %9222, %9205
  %9224 = xor i32 %9223, %9149
  %9225 = add i32 %9221, %9224
  %9226 = add i32 %9225, -1046744716
  %9227 = or i32 %6717, 15
  %9228 = sext i32 %9227 to i64
  %9229 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9228
  %9230 = load i32, i32 addrspace(4)* %9229, align 4
  %9231 = add i32 %9226, %9230
  %9232 = add i32 %9121, %9231
  %9233 = add i32 %9132, %9232
  %9234 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9216, i32 %9216, i32 30) #1
  %9235 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9216, i32 %9216, i32 19) #1
  %9236 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9216, i32 %9216, i32 10) #1
  %9237 = xor i32 %9234, %9235
  %9238 = xor i32 %9237, %9236
  %9239 = or i32 %9188, %9160
  %9240 = and i32 %9239, %9216
  %9241 = and i32 %9188, %9160
  %9242 = or i32 %9240, %9241
  %9243 = add i32 %9238, %9242
  %9244 = add i32 %9232, %9243
  %9245 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9233, i32 %9233, i32 26) #1
  %9246 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9233, i32 %9233, i32 21) #1
  %9247 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9233, i32 %9233, i32 7) #1
  %9248 = xor i32 %9245, %9246
  %9249 = xor i32 %9248, %9247
  %9250 = xor i32 %9205, %9177
  %9251 = and i32 %9250, %9233
  %9252 = xor i32 %9251, %9177
  %9253 = add i32 %9249, %9252
  %9254 = add i32 %9253, -459576895
  %9255 = or i32 %6717, 16
  %9256 = sext i32 %9255 to i64
  %9257 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9256
  %9258 = load i32, i32 addrspace(4)* %9257, align 4
  %9259 = add i32 %9254, %9258
  %9260 = add i32 %9149, %9259
  %9261 = add i32 %9160, %9260
  %9262 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9244, i32 %9244, i32 30) #1
  %9263 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9244, i32 %9244, i32 19) #1
  %9264 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9244, i32 %9244, i32 10) #1
  %9265 = xor i32 %9262, %9263
  %9266 = xor i32 %9265, %9264
  %9267 = or i32 %9216, %9188
  %9268 = and i32 %9267, %9244
  %9269 = and i32 %9216, %9188
  %9270 = or i32 %9268, %9269
  %9271 = add i32 %9266, %9270
  %9272 = add i32 %9260, %9271
  %9273 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9261, i32 %9261, i32 26) #1
  %9274 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9261, i32 %9261, i32 21) #1
  %9275 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9261, i32 %9261, i32 7) #1
  %9276 = xor i32 %9273, %9274
  %9277 = xor i32 %9276, %9275
  %9278 = xor i32 %9233, %9205
  %9279 = and i32 %9278, %9261
  %9280 = xor i32 %9279, %9205
  %9281 = add i32 %9277, %9280
  %9282 = add i32 %9281, -272742522
  %9283 = or i32 %6717, 17
  %9284 = sext i32 %9283 to i64
  %9285 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9284
  %9286 = load i32, i32 addrspace(4)* %9285, align 4
  %9287 = add i32 %9282, %9286
  %9288 = add i32 %9177, %9287
  %9289 = add i32 %9188, %9288
  %9290 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9272, i32 %9272, i32 30) #1
  %9291 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9272, i32 %9272, i32 19) #1
  %9292 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9272, i32 %9272, i32 10) #1
  %9293 = xor i32 %9290, %9291
  %9294 = xor i32 %9293, %9292
  %9295 = or i32 %9244, %9216
  %9296 = and i32 %9295, %9272
  %9297 = and i32 %9244, %9216
  %9298 = or i32 %9296, %9297
  %9299 = add i32 %9294, %9298
  %9300 = add i32 %9288, %9299
  %9301 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9289, i32 %9289, i32 26) #1
  %9302 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9289, i32 %9289, i32 21) #1
  %9303 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9289, i32 %9289, i32 7) #1
  %9304 = xor i32 %9301, %9302
  %9305 = xor i32 %9304, %9303
  %9306 = xor i32 %9261, %9233
  %9307 = and i32 %9306, %9289
  %9308 = xor i32 %9307, %9233
  %9309 = add i32 %9305, %9308
  %9310 = add i32 %9309, 264347078
  %9311 = or i32 %6717, 18
  %9312 = sext i32 %9311 to i64
  %9313 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9312
  %9314 = load i32, i32 addrspace(4)* %9313, align 4
  %9315 = add i32 %9310, %9314
  %9316 = add i32 %9205, %9315
  %9317 = add i32 %9216, %9316
  %9318 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9300, i32 %9300, i32 30) #1
  %9319 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9300, i32 %9300, i32 19) #1
  %9320 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9300, i32 %9300, i32 10) #1
  %9321 = xor i32 %9318, %9319
  %9322 = xor i32 %9321, %9320
  %9323 = or i32 %9272, %9244
  %9324 = and i32 %9323, %9300
  %9325 = and i32 %9272, %9244
  %9326 = or i32 %9324, %9325
  %9327 = add i32 %9322, %9326
  %9328 = add i32 %9316, %9327
  %9329 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9317, i32 %9317, i32 26) #1
  %9330 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9317, i32 %9317, i32 21) #1
  %9331 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9317, i32 %9317, i32 7) #1
  %9332 = xor i32 %9329, %9330
  %9333 = xor i32 %9332, %9331
  %9334 = xor i32 %9289, %9261
  %9335 = and i32 %9334, %9317
  %9336 = xor i32 %9335, %9261
  %9337 = add i32 %9333, %9336
  %9338 = add i32 %9337, 604807628
  %9339 = or i32 %6717, 19
  %9340 = sext i32 %9339 to i64
  %9341 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9340
  %9342 = load i32, i32 addrspace(4)* %9341, align 4
  %9343 = add i32 %9338, %9342
  %9344 = add i32 %9233, %9343
  %9345 = add i32 %9244, %9344
  %9346 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9328, i32 %9328, i32 30) #1
  %9347 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9328, i32 %9328, i32 19) #1
  %9348 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9328, i32 %9328, i32 10) #1
  %9349 = xor i32 %9346, %9347
  %9350 = xor i32 %9349, %9348
  %9351 = or i32 %9300, %9272
  %9352 = and i32 %9351, %9328
  %9353 = and i32 %9300, %9272
  %9354 = or i32 %9352, %9353
  %9355 = add i32 %9350, %9354
  %9356 = add i32 %9344, %9355
  %9357 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9345, i32 %9345, i32 26) #1
  %9358 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9345, i32 %9345, i32 21) #1
  %9359 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9345, i32 %9345, i32 7) #1
  %9360 = xor i32 %9357, %9358
  %9361 = xor i32 %9360, %9359
  %9362 = xor i32 %9317, %9289
  %9363 = and i32 %9362, %9345
  %9364 = xor i32 %9363, %9289
  %9365 = add i32 %9361, %9364
  %9366 = add i32 %9365, 770255983
  %9367 = or i32 %6717, 20
  %9368 = sext i32 %9367 to i64
  %9369 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9368
  %9370 = load i32, i32 addrspace(4)* %9369, align 4
  %9371 = add i32 %9366, %9370
  %9372 = add i32 %9261, %9371
  %9373 = add i32 %9272, %9372
  %9374 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9356, i32 %9356, i32 30) #1
  %9375 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9356, i32 %9356, i32 19) #1
  %9376 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9356, i32 %9356, i32 10) #1
  %9377 = xor i32 %9374, %9375
  %9378 = xor i32 %9377, %9376
  %9379 = or i32 %9328, %9300
  %9380 = and i32 %9379, %9356
  %9381 = and i32 %9328, %9300
  %9382 = or i32 %9380, %9381
  %9383 = add i32 %9378, %9382
  %9384 = add i32 %9372, %9383
  %9385 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9373, i32 %9373, i32 26) #1
  %9386 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9373, i32 %9373, i32 21) #1
  %9387 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9373, i32 %9373, i32 7) #1
  %9388 = xor i32 %9385, %9386
  %9389 = xor i32 %9388, %9387
  %9390 = xor i32 %9345, %9317
  %9391 = and i32 %9390, %9373
  %9392 = xor i32 %9391, %9317
  %9393 = add i32 %9389, %9392
  %9394 = add i32 %9393, 1249150122
  %9395 = or i32 %6717, 21
  %9396 = sext i32 %9395 to i64
  %9397 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9396
  %9398 = load i32, i32 addrspace(4)* %9397, align 4
  %9399 = add i32 %9394, %9398
  %9400 = add i32 %9289, %9399
  %9401 = add i32 %9300, %9400
  %9402 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9384, i32 %9384, i32 30) #1
  %9403 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9384, i32 %9384, i32 19) #1
  %9404 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9384, i32 %9384, i32 10) #1
  %9405 = xor i32 %9402, %9403
  %9406 = xor i32 %9405, %9404
  %9407 = or i32 %9356, %9328
  %9408 = and i32 %9407, %9384
  %9409 = and i32 %9356, %9328
  %9410 = or i32 %9408, %9409
  %9411 = add i32 %9406, %9410
  %9412 = add i32 %9400, %9411
  %9413 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9401, i32 %9401, i32 26) #1
  %9414 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9401, i32 %9401, i32 21) #1
  %9415 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9401, i32 %9401, i32 7) #1
  %9416 = xor i32 %9413, %9414
  %9417 = xor i32 %9416, %9415
  %9418 = xor i32 %9373, %9345
  %9419 = and i32 %9418, %9401
  %9420 = xor i32 %9419, %9345
  %9421 = add i32 %9417, %9420
  %9422 = add i32 %9421, 1555081692
  %9423 = or i32 %6717, 22
  %9424 = sext i32 %9423 to i64
  %9425 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9424
  %9426 = load i32, i32 addrspace(4)* %9425, align 4
  %9427 = add i32 %9422, %9426
  %9428 = add i32 %9317, %9427
  %9429 = add i32 %9328, %9428
  %9430 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9412, i32 %9412, i32 30) #1
  %9431 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9412, i32 %9412, i32 19) #1
  %9432 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9412, i32 %9412, i32 10) #1
  %9433 = xor i32 %9430, %9431
  %9434 = xor i32 %9433, %9432
  %9435 = or i32 %9384, %9356
  %9436 = and i32 %9435, %9412
  %9437 = and i32 %9384, %9356
  %9438 = or i32 %9436, %9437
  %9439 = add i32 %9434, %9438
  %9440 = add i32 %9428, %9439
  %9441 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9429, i32 %9429, i32 26) #1
  %9442 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9429, i32 %9429, i32 21) #1
  %9443 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9429, i32 %9429, i32 7) #1
  %9444 = xor i32 %9441, %9442
  %9445 = xor i32 %9444, %9443
  %9446 = xor i32 %9401, %9373
  %9447 = and i32 %9446, %9429
  %9448 = xor i32 %9447, %9373
  %9449 = add i32 %9445, %9448
  %9450 = add i32 %9449, 1996064986
  %9451 = or i32 %6717, 23
  %9452 = sext i32 %9451 to i64
  %9453 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9452
  %9454 = load i32, i32 addrspace(4)* %9453, align 4
  %9455 = add i32 %9450, %9454
  %9456 = add i32 %9345, %9455
  %9457 = add i32 %9356, %9456
  %9458 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9440, i32 %9440, i32 30) #1
  %9459 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9440, i32 %9440, i32 19) #1
  %9460 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9440, i32 %9440, i32 10) #1
  %9461 = xor i32 %9458, %9459
  %9462 = xor i32 %9461, %9460
  %9463 = or i32 %9412, %9384
  %9464 = and i32 %9463, %9440
  %9465 = and i32 %9412, %9384
  %9466 = or i32 %9464, %9465
  %9467 = add i32 %9462, %9466
  %9468 = add i32 %9456, %9467
  %9469 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9457, i32 %9457, i32 26) #1
  %9470 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9457, i32 %9457, i32 21) #1
  %9471 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9457, i32 %9457, i32 7) #1
  %9472 = xor i32 %9469, %9470
  %9473 = xor i32 %9472, %9471
  %9474 = xor i32 %9429, %9401
  %9475 = and i32 %9474, %9457
  %9476 = xor i32 %9475, %9401
  %9477 = add i32 %9473, %9476
  %9478 = add i32 %9477, -1740746414
  %9479 = or i32 %6717, 24
  %9480 = sext i32 %9479 to i64
  %9481 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9480
  %9482 = load i32, i32 addrspace(4)* %9481, align 4
  %9483 = add i32 %9478, %9482
  %9484 = add i32 %9373, %9483
  %9485 = add i32 %9384, %9484
  %9486 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9468, i32 %9468, i32 30) #1
  %9487 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9468, i32 %9468, i32 19) #1
  %9488 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9468, i32 %9468, i32 10) #1
  %9489 = xor i32 %9486, %9487
  %9490 = xor i32 %9489, %9488
  %9491 = or i32 %9440, %9412
  %9492 = and i32 %9491, %9468
  %9493 = and i32 %9440, %9412
  %9494 = or i32 %9492, %9493
  %9495 = add i32 %9490, %9494
  %9496 = add i32 %9484, %9495
  %9497 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9485, i32 %9485, i32 26) #1
  %9498 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9485, i32 %9485, i32 21) #1
  %9499 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9485, i32 %9485, i32 7) #1
  %9500 = xor i32 %9497, %9498
  %9501 = xor i32 %9500, %9499
  %9502 = xor i32 %9457, %9429
  %9503 = and i32 %9502, %9485
  %9504 = xor i32 %9503, %9429
  %9505 = add i32 %9501, %9504
  %9506 = add i32 %9505, -1473132947
  %9507 = or i32 %6717, 25
  %9508 = sext i32 %9507 to i64
  %9509 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9508
  %9510 = load i32, i32 addrspace(4)* %9509, align 4
  %9511 = add i32 %9506, %9510
  %9512 = add i32 %9401, %9511
  %9513 = add i32 %9412, %9512
  %9514 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9496, i32 %9496, i32 30) #1
  %9515 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9496, i32 %9496, i32 19) #1
  %9516 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9496, i32 %9496, i32 10) #1
  %9517 = xor i32 %9514, %9515
  %9518 = xor i32 %9517, %9516
  %9519 = or i32 %9468, %9440
  %9520 = and i32 %9519, %9496
  %9521 = and i32 %9468, %9440
  %9522 = or i32 %9520, %9521
  %9523 = add i32 %9518, %9522
  %9524 = add i32 %9512, %9523
  %9525 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9513, i32 %9513, i32 26) #1
  %9526 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9513, i32 %9513, i32 21) #1
  %9527 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9513, i32 %9513, i32 7) #1
  %9528 = xor i32 %9525, %9526
  %9529 = xor i32 %9528, %9527
  %9530 = xor i32 %9485, %9457
  %9531 = and i32 %9530, %9513
  %9532 = xor i32 %9531, %9457
  %9533 = add i32 %9529, %9532
  %9534 = add i32 %9533, -1341970488
  %9535 = or i32 %6717, 26
  %9536 = sext i32 %9535 to i64
  %9537 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9536
  %9538 = load i32, i32 addrspace(4)* %9537, align 4
  %9539 = add i32 %9534, %9538
  %9540 = add i32 %9429, %9539
  %9541 = add i32 %9440, %9540
  %9542 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9524, i32 %9524, i32 30) #1
  %9543 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9524, i32 %9524, i32 19) #1
  %9544 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9524, i32 %9524, i32 10) #1
  %9545 = xor i32 %9542, %9543
  %9546 = xor i32 %9545, %9544
  %9547 = or i32 %9496, %9468
  %9548 = and i32 %9547, %9524
  %9549 = and i32 %9496, %9468
  %9550 = or i32 %9548, %9549
  %9551 = add i32 %9546, %9550
  %9552 = add i32 %9540, %9551
  %9553 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9541, i32 %9541, i32 26) #1
  %9554 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9541, i32 %9541, i32 21) #1
  %9555 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9541, i32 %9541, i32 7) #1
  %9556 = xor i32 %9553, %9554
  %9557 = xor i32 %9556, %9555
  %9558 = xor i32 %9513, %9485
  %9559 = and i32 %9558, %9541
  %9560 = xor i32 %9559, %9485
  %9561 = add i32 %9557, %9560
  %9562 = add i32 %9561, -1084653625
  %9563 = or i32 %6717, 27
  %9564 = sext i32 %9563 to i64
  %9565 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9564
  %9566 = load i32, i32 addrspace(4)* %9565, align 4
  %9567 = add i32 %9562, %9566
  %9568 = add i32 %9457, %9567
  %9569 = add i32 %9468, %9568
  %9570 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9552, i32 %9552, i32 30) #1
  %9571 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9552, i32 %9552, i32 19) #1
  %9572 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9552, i32 %9552, i32 10) #1
  %9573 = xor i32 %9570, %9571
  %9574 = xor i32 %9573, %9572
  %9575 = or i32 %9524, %9496
  %9576 = and i32 %9575, %9552
  %9577 = and i32 %9524, %9496
  %9578 = or i32 %9576, %9577
  %9579 = add i32 %9574, %9578
  %9580 = add i32 %9568, %9579
  %9581 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9569, i32 %9569, i32 26) #1
  %9582 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9569, i32 %9569, i32 21) #1
  %9583 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9569, i32 %9569, i32 7) #1
  %9584 = xor i32 %9581, %9582
  %9585 = xor i32 %9584, %9583
  %9586 = xor i32 %9541, %9513
  %9587 = and i32 %9586, %9569
  %9588 = xor i32 %9587, %9513
  %9589 = add i32 %9585, %9588
  %9590 = add i32 %9589, -958395405
  %9591 = or i32 %6717, 28
  %9592 = sext i32 %9591 to i64
  %9593 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9592
  %9594 = load i32, i32 addrspace(4)* %9593, align 4
  %9595 = add i32 %9590, %9594
  %9596 = add i32 %9485, %9595
  %9597 = add i32 %9496, %9596
  %9598 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9580, i32 %9580, i32 30) #1
  %9599 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9580, i32 %9580, i32 19) #1
  %9600 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9580, i32 %9580, i32 10) #1
  %9601 = xor i32 %9598, %9599
  %9602 = xor i32 %9601, %9600
  %9603 = or i32 %9552, %9524
  %9604 = and i32 %9603, %9580
  %9605 = and i32 %9552, %9524
  %9606 = or i32 %9604, %9605
  %9607 = add i32 %9602, %9606
  %9608 = add i32 %9596, %9607
  %9609 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9597, i32 %9597, i32 26) #1
  %9610 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9597, i32 %9597, i32 21) #1
  %9611 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9597, i32 %9597, i32 7) #1
  %9612 = xor i32 %9609, %9610
  %9613 = xor i32 %9612, %9611
  %9614 = xor i32 %9569, %9541
  %9615 = and i32 %9614, %9597
  %9616 = xor i32 %9615, %9541
  %9617 = add i32 %9613, %9616
  %9618 = add i32 %9617, -710438585
  %9619 = or i32 %6717, 29
  %9620 = sext i32 %9619 to i64
  %9621 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9620
  %9622 = load i32, i32 addrspace(4)* %9621, align 4
  %9623 = add i32 %9618, %9622
  %9624 = add i32 %9513, %9623
  %9625 = add i32 %9524, %9624
  %9626 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9608, i32 %9608, i32 30) #1
  %9627 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9608, i32 %9608, i32 19) #1
  %9628 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9608, i32 %9608, i32 10) #1
  %9629 = xor i32 %9626, %9627
  %9630 = xor i32 %9629, %9628
  %9631 = or i32 %9580, %9552
  %9632 = and i32 %9631, %9608
  %9633 = and i32 %9580, %9552
  %9634 = or i32 %9632, %9633
  %9635 = add i32 %9630, %9634
  %9636 = add i32 %9624, %9635
  %9637 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9625, i32 %9625, i32 26) #1
  %9638 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9625, i32 %9625, i32 21) #1
  %9639 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9625, i32 %9625, i32 7) #1
  %9640 = xor i32 %9637, %9638
  %9641 = xor i32 %9640, %9639
  %9642 = xor i32 %9597, %9569
  %9643 = and i32 %9642, %9625
  %9644 = xor i32 %9643, %9569
  %9645 = add i32 %9641, %9644
  %9646 = add i32 %9645, 113926993
  %9647 = or i32 %6717, 30
  %9648 = sext i32 %9647 to i64
  %9649 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9648
  %9650 = load i32, i32 addrspace(4)* %9649, align 4
  %9651 = add i32 %9646, %9650
  %9652 = add i32 %9541, %9651
  %9653 = add i32 %9552, %9652
  %9654 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9636, i32 %9636, i32 30) #1
  %9655 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9636, i32 %9636, i32 19) #1
  %9656 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9636, i32 %9636, i32 10) #1
  %9657 = xor i32 %9654, %9655
  %9658 = xor i32 %9657, %9656
  %9659 = or i32 %9608, %9580
  %9660 = and i32 %9659, %9636
  %9661 = and i32 %9608, %9580
  %9662 = or i32 %9660, %9661
  %9663 = add i32 %9658, %9662
  %9664 = add i32 %9652, %9663
  %9665 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9653, i32 %9653, i32 26) #1
  %9666 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9653, i32 %9653, i32 21) #1
  %9667 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9653, i32 %9653, i32 7) #1
  %9668 = xor i32 %9665, %9666
  %9669 = xor i32 %9668, %9667
  %9670 = xor i32 %9625, %9597
  %9671 = and i32 %9670, %9653
  %9672 = xor i32 %9671, %9597
  %9673 = add i32 %9669, %9672
  %9674 = add i32 %9673, 338241895
  %9675 = or i32 %6717, 31
  %9676 = sext i32 %9675 to i64
  %9677 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9676
  %9678 = load i32, i32 addrspace(4)* %9677, align 4
  %9679 = add i32 %9674, %9678
  %9680 = add i32 %9569, %9679
  %9681 = add i32 %9580, %9680
  %9682 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9664, i32 %9664, i32 30) #1
  %9683 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9664, i32 %9664, i32 19) #1
  %9684 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9664, i32 %9664, i32 10) #1
  %9685 = xor i32 %9682, %9683
  %9686 = xor i32 %9685, %9684
  %9687 = or i32 %9636, %9608
  %9688 = and i32 %9687, %9664
  %9689 = and i32 %9636, %9608
  %9690 = or i32 %9688, %9689
  %9691 = add i32 %9686, %9690
  %9692 = add i32 %9680, %9691
  %9693 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9681, i32 %9681, i32 26) #1
  %9694 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9681, i32 %9681, i32 21) #1
  %9695 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9681, i32 %9681, i32 7) #1
  %9696 = xor i32 %9693, %9694
  %9697 = xor i32 %9696, %9695
  %9698 = xor i32 %9653, %9625
  %9699 = and i32 %9698, %9681
  %9700 = xor i32 %9699, %9625
  %9701 = add i32 %9697, %9700
  %9702 = add i32 %9701, 666307205
  %9703 = or i32 %6717, 32
  %9704 = sext i32 %9703 to i64
  %9705 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9704
  %9706 = load i32, i32 addrspace(4)* %9705, align 4
  %9707 = add i32 %9702, %9706
  %9708 = add i32 %9597, %9707
  %9709 = add i32 %9608, %9708
  %9710 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9692, i32 %9692, i32 30) #1
  %9711 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9692, i32 %9692, i32 19) #1
  %9712 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9692, i32 %9692, i32 10) #1
  %9713 = xor i32 %9710, %9711
  %9714 = xor i32 %9713, %9712
  %9715 = or i32 %9664, %9636
  %9716 = and i32 %9715, %9692
  %9717 = and i32 %9664, %9636
  %9718 = or i32 %9716, %9717
  %9719 = add i32 %9714, %9718
  %9720 = add i32 %9708, %9719
  %9721 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9709, i32 %9709, i32 26) #1
  %9722 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9709, i32 %9709, i32 21) #1
  %9723 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9709, i32 %9709, i32 7) #1
  %9724 = xor i32 %9721, %9722
  %9725 = xor i32 %9724, %9723
  %9726 = xor i32 %9681, %9653
  %9727 = and i32 %9726, %9709
  %9728 = xor i32 %9727, %9653
  %9729 = add i32 %9725, %9728
  %9730 = add i32 %9729, 773529912
  %9731 = or i32 %6717, 33
  %9732 = sext i32 %9731 to i64
  %9733 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9732
  %9734 = load i32, i32 addrspace(4)* %9733, align 4
  %9735 = add i32 %9730, %9734
  %9736 = add i32 %9625, %9735
  %9737 = add i32 %9636, %9736
  %9738 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9720, i32 %9720, i32 30) #1
  %9739 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9720, i32 %9720, i32 19) #1
  %9740 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9720, i32 %9720, i32 10) #1
  %9741 = xor i32 %9738, %9739
  %9742 = xor i32 %9741, %9740
  %9743 = or i32 %9692, %9664
  %9744 = and i32 %9743, %9720
  %9745 = and i32 %9692, %9664
  %9746 = or i32 %9744, %9745
  %9747 = add i32 %9742, %9746
  %9748 = add i32 %9736, %9747
  %9749 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9737, i32 %9737, i32 26) #1
  %9750 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9737, i32 %9737, i32 21) #1
  %9751 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9737, i32 %9737, i32 7) #1
  %9752 = xor i32 %9749, %9750
  %9753 = xor i32 %9752, %9751
  %9754 = xor i32 %9709, %9681
  %9755 = and i32 %9754, %9737
  %9756 = xor i32 %9755, %9681
  %9757 = add i32 %9753, %9756
  %9758 = add i32 %9757, 1294757372
  %9759 = or i32 %6717, 34
  %9760 = sext i32 %9759 to i64
  %9761 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9760
  %9762 = load i32, i32 addrspace(4)* %9761, align 4
  %9763 = add i32 %9758, %9762
  %9764 = add i32 %9653, %9763
  %9765 = add i32 %9664, %9764
  %9766 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9748, i32 %9748, i32 30) #1
  %9767 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9748, i32 %9748, i32 19) #1
  %9768 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9748, i32 %9748, i32 10) #1
  %9769 = xor i32 %9766, %9767
  %9770 = xor i32 %9769, %9768
  %9771 = or i32 %9720, %9692
  %9772 = and i32 %9771, %9748
  %9773 = and i32 %9720, %9692
  %9774 = or i32 %9772, %9773
  %9775 = add i32 %9770, %9774
  %9776 = add i32 %9764, %9775
  %9777 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9765, i32 %9765, i32 26) #1
  %9778 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9765, i32 %9765, i32 21) #1
  %9779 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9765, i32 %9765, i32 7) #1
  %9780 = xor i32 %9777, %9778
  %9781 = xor i32 %9780, %9779
  %9782 = xor i32 %9737, %9709
  %9783 = and i32 %9782, %9765
  %9784 = xor i32 %9783, %9709
  %9785 = add i32 %9781, %9784
  %9786 = add i32 %9785, 1396182291
  %9787 = or i32 %6717, 35
  %9788 = sext i32 %9787 to i64
  %9789 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9788
  %9790 = load i32, i32 addrspace(4)* %9789, align 4
  %9791 = add i32 %9786, %9790
  %9792 = add i32 %9681, %9791
  %9793 = add i32 %9692, %9792
  %9794 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9776, i32 %9776, i32 30) #1
  %9795 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9776, i32 %9776, i32 19) #1
  %9796 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9776, i32 %9776, i32 10) #1
  %9797 = xor i32 %9794, %9795
  %9798 = xor i32 %9797, %9796
  %9799 = or i32 %9748, %9720
  %9800 = and i32 %9799, %9776
  %9801 = and i32 %9748, %9720
  %9802 = or i32 %9800, %9801
  %9803 = add i32 %9798, %9802
  %9804 = add i32 %9792, %9803
  %9805 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9793, i32 %9793, i32 26) #1
  %9806 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9793, i32 %9793, i32 21) #1
  %9807 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9793, i32 %9793, i32 7) #1
  %9808 = xor i32 %9805, %9806
  %9809 = xor i32 %9808, %9807
  %9810 = xor i32 %9765, %9737
  %9811 = and i32 %9810, %9793
  %9812 = xor i32 %9811, %9737
  %9813 = add i32 %9809, %9812
  %9814 = add i32 %9813, 1695183700
  %9815 = or i32 %6717, 36
  %9816 = sext i32 %9815 to i64
  %9817 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9816
  %9818 = load i32, i32 addrspace(4)* %9817, align 4
  %9819 = add i32 %9814, %9818
  %9820 = add i32 %9709, %9819
  %9821 = add i32 %9720, %9820
  %9822 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9804, i32 %9804, i32 30) #1
  %9823 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9804, i32 %9804, i32 19) #1
  %9824 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9804, i32 %9804, i32 10) #1
  %9825 = xor i32 %9822, %9823
  %9826 = xor i32 %9825, %9824
  %9827 = or i32 %9776, %9748
  %9828 = and i32 %9827, %9804
  %9829 = and i32 %9776, %9748
  %9830 = or i32 %9828, %9829
  %9831 = add i32 %9826, %9830
  %9832 = add i32 %9820, %9831
  %9833 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9821, i32 %9821, i32 26) #1
  %9834 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9821, i32 %9821, i32 21) #1
  %9835 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9821, i32 %9821, i32 7) #1
  %9836 = xor i32 %9833, %9834
  %9837 = xor i32 %9836, %9835
  %9838 = xor i32 %9793, %9765
  %9839 = and i32 %9838, %9821
  %9840 = xor i32 %9839, %9765
  %9841 = add i32 %9837, %9840
  %9842 = add i32 %9841, 1986661051
  %9843 = or i32 %6717, 37
  %9844 = sext i32 %9843 to i64
  %9845 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9844
  %9846 = load i32, i32 addrspace(4)* %9845, align 4
  %9847 = add i32 %9842, %9846
  %9848 = add i32 %9737, %9847
  %9849 = add i32 %9748, %9848
  %9850 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9832, i32 %9832, i32 30) #1
  %9851 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9832, i32 %9832, i32 19) #1
  %9852 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9832, i32 %9832, i32 10) #1
  %9853 = xor i32 %9850, %9851
  %9854 = xor i32 %9853, %9852
  %9855 = or i32 %9804, %9776
  %9856 = and i32 %9855, %9832
  %9857 = and i32 %9804, %9776
  %9858 = or i32 %9856, %9857
  %9859 = add i32 %9854, %9858
  %9860 = add i32 %9848, %9859
  %9861 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9849, i32 %9849, i32 26) #1
  %9862 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9849, i32 %9849, i32 21) #1
  %9863 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9849, i32 %9849, i32 7) #1
  %9864 = xor i32 %9861, %9862
  %9865 = xor i32 %9864, %9863
  %9866 = xor i32 %9821, %9793
  %9867 = and i32 %9866, %9849
  %9868 = xor i32 %9867, %9793
  %9869 = add i32 %9865, %9868
  %9870 = add i32 %9869, -2117940946
  %9871 = or i32 %6717, 38
  %9872 = sext i32 %9871 to i64
  %9873 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9872
  %9874 = load i32, i32 addrspace(4)* %9873, align 4
  %9875 = add i32 %9870, %9874
  %9876 = add i32 %9765, %9875
  %9877 = add i32 %9776, %9876
  %9878 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9860, i32 %9860, i32 30) #1
  %9879 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9860, i32 %9860, i32 19) #1
  %9880 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9860, i32 %9860, i32 10) #1
  %9881 = xor i32 %9878, %9879
  %9882 = xor i32 %9881, %9880
  %9883 = or i32 %9832, %9804
  %9884 = and i32 %9883, %9860
  %9885 = and i32 %9832, %9804
  %9886 = or i32 %9884, %9885
  %9887 = add i32 %9882, %9886
  %9888 = add i32 %9876, %9887
  %9889 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9877, i32 %9877, i32 26) #1
  %9890 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9877, i32 %9877, i32 21) #1
  %9891 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9877, i32 %9877, i32 7) #1
  %9892 = xor i32 %9889, %9890
  %9893 = xor i32 %9892, %9891
  %9894 = xor i32 %9849, %9821
  %9895 = and i32 %9894, %9877
  %9896 = xor i32 %9895, %9821
  %9897 = add i32 %9893, %9896
  %9898 = add i32 %9897, -1838011259
  %9899 = or i32 %6717, 39
  %9900 = sext i32 %9899 to i64
  %9901 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9900
  %9902 = load i32, i32 addrspace(4)* %9901, align 4
  %9903 = add i32 %9898, %9902
  %9904 = add i32 %9793, %9903
  %9905 = add i32 %9804, %9904
  %9906 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9888, i32 %9888, i32 30) #1
  %9907 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9888, i32 %9888, i32 19) #1
  %9908 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9888, i32 %9888, i32 10) #1
  %9909 = xor i32 %9906, %9907
  %9910 = xor i32 %9909, %9908
  %9911 = or i32 %9860, %9832
  %9912 = and i32 %9911, %9888
  %9913 = and i32 %9860, %9832
  %9914 = or i32 %9912, %9913
  %9915 = add i32 %9910, %9914
  %9916 = add i32 %9904, %9915
  %9917 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9905, i32 %9905, i32 26) #1
  %9918 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9905, i32 %9905, i32 21) #1
  %9919 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9905, i32 %9905, i32 7) #1
  %9920 = xor i32 %9917, %9918
  %9921 = xor i32 %9920, %9919
  %9922 = xor i32 %9877, %9849
  %9923 = and i32 %9922, %9905
  %9924 = xor i32 %9923, %9849
  %9925 = add i32 %9921, %9924
  %9926 = add i32 %9925, -1564481375
  %9927 = or i32 %6717, 40
  %9928 = sext i32 %9927 to i64
  %9929 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9928
  %9930 = load i32, i32 addrspace(4)* %9929, align 4
  %9931 = add i32 %9926, %9930
  %9932 = add i32 %9821, %9931
  %9933 = add i32 %9832, %9932
  %9934 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9916, i32 %9916, i32 30) #1
  %9935 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9916, i32 %9916, i32 19) #1
  %9936 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9916, i32 %9916, i32 10) #1
  %9937 = xor i32 %9934, %9935
  %9938 = xor i32 %9937, %9936
  %9939 = or i32 %9888, %9860
  %9940 = and i32 %9939, %9916
  %9941 = and i32 %9888, %9860
  %9942 = or i32 %9940, %9941
  %9943 = add i32 %9938, %9942
  %9944 = add i32 %9932, %9943
  %9945 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9933, i32 %9933, i32 26) #1
  %9946 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9933, i32 %9933, i32 21) #1
  %9947 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9933, i32 %9933, i32 7) #1
  %9948 = xor i32 %9945, %9946
  %9949 = xor i32 %9948, %9947
  %9950 = xor i32 %9905, %9877
  %9951 = and i32 %9950, %9933
  %9952 = xor i32 %9951, %9877
  %9953 = add i32 %9949, %9952
  %9954 = add i32 %9953, -1474664885
  %9955 = or i32 %6717, 41
  %9956 = sext i32 %9955 to i64
  %9957 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9956
  %9958 = load i32, i32 addrspace(4)* %9957, align 4
  %9959 = add i32 %9954, %9958
  %9960 = add i32 %9849, %9959
  %9961 = add i32 %9860, %9960
  %9962 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9944, i32 %9944, i32 30) #1
  %9963 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9944, i32 %9944, i32 19) #1
  %9964 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9944, i32 %9944, i32 10) #1
  %9965 = xor i32 %9962, %9963
  %9966 = xor i32 %9965, %9964
  %9967 = or i32 %9916, %9888
  %9968 = and i32 %9967, %9944
  %9969 = and i32 %9916, %9888
  %9970 = or i32 %9968, %9969
  %9971 = add i32 %9966, %9970
  %9972 = add i32 %9960, %9971
  %9973 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9961, i32 %9961, i32 26) #1
  %9974 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9961, i32 %9961, i32 21) #1
  %9975 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9961, i32 %9961, i32 7) #1
  %9976 = xor i32 %9973, %9974
  %9977 = xor i32 %9976, %9975
  %9978 = xor i32 %9933, %9905
  %9979 = and i32 %9978, %9961
  %9980 = xor i32 %9979, %9905
  %9981 = add i32 %9977, %9980
  %9982 = add i32 %9981, -1035236496
  %9983 = or i32 %6717, 42
  %9984 = sext i32 %9983 to i64
  %9985 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %9984
  %9986 = load i32, i32 addrspace(4)* %9985, align 4
  %9987 = add i32 %9982, %9986
  %9988 = add i32 %9877, %9987
  %9989 = add i32 %9888, %9988
  %9990 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9972, i32 %9972, i32 30) #1
  %9991 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9972, i32 %9972, i32 19) #1
  %9992 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9972, i32 %9972, i32 10) #1
  %9993 = xor i32 %9990, %9991
  %9994 = xor i32 %9993, %9992
  %9995 = or i32 %9944, %9916
  %9996 = and i32 %9995, %9972
  %9997 = and i32 %9944, %9916
  %9998 = or i32 %9996, %9997
  %9999 = add i32 %9994, %9998
  %10000 = add i32 %9988, %9999
  %10001 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9989, i32 %9989, i32 26) #1
  %10002 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9989, i32 %9989, i32 21) #1
  %10003 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %9989, i32 %9989, i32 7) #1
  %10004 = xor i32 %10001, %10002
  %10005 = xor i32 %10004, %10003
  %10006 = xor i32 %9961, %9933
  %10007 = and i32 %10006, %9989
  %10008 = xor i32 %10007, %9933
  %10009 = add i32 %10005, %10008
  %10010 = add i32 %10009, -949202525
  %10011 = or i32 %6717, 43
  %10012 = sext i32 %10011 to i64
  %10013 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %10012
  %10014 = load i32, i32 addrspace(4)* %10013, align 4
  %10015 = add i32 %10010, %10014
  %10016 = add i32 %9905, %10015
  %10017 = add i32 %9916, %10016
  %10018 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10000, i32 %10000, i32 30) #1
  %10019 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10000, i32 %10000, i32 19) #1
  %10020 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10000, i32 %10000, i32 10) #1
  %10021 = xor i32 %10018, %10019
  %10022 = xor i32 %10021, %10020
  %10023 = or i32 %9972, %9944
  %10024 = and i32 %10023, %10000
  %10025 = and i32 %9972, %9944
  %10026 = or i32 %10024, %10025
  %10027 = add i32 %10022, %10026
  %10028 = add i32 %10016, %10027
  %10029 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10017, i32 %10017, i32 26) #1
  %10030 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10017, i32 %10017, i32 21) #1
  %10031 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10017, i32 %10017, i32 7) #1
  %10032 = xor i32 %10029, %10030
  %10033 = xor i32 %10032, %10031
  %10034 = xor i32 %9989, %9961
  %10035 = and i32 %10034, %10017
  %10036 = xor i32 %10035, %9961
  %10037 = add i32 %10033, %10036
  %10038 = add i32 %10037, -778901479
  %10039 = or i32 %6717, 44
  %10040 = sext i32 %10039 to i64
  %10041 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %10040
  %10042 = load i32, i32 addrspace(4)* %10041, align 4
  %10043 = add i32 %10038, %10042
  %10044 = add i32 %9933, %10043
  %10045 = add i32 %9944, %10044
  %10046 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10028, i32 %10028, i32 30) #1
  %10047 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10028, i32 %10028, i32 19) #1
  %10048 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10028, i32 %10028, i32 10) #1
  %10049 = xor i32 %10046, %10047
  %10050 = xor i32 %10049, %10048
  %10051 = or i32 %10000, %9972
  %10052 = and i32 %10051, %10028
  %10053 = and i32 %10000, %9972
  %10054 = or i32 %10052, %10053
  %10055 = add i32 %10050, %10054
  %10056 = add i32 %10044, %10055
  %10057 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10045, i32 %10045, i32 26) #1
  %10058 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10045, i32 %10045, i32 21) #1
  %10059 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10045, i32 %10045, i32 7) #1
  %10060 = xor i32 %10057, %10058
  %10061 = xor i32 %10060, %10059
  %10062 = xor i32 %10017, %9989
  %10063 = and i32 %10062, %10045
  %10064 = xor i32 %10063, %9989
  %10065 = add i32 %10061, %10064
  %10066 = add i32 %10065, -694614492
  %10067 = or i32 %6717, 45
  %10068 = sext i32 %10067 to i64
  %10069 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %10068
  %10070 = load i32, i32 addrspace(4)* %10069, align 4
  %10071 = add i32 %10066, %10070
  %10072 = add i32 %9961, %10071
  %10073 = add i32 %9972, %10072
  %10074 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10056, i32 %10056, i32 30) #1
  %10075 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10056, i32 %10056, i32 19) #1
  %10076 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10056, i32 %10056, i32 10) #1
  %10077 = xor i32 %10074, %10075
  %10078 = xor i32 %10077, %10076
  %10079 = or i32 %10028, %10000
  %10080 = and i32 %10079, %10056
  %10081 = and i32 %10028, %10000
  %10082 = or i32 %10080, %10081
  %10083 = add i32 %10078, %10082
  %10084 = add i32 %10072, %10083
  %10085 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10073, i32 %10073, i32 26) #1
  %10086 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10073, i32 %10073, i32 21) #1
  %10087 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10073, i32 %10073, i32 7) #1
  %10088 = xor i32 %10085, %10086
  %10089 = xor i32 %10088, %10087
  %10090 = xor i32 %10045, %10017
  %10091 = and i32 %10090, %10073
  %10092 = xor i32 %10091, %10017
  %10093 = add i32 %10089, %10092
  %10094 = add i32 %10093, -200395387
  %10095 = or i32 %6717, 46
  %10096 = sext i32 %10095 to i64
  %10097 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %10096
  %10098 = load i32, i32 addrspace(4)* %10097, align 4
  %10099 = add i32 %10094, %10098
  %10100 = add i32 %9989, %10099
  %10101 = add i32 %10000, %10100
  %10102 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10084, i32 %10084, i32 30) #1
  %10103 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10084, i32 %10084, i32 19) #1
  %10104 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10084, i32 %10084, i32 10) #1
  %10105 = xor i32 %10102, %10103
  %10106 = xor i32 %10105, %10104
  %10107 = or i32 %10056, %10028
  %10108 = and i32 %10107, %10084
  %10109 = and i32 %10056, %10028
  %10110 = or i32 %10108, %10109
  %10111 = add i32 %10106, %10110
  %10112 = add i32 %10100, %10111
  %10113 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10101, i32 %10101, i32 26) #1
  %10114 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10101, i32 %10101, i32 21) #1
  %10115 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10101, i32 %10101, i32 7) #1
  %10116 = xor i32 %10113, %10114
  %10117 = xor i32 %10116, %10115
  %10118 = xor i32 %10073, %10045
  %10119 = and i32 %10118, %10101
  %10120 = xor i32 %10119, %10045
  %10121 = add i32 %10117, %10120
  %10122 = add i32 %10121, 275423344
  %10123 = or i32 %6717, 47
  %10124 = sext i32 %10123 to i64
  %10125 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %10124
  %10126 = load i32, i32 addrspace(4)* %10125, align 4
  %10127 = add i32 %10122, %10126
  %10128 = add i32 %10017, %10127
  %10129 = add i32 %10028, %10128
  %10130 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10112, i32 %10112, i32 30) #1
  %10131 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10112, i32 %10112, i32 19) #1
  %10132 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10112, i32 %10112, i32 10) #1
  %10133 = xor i32 %10130, %10131
  %10134 = xor i32 %10133, %10132
  %10135 = or i32 %10084, %10056
  %10136 = and i32 %10135, %10112
  %10137 = and i32 %10084, %10056
  %10138 = or i32 %10136, %10137
  %10139 = add i32 %10134, %10138
  %10140 = add i32 %10128, %10139
  %10141 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10129, i32 %10129, i32 26) #1
  %10142 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10129, i32 %10129, i32 21) #1
  %10143 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10129, i32 %10129, i32 7) #1
  %10144 = xor i32 %10141, %10142
  %10145 = xor i32 %10144, %10143
  %10146 = xor i32 %10101, %10073
  %10147 = and i32 %10146, %10129
  %10148 = xor i32 %10147, %10073
  %10149 = add i32 %10145, %10148
  %10150 = add i32 %10149, 430227734
  %10151 = or i32 %6717, 48
  %10152 = sext i32 %10151 to i64
  %10153 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %10152
  %10154 = load i32, i32 addrspace(4)* %10153, align 4
  %10155 = add i32 %10150, %10154
  %10156 = add i32 %10045, %10155
  %10157 = add i32 %10056, %10156
  %10158 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10140, i32 %10140, i32 30) #1
  %10159 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10140, i32 %10140, i32 19) #1
  %10160 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10140, i32 %10140, i32 10) #1
  %10161 = xor i32 %10158, %10159
  %10162 = xor i32 %10161, %10160
  %10163 = or i32 %10112, %10084
  %10164 = and i32 %10163, %10140
  %10165 = and i32 %10112, %10084
  %10166 = or i32 %10164, %10165
  %10167 = add i32 %10162, %10166
  %10168 = add i32 %10156, %10167
  %10169 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10157, i32 %10157, i32 26) #1
  %10170 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10157, i32 %10157, i32 21) #1
  %10171 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10157, i32 %10157, i32 7) #1
  %10172 = xor i32 %10169, %10170
  %10173 = xor i32 %10172, %10171
  %10174 = xor i32 %10129, %10101
  %10175 = and i32 %10174, %10157
  %10176 = xor i32 %10175, %10101
  %10177 = add i32 %10173, %10176
  %10178 = add i32 %10177, 506948616
  %10179 = or i32 %6717, 49
  %10180 = sext i32 %10179 to i64
  %10181 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %10180
  %10182 = load i32, i32 addrspace(4)* %10181, align 4
  %10183 = add i32 %10178, %10182
  %10184 = add i32 %10073, %10183
  %10185 = add i32 %10084, %10184
  %10186 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10168, i32 %10168, i32 30) #1
  %10187 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10168, i32 %10168, i32 19) #1
  %10188 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10168, i32 %10168, i32 10) #1
  %10189 = xor i32 %10186, %10187
  %10190 = xor i32 %10189, %10188
  %10191 = or i32 %10140, %10112
  %10192 = and i32 %10191, %10168
  %10193 = and i32 %10140, %10112
  %10194 = or i32 %10192, %10193
  %10195 = add i32 %10190, %10194
  %10196 = add i32 %10184, %10195
  %10197 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10185, i32 %10185, i32 26) #1
  %10198 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10185, i32 %10185, i32 21) #1
  %10199 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10185, i32 %10185, i32 7) #1
  %10200 = xor i32 %10197, %10198
  %10201 = xor i32 %10200, %10199
  %10202 = xor i32 %10157, %10129
  %10203 = and i32 %10202, %10185
  %10204 = xor i32 %10203, %10129
  %10205 = add i32 %10201, %10204
  %10206 = add i32 %10205, 659060556
  %10207 = or i32 %6717, 50
  %10208 = sext i32 %10207 to i64
  %10209 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %10208
  %10210 = load i32, i32 addrspace(4)* %10209, align 4
  %10211 = add i32 %10206, %10210
  %10212 = add i32 %10101, %10211
  %10213 = add i32 %10112, %10212
  %10214 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10196, i32 %10196, i32 30) #1
  %10215 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10196, i32 %10196, i32 19) #1
  %10216 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10196, i32 %10196, i32 10) #1
  %10217 = xor i32 %10214, %10215
  %10218 = xor i32 %10217, %10216
  %10219 = or i32 %10168, %10140
  %10220 = and i32 %10219, %10196
  %10221 = and i32 %10168, %10140
  %10222 = or i32 %10220, %10221
  %10223 = add i32 %10218, %10222
  %10224 = add i32 %10212, %10223
  %10225 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10213, i32 %10213, i32 26) #1
  %10226 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10213, i32 %10213, i32 21) #1
  %10227 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10213, i32 %10213, i32 7) #1
  %10228 = xor i32 %10225, %10226
  %10229 = xor i32 %10228, %10227
  %10230 = xor i32 %10185, %10157
  %10231 = and i32 %10230, %10213
  %10232 = xor i32 %10231, %10157
  %10233 = add i32 %10229, %10232
  %10234 = add i32 %10233, 883997877
  %10235 = or i32 %6717, 51
  %10236 = sext i32 %10235 to i64
  %10237 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %10236
  %10238 = load i32, i32 addrspace(4)* %10237, align 4
  %10239 = add i32 %10234, %10238
  %10240 = add i32 %10129, %10239
  %10241 = add i32 %10140, %10240
  %10242 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10224, i32 %10224, i32 30) #1
  %10243 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10224, i32 %10224, i32 19) #1
  %10244 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10224, i32 %10224, i32 10) #1
  %10245 = xor i32 %10242, %10243
  %10246 = xor i32 %10245, %10244
  %10247 = or i32 %10196, %10168
  %10248 = and i32 %10247, %10224
  %10249 = and i32 %10196, %10168
  %10250 = or i32 %10248, %10249
  %10251 = add i32 %10246, %10250
  %10252 = add i32 %10240, %10251
  %10253 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10241, i32 %10241, i32 26) #1
  %10254 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10241, i32 %10241, i32 21) #1
  %10255 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10241, i32 %10241, i32 7) #1
  %10256 = xor i32 %10253, %10254
  %10257 = xor i32 %10256, %10255
  %10258 = xor i32 %10213, %10185
  %10259 = and i32 %10258, %10241
  %10260 = xor i32 %10259, %10185
  %10261 = add i32 %10257, %10260
  %10262 = add i32 %10261, 958139571
  %10263 = or i32 %6717, 52
  %10264 = sext i32 %10263 to i64
  %10265 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %10264
  %10266 = load i32, i32 addrspace(4)* %10265, align 4
  %10267 = add i32 %10262, %10266
  %10268 = add i32 %10157, %10267
  %10269 = add i32 %10168, %10268
  %10270 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10252, i32 %10252, i32 30) #1
  %10271 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10252, i32 %10252, i32 19) #1
  %10272 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10252, i32 %10252, i32 10) #1
  %10273 = xor i32 %10270, %10271
  %10274 = xor i32 %10273, %10272
  %10275 = or i32 %10224, %10196
  %10276 = and i32 %10275, %10252
  %10277 = and i32 %10224, %10196
  %10278 = or i32 %10276, %10277
  %10279 = add i32 %10274, %10278
  %10280 = add i32 %10268, %10279
  %10281 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10269, i32 %10269, i32 26) #1
  %10282 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10269, i32 %10269, i32 21) #1
  %10283 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10269, i32 %10269, i32 7) #1
  %10284 = xor i32 %10281, %10282
  %10285 = xor i32 %10284, %10283
  %10286 = xor i32 %10241, %10213
  %10287 = and i32 %10286, %10269
  %10288 = xor i32 %10287, %10213
  %10289 = add i32 %10285, %10288
  %10290 = add i32 %10289, 1322822218
  %10291 = or i32 %6717, 53
  %10292 = sext i32 %10291 to i64
  %10293 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %10292
  %10294 = load i32, i32 addrspace(4)* %10293, align 4
  %10295 = add i32 %10290, %10294
  %10296 = add i32 %10185, %10295
  %10297 = add i32 %10196, %10296
  %10298 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10280, i32 %10280, i32 30) #1
  %10299 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10280, i32 %10280, i32 19) #1
  %10300 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10280, i32 %10280, i32 10) #1
  %10301 = xor i32 %10298, %10299
  %10302 = xor i32 %10301, %10300
  %10303 = or i32 %10252, %10224
  %10304 = and i32 %10303, %10280
  %10305 = and i32 %10252, %10224
  %10306 = or i32 %10304, %10305
  %10307 = add i32 %10302, %10306
  %10308 = add i32 %10296, %10307
  %10309 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10297, i32 %10297, i32 26) #1
  %10310 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10297, i32 %10297, i32 21) #1
  %10311 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10297, i32 %10297, i32 7) #1
  %10312 = xor i32 %10309, %10310
  %10313 = xor i32 %10312, %10311
  %10314 = xor i32 %10269, %10241
  %10315 = and i32 %10314, %10297
  %10316 = xor i32 %10315, %10241
  %10317 = add i32 %10313, %10316
  %10318 = add i32 %10317, 1537002063
  %10319 = or i32 %6717, 54
  %10320 = sext i32 %10319 to i64
  %10321 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %10320
  %10322 = load i32, i32 addrspace(4)* %10321, align 4
  %10323 = add i32 %10318, %10322
  %10324 = add i32 %10213, %10323
  %10325 = add i32 %10224, %10324
  %10326 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10308, i32 %10308, i32 30) #1
  %10327 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10308, i32 %10308, i32 19) #1
  %10328 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10308, i32 %10308, i32 10) #1
  %10329 = xor i32 %10326, %10327
  %10330 = xor i32 %10329, %10328
  %10331 = or i32 %10280, %10252
  %10332 = and i32 %10331, %10308
  %10333 = and i32 %10280, %10252
  %10334 = or i32 %10332, %10333
  %10335 = add i32 %10330, %10334
  %10336 = add i32 %10324, %10335
  %10337 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10325, i32 %10325, i32 26) #1
  %10338 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10325, i32 %10325, i32 21) #1
  %10339 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10325, i32 %10325, i32 7) #1
  %10340 = xor i32 %10337, %10338
  %10341 = xor i32 %10340, %10339
  %10342 = xor i32 %10297, %10269
  %10343 = and i32 %10342, %10325
  %10344 = xor i32 %10343, %10269
  %10345 = add i32 %10341, %10344
  %10346 = add i32 %10345, 1747873779
  %10347 = or i32 %6717, 55
  %10348 = sext i32 %10347 to i64
  %10349 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %10348
  %10350 = load i32, i32 addrspace(4)* %10349, align 4
  %10351 = add i32 %10346, %10350
  %10352 = add i32 %10241, %10351
  %10353 = add i32 %10252, %10352
  %10354 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10336, i32 %10336, i32 30) #1
  %10355 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10336, i32 %10336, i32 19) #1
  %10356 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10336, i32 %10336, i32 10) #1
  %10357 = xor i32 %10354, %10355
  %10358 = xor i32 %10357, %10356
  %10359 = or i32 %10308, %10280
  %10360 = and i32 %10359, %10336
  %10361 = and i32 %10308, %10280
  %10362 = or i32 %10360, %10361
  %10363 = add i32 %10358, %10362
  %10364 = add i32 %10352, %10363
  %10365 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10353, i32 %10353, i32 26) #1
  %10366 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10353, i32 %10353, i32 21) #1
  %10367 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10353, i32 %10353, i32 7) #1
  %10368 = xor i32 %10365, %10366
  %10369 = xor i32 %10368, %10367
  %10370 = xor i32 %10325, %10297
  %10371 = and i32 %10370, %10353
  %10372 = xor i32 %10371, %10297
  %10373 = add i32 %10369, %10372
  %10374 = add i32 %10373, 1955562222
  %10375 = or i32 %6717, 56
  %10376 = sext i32 %10375 to i64
  %10377 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %10376
  %10378 = load i32, i32 addrspace(4)* %10377, align 4
  %10379 = add i32 %10374, %10378
  %10380 = add i32 %10269, %10379
  %10381 = add i32 %10280, %10380
  %10382 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10364, i32 %10364, i32 30) #1
  %10383 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10364, i32 %10364, i32 19) #1
  %10384 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10364, i32 %10364, i32 10) #1
  %10385 = xor i32 %10382, %10383
  %10386 = xor i32 %10385, %10384
  %10387 = or i32 %10336, %10308
  %10388 = and i32 %10387, %10364
  %10389 = and i32 %10336, %10308
  %10390 = or i32 %10388, %10389
  %10391 = add i32 %10386, %10390
  %10392 = add i32 %10380, %10391
  %10393 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10381, i32 %10381, i32 26) #1
  %10394 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10381, i32 %10381, i32 21) #1
  %10395 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10381, i32 %10381, i32 7) #1
  %10396 = xor i32 %10393, %10394
  %10397 = xor i32 %10396, %10395
  %10398 = xor i32 %10353, %10325
  %10399 = and i32 %10398, %10381
  %10400 = xor i32 %10399, %10325
  %10401 = add i32 %10397, %10400
  %10402 = add i32 %10401, 2024104815
  %10403 = or i32 %6717, 57
  %10404 = sext i32 %10403 to i64
  %10405 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %10404
  %10406 = load i32, i32 addrspace(4)* %10405, align 4
  %10407 = add i32 %10402, %10406
  %10408 = add i32 %10297, %10407
  %10409 = add i32 %10308, %10408
  %10410 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10392, i32 %10392, i32 30) #1
  %10411 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10392, i32 %10392, i32 19) #1
  %10412 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10392, i32 %10392, i32 10) #1
  %10413 = xor i32 %10410, %10411
  %10414 = xor i32 %10413, %10412
  %10415 = or i32 %10364, %10336
  %10416 = and i32 %10415, %10392
  %10417 = and i32 %10364, %10336
  %10418 = or i32 %10416, %10417
  %10419 = add i32 %10414, %10418
  %10420 = add i32 %10408, %10419
  %10421 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10409, i32 %10409, i32 26) #1
  %10422 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10409, i32 %10409, i32 21) #1
  %10423 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10409, i32 %10409, i32 7) #1
  %10424 = xor i32 %10421, %10422
  %10425 = xor i32 %10424, %10423
  %10426 = xor i32 %10381, %10353
  %10427 = and i32 %10426, %10409
  %10428 = xor i32 %10427, %10353
  %10429 = add i32 %10425, %10428
  %10430 = add i32 %10429, -2067236844
  %10431 = or i32 %6717, 58
  %10432 = sext i32 %10431 to i64
  %10433 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %10432
  %10434 = load i32, i32 addrspace(4)* %10433, align 4
  %10435 = add i32 %10430, %10434
  %10436 = add i32 %10325, %10435
  %10437 = add i32 %10336, %10436
  %10438 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10420, i32 %10420, i32 30) #1
  %10439 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10420, i32 %10420, i32 19) #1
  %10440 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10420, i32 %10420, i32 10) #1
  %10441 = xor i32 %10438, %10439
  %10442 = xor i32 %10441, %10440
  %10443 = or i32 %10392, %10364
  %10444 = and i32 %10443, %10420
  %10445 = and i32 %10392, %10364
  %10446 = or i32 %10444, %10445
  %10447 = add i32 %10442, %10446
  %10448 = add i32 %10436, %10447
  %10449 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10437, i32 %10437, i32 26) #1
  %10450 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10437, i32 %10437, i32 21) #1
  %10451 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10437, i32 %10437, i32 7) #1
  %10452 = xor i32 %10449, %10450
  %10453 = xor i32 %10452, %10451
  %10454 = xor i32 %10409, %10381
  %10455 = and i32 %10454, %10437
  %10456 = xor i32 %10455, %10381
  %10457 = add i32 %10453, %10456
  %10458 = add i32 %10457, -1933114872
  %10459 = or i32 %6717, 59
  %10460 = sext i32 %10459 to i64
  %10461 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %10460
  %10462 = load i32, i32 addrspace(4)* %10461, align 4
  %10463 = add i32 %10458, %10462
  %10464 = add i32 %10353, %10463
  %10465 = add i32 %10364, %10464
  %10466 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10448, i32 %10448, i32 30) #1
  %10467 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10448, i32 %10448, i32 19) #1
  %10468 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10448, i32 %10448, i32 10) #1
  %10469 = xor i32 %10466, %10467
  %10470 = xor i32 %10469, %10468
  %10471 = or i32 %10420, %10392
  %10472 = and i32 %10471, %10448
  %10473 = and i32 %10420, %10392
  %10474 = or i32 %10472, %10473
  %10475 = add i32 %10470, %10474
  %10476 = add i32 %10464, %10475
  %10477 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10465, i32 %10465, i32 26) #1
  %10478 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10465, i32 %10465, i32 21) #1
  %10479 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10465, i32 %10465, i32 7) #1
  %10480 = xor i32 %10477, %10478
  %10481 = xor i32 %10480, %10479
  %10482 = xor i32 %10437, %10409
  %10483 = and i32 %10482, %10465
  %10484 = xor i32 %10483, %10409
  %10485 = add i32 %10481, %10484
  %10486 = add i32 %10485, -1866530822
  %10487 = or i32 %6717, 60
  %10488 = sext i32 %10487 to i64
  %10489 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %10488
  %10490 = load i32, i32 addrspace(4)* %10489, align 4
  %10491 = add i32 %10486, %10490
  %10492 = add i32 %10381, %10491
  %10493 = add i32 %10392, %10492
  %10494 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10476, i32 %10476, i32 30) #1
  %10495 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10476, i32 %10476, i32 19) #1
  %10496 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10476, i32 %10476, i32 10) #1
  %10497 = xor i32 %10494, %10495
  %10498 = xor i32 %10497, %10496
  %10499 = or i32 %10448, %10420
  %10500 = and i32 %10499, %10476
  %10501 = and i32 %10448, %10420
  %10502 = or i32 %10500, %10501
  %10503 = add i32 %10498, %10502
  %10504 = add i32 %10492, %10503
  %10505 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10493, i32 %10493, i32 26) #1
  %10506 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10493, i32 %10493, i32 21) #1
  %10507 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10493, i32 %10493, i32 7) #1
  %10508 = xor i32 %10505, %10506
  %10509 = xor i32 %10508, %10507
  %10510 = xor i32 %10465, %10437
  %10511 = and i32 %10510, %10493
  %10512 = xor i32 %10511, %10437
  %10513 = add i32 %10509, %10512
  %10514 = add i32 %10513, -1538233109
  %10515 = or i32 %6717, 61
  %10516 = sext i32 %10515 to i64
  %10517 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %10516
  %10518 = load i32, i32 addrspace(4)* %10517, align 4
  %10519 = add i32 %10514, %10518
  %10520 = add i32 %10409, %10519
  %10521 = add i32 %10420, %10520
  %10522 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10504, i32 %10504, i32 30) #1
  %10523 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10504, i32 %10504, i32 19) #1
  %10524 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10504, i32 %10504, i32 10) #1
  %10525 = xor i32 %10522, %10523
  %10526 = xor i32 %10525, %10524
  %10527 = or i32 %10476, %10448
  %10528 = and i32 %10527, %10504
  %10529 = and i32 %10476, %10448
  %10530 = or i32 %10528, %10529
  %10531 = add i32 %10526, %10530
  %10532 = add i32 %10520, %10531
  %10533 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10521, i32 %10521, i32 26) #1
  %10534 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10521, i32 %10521, i32 21) #1
  %10535 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10521, i32 %10521, i32 7) #1
  %10536 = xor i32 %10533, %10534
  %10537 = xor i32 %10536, %10535
  %10538 = xor i32 %10493, %10465
  %10539 = and i32 %10538, %10521
  %10540 = xor i32 %10539, %10465
  %10541 = add i32 %10537, %10540
  %10542 = add i32 %10541, -1090935817
  %10543 = or i32 %6717, 62
  %10544 = sext i32 %10543 to i64
  %10545 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %10544
  %10546 = load i32, i32 addrspace(4)* %10545, align 4
  %10547 = add i32 %10542, %10546
  %10548 = add i32 %10437, %10547
  %10549 = add i32 %10448, %10548
  %10550 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10532, i32 %10532, i32 30) #1
  %10551 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10532, i32 %10532, i32 19) #1
  %10552 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10532, i32 %10532, i32 10) #1
  %10553 = xor i32 %10550, %10551
  %10554 = xor i32 %10553, %10552
  %10555 = or i32 %10504, %10476
  %10556 = and i32 %10555, %10532
  %10557 = and i32 %10504, %10476
  %10558 = or i32 %10556, %10557
  %10559 = add i32 %10554, %10558
  %10560 = add i32 %10548, %10559
  %10561 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10549, i32 %10549, i32 26) #1
  %10562 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10549, i32 %10549, i32 21) #1
  %10563 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10549, i32 %10549, i32 7) #1
  %10564 = xor i32 %10561, %10562
  %10565 = xor i32 %10564, %10563
  %10566 = xor i32 %10521, %10493
  %10567 = and i32 %10566, %10549
  %10568 = xor i32 %10567, %10493
  %10569 = add i32 %10565, %10568
  %10570 = add i32 %10569, -965641998
  %10571 = or i32 %6717, 63
  %10572 = sext i32 %10571 to i64
  %10573 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %10572
  %10574 = load i32, i32 addrspace(4)* %10573, align 4
  %10575 = add i32 %10570, %10574
  %10576 = add i32 %10465, %10575
  %10577 = add i32 %10476, %10576
  %10578 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10560, i32 %10560, i32 30) #1
  %10579 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10560, i32 %10560, i32 19) #1
  %10580 = call spir_func i32 @spirv.llvm_fshl_i32(i32 %10560, i32 %10560, i32 10) #1
  %10581 = xor i32 %10578, %10579
  %10582 = xor i32 %10581, %10580
  %10583 = or i32 %10532, %10504
  %10584 = and i32 %10583, %10560
  %10585 = and i32 %10532, %10504
  %10586 = or i32 %10584, %10585
  %10587 = add i32 %10582, %10586
  %10588 = add i32 %10576, %10587
  %10589 = add i32 %8805, %10588
  %10590 = add i32 %8806, %10560
  %10591 = add i32 %8807, %10532
  %10592 = add i32 %8808, %10504
  %10593 = add i32 %8809, %10577
  %10594 = add i32 %8810, %10549
  %10595 = add i32 %8811, %10521
  %10596 = add i32 %8812, %10493
  %10597 = add nuw nsw i32 %6717, 64
  %10598 = add nuw nsw i32 %6716, 1
  br label %6687

10599:                                            ; preds = %6687
  store i32 %6707, i32* %23, align 4
  store i32 %6706, i32* %24, align 4
  store i32 %6705, i32* %25, align 4
  store i32 %6704, i32* %26, align 4
  store i32 %6703, i32* %27, align 4
  store i32 %6702, i32* %28, align 4
  store i32 %6701, i32* %29, align 4
  store i32 %6700, i32* %30, align 4
  store i32 %6699, i32* %31, align 4
  store i32 %6698, i32* %32, align 4
  store i32 %6697, i32* %33, align 4
  store i32 %6696, i32* %34, align 4
  store i32 %6695, i32* %35, align 4
  store i32 %6694, i32* %36, align 4
  store i32 %6693, i32* %37, align 4
  store i32 %6692, i32* %38, align 4
  store i32 %6691, i32* %39, align 4
  store i32 %6690, i32* %40, align 4
  store i32 %6689, i32* %41, align 4
  store i32 %6688, i32* %42, align 4
  %10600 = bitcast i8 addrspace(4)* %3 to i32 addrspace(4)*
  %10601 = load i32, i32 addrspace(4)* %10600, align 4
  %10602 = getelementptr inbounds i8, i8 addrspace(4)* %3, i64 4
  %10603 = bitcast i8 addrspace(4)* %10602 to i32 addrspace(4)*
  %10604 = load i32, i32 addrspace(4)* %10603, align 4
  %10605 = getelementptr inbounds i8, i8 addrspace(4)* %3, i64 8
  %10606 = bitcast i8 addrspace(4)* %10605 to i32 addrspace(4)*
  %10607 = load i32, i32 addrspace(4)* %10606, align 4
  %10608 = getelementptr inbounds i8, i8 addrspace(4)* %3, i64 12
  %10609 = bitcast i8 addrspace(4)* %10608 to i32 addrspace(4)*
  %10610 = load i32, i32 addrspace(4)* %10609, align 4
  call spir_func void @_Z7encryptjjjjjjjjjjjjPjS_S_S_PKjS1_S1_S1_(i32 %6708, i32 %6709, i32 %6710, i32 %6711, i32 %6712, i32 %6713, i32 %6714, i32 %6715, i32 %10601, i32 %10604, i32 %10607, i32 %10610, i32 addrspace(4)* nocapture %43, i32 addrspace(4)* nocapture %44, i32 addrspace(4)* nocapture %45, i32 addrspace(4)* nocapture %46, i32 addrspace(4)* nocapture readonly %18, i32 addrspace(4)* nocapture readonly %19, i32 addrspace(4)* nocapture readonly %20, i32 addrspace(4)* nocapture readonly %21) #1
  %10611 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 3
  %10612 = load i8, i8 addrspace(4)* %10611, align 1
  %10613 = zext i8 %10612 to i32
  %10614 = load i32, i32* %23, align 4
  %10615 = shl nuw i32 %10613, 24
  %10616 = and i32 %10614, -16777216
  %10617 = xor i32 %10616, %10615
  %10618 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 2
  %10619 = load i8, i8 addrspace(4)* %10618, align 1
  %10620 = zext i8 %10619 to i32
  %10621 = shl nuw nsw i32 %10620, 16
  %10622 = and i32 %10614, 16711680
  %10623 = xor i32 %10622, %10621
  %10624 = or i32 %10617, %10623
  %10625 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 1
  %10626 = load i8, i8 addrspace(4)* %10625, align 1
  %10627 = zext i8 %10626 to i32
  %10628 = shl nuw nsw i32 %10627, 8
  %10629 = and i32 %10614, 65280
  %10630 = xor i32 %10629, %10628
  %10631 = or i32 %10624, %10630
  %10632 = load i8, i8 addrspace(4)* %2, align 1
  %10633 = zext i8 %10632 to i32
  %10634 = and i32 %10614, 255
  %10635 = xor i32 %10634, %10633
  %10636 = or i32 %10631, %10635
  store i32 %10636, i32* %23, align 4
  %10637 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 7
  %10638 = load i8, i8 addrspace(4)* %10637, align 1
  %10639 = zext i8 %10638 to i32
  %10640 = load i32, i32* %24, align 4
  %10641 = shl nuw i32 %10639, 24
  %10642 = and i32 %10640, -16777216
  %10643 = xor i32 %10642, %10641
  %10644 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 6
  %10645 = load i8, i8 addrspace(4)* %10644, align 1
  %10646 = zext i8 %10645 to i32
  %10647 = shl nuw nsw i32 %10646, 16
  %10648 = and i32 %10640, 16711680
  %10649 = xor i32 %10648, %10647
  %10650 = or i32 %10643, %10649
  %10651 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 5
  %10652 = load i8, i8 addrspace(4)* %10651, align 1
  %10653 = zext i8 %10652 to i32
  %10654 = shl nuw nsw i32 %10653, 8
  %10655 = and i32 %10640, 65280
  %10656 = xor i32 %10655, %10654
  %10657 = or i32 %10650, %10656
  %10658 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 4
  %10659 = load i8, i8 addrspace(4)* %10658, align 1
  %10660 = zext i8 %10659 to i32
  %10661 = and i32 %10640, 255
  %10662 = xor i32 %10661, %10660
  %10663 = or i32 %10657, %10662
  store i32 %10663, i32* %24, align 4
  %10664 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 11
  %10665 = load i8, i8 addrspace(4)* %10664, align 1
  %10666 = zext i8 %10665 to i32
  %10667 = load i32, i32* %25, align 4
  %10668 = shl nuw i32 %10666, 24
  %10669 = and i32 %10667, -16777216
  %10670 = xor i32 %10669, %10668
  %10671 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 10
  %10672 = load i8, i8 addrspace(4)* %10671, align 1
  %10673 = zext i8 %10672 to i32
  %10674 = shl nuw nsw i32 %10673, 16
  %10675 = and i32 %10667, 16711680
  %10676 = xor i32 %10675, %10674
  %10677 = or i32 %10670, %10676
  %10678 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 9
  %10679 = load i8, i8 addrspace(4)* %10678, align 1
  %10680 = zext i8 %10679 to i32
  %10681 = shl nuw nsw i32 %10680, 8
  %10682 = and i32 %10667, 65280
  %10683 = xor i32 %10682, %10681
  %10684 = or i32 %10677, %10683
  %10685 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 8
  %10686 = load i8, i8 addrspace(4)* %10685, align 1
  %10687 = zext i8 %10686 to i32
  %10688 = and i32 %10667, 255
  %10689 = xor i32 %10688, %10687
  %10690 = or i32 %10684, %10689
  store i32 %10690, i32* %25, align 4
  %10691 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 15
  %10692 = load i8, i8 addrspace(4)* %10691, align 1
  %10693 = zext i8 %10692 to i32
  %10694 = load i32, i32* %26, align 4
  %10695 = shl nuw i32 %10693, 24
  %10696 = and i32 %10694, -16777216
  %10697 = xor i32 %10696, %10695
  %10698 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 14
  %10699 = load i8, i8 addrspace(4)* %10698, align 1
  %10700 = zext i8 %10699 to i32
  %10701 = shl nuw nsw i32 %10700, 16
  %10702 = and i32 %10694, 16711680
  %10703 = xor i32 %10702, %10701
  %10704 = or i32 %10697, %10703
  %10705 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 13
  %10706 = load i8, i8 addrspace(4)* %10705, align 1
  %10707 = zext i8 %10706 to i32
  %10708 = shl nuw nsw i32 %10707, 8
  %10709 = and i32 %10694, 65280
  %10710 = xor i32 %10709, %10708
  %10711 = or i32 %10704, %10710
  %10712 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 12
  %10713 = load i8, i8 addrspace(4)* %10712, align 1
  %10714 = zext i8 %10713 to i32
  %10715 = and i32 %10694, 255
  %10716 = xor i32 %10715, %10714
  %10717 = or i32 %10711, %10716
  store i32 %10717, i32* %26, align 4
  %10718 = add i32 %10610, 16777216
  call spir_func void @_Z7encryptjjjjjjjjjjjjPjS_S_S_PKjS1_S1_S1_(i32 %6708, i32 %6709, i32 %6710, i32 %6711, i32 %6712, i32 %6713, i32 %6714, i32 %6715, i32 %10601, i32 %10604, i32 %10607, i32 %10718, i32 addrspace(4)* nocapture %47, i32 addrspace(4)* nocapture %48, i32 addrspace(4)* nocapture %49, i32 addrspace(4)* nocapture %50, i32 addrspace(4)* nocapture readonly %18, i32 addrspace(4)* nocapture readonly %19, i32 addrspace(4)* nocapture readonly %20, i32 addrspace(4)* nocapture readonly %21) #1
  %10719 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 19
  %10720 = load i8, i8 addrspace(4)* %10719, align 1
  %10721 = zext i8 %10720 to i32
  %10722 = load i32, i32* %27, align 4
  %10723 = shl nuw i32 %10721, 24
  %10724 = and i32 %10722, -16777216
  %10725 = xor i32 %10724, %10723
  %10726 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 18
  %10727 = load i8, i8 addrspace(4)* %10726, align 1
  %10728 = zext i8 %10727 to i32
  %10729 = shl nuw nsw i32 %10728, 16
  %10730 = and i32 %10722, 16711680
  %10731 = xor i32 %10730, %10729
  %10732 = or i32 %10725, %10731
  %10733 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 17
  %10734 = load i8, i8 addrspace(4)* %10733, align 1
  %10735 = zext i8 %10734 to i32
  %10736 = shl nuw nsw i32 %10735, 8
  %10737 = and i32 %10722, 65280
  %10738 = xor i32 %10737, %10736
  %10739 = or i32 %10732, %10738
  %10740 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 16
  %10741 = load i8, i8 addrspace(4)* %10740, align 1
  %10742 = zext i8 %10741 to i32
  %10743 = and i32 %10722, 255
  %10744 = xor i32 %10743, %10742
  %10745 = or i32 %10739, %10744
  store i32 %10745, i32* %27, align 4
  %10746 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 23
  %10747 = load i8, i8 addrspace(4)* %10746, align 1
  %10748 = zext i8 %10747 to i32
  %10749 = load i32, i32* %28, align 4
  %10750 = shl nuw i32 %10748, 24
  %10751 = and i32 %10749, -16777216
  %10752 = xor i32 %10751, %10750
  %10753 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 22
  %10754 = load i8, i8 addrspace(4)* %10753, align 1
  %10755 = zext i8 %10754 to i32
  %10756 = shl nuw nsw i32 %10755, 16
  %10757 = and i32 %10749, 16711680
  %10758 = xor i32 %10757, %10756
  %10759 = or i32 %10752, %10758
  %10760 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 21
  %10761 = load i8, i8 addrspace(4)* %10760, align 1
  %10762 = zext i8 %10761 to i32
  %10763 = shl nuw nsw i32 %10762, 8
  %10764 = and i32 %10749, 65280
  %10765 = xor i32 %10764, %10763
  %10766 = or i32 %10759, %10765
  %10767 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 20
  %10768 = load i8, i8 addrspace(4)* %10767, align 1
  %10769 = zext i8 %10768 to i32
  %10770 = and i32 %10749, 255
  %10771 = xor i32 %10770, %10769
  %10772 = or i32 %10766, %10771
  store i32 %10772, i32* %28, align 4
  %10773 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 27
  %10774 = load i8, i8 addrspace(4)* %10773, align 1
  %10775 = zext i8 %10774 to i32
  %10776 = load i32, i32* %29, align 4
  %10777 = shl nuw i32 %10775, 24
  %10778 = and i32 %10776, -16777216
  %10779 = xor i32 %10778, %10777
  %10780 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 26
  %10781 = load i8, i8 addrspace(4)* %10780, align 1
  %10782 = zext i8 %10781 to i32
  %10783 = shl nuw nsw i32 %10782, 16
  %10784 = and i32 %10776, 16711680
  %10785 = xor i32 %10784, %10783
  %10786 = or i32 %10779, %10785
  %10787 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 25
  %10788 = load i8, i8 addrspace(4)* %10787, align 1
  %10789 = zext i8 %10788 to i32
  %10790 = shl nuw nsw i32 %10789, 8
  %10791 = and i32 %10776, 65280
  %10792 = xor i32 %10791, %10790
  %10793 = or i32 %10786, %10792
  %10794 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 24
  %10795 = load i8, i8 addrspace(4)* %10794, align 1
  %10796 = zext i8 %10795 to i32
  %10797 = and i32 %10776, 255
  %10798 = xor i32 %10797, %10796
  %10799 = or i32 %10793, %10798
  store i32 %10799, i32* %29, align 4
  %10800 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 31
  %10801 = load i8, i8 addrspace(4)* %10800, align 1
  %10802 = zext i8 %10801 to i32
  %10803 = load i32, i32* %30, align 4
  %10804 = shl nuw i32 %10802, 24
  %10805 = and i32 %10803, -16777216
  %10806 = xor i32 %10805, %10804
  %10807 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 30
  %10808 = load i8, i8 addrspace(4)* %10807, align 1
  %10809 = zext i8 %10808 to i32
  %10810 = shl nuw nsw i32 %10809, 16
  %10811 = and i32 %10803, 16711680
  %10812 = xor i32 %10811, %10810
  %10813 = or i32 %10806, %10812
  %10814 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 29
  %10815 = load i8, i8 addrspace(4)* %10814, align 1
  %10816 = zext i8 %10815 to i32
  %10817 = shl nuw nsw i32 %10816, 8
  %10818 = and i32 %10803, 65280
  %10819 = xor i32 %10818, %10817
  %10820 = or i32 %10813, %10819
  %10821 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 28
  %10822 = load i8, i8 addrspace(4)* %10821, align 1
  %10823 = zext i8 %10822 to i32
  %10824 = and i32 %10803, 255
  %10825 = xor i32 %10824, %10823
  %10826 = or i32 %10820, %10825
  store i32 %10826, i32* %30, align 4
  %10827 = add i32 %10610, 33554432
  call spir_func void @_Z7encryptjjjjjjjjjjjjPjS_S_S_PKjS1_S1_S1_(i32 %6708, i32 %6709, i32 %6710, i32 %6711, i32 %6712, i32 %6713, i32 %6714, i32 %6715, i32 %10601, i32 %10604, i32 %10607, i32 %10827, i32 addrspace(4)* nocapture %51, i32 addrspace(4)* nocapture %52, i32 addrspace(4)* nocapture %53, i32 addrspace(4)* nocapture %54, i32 addrspace(4)* nocapture readonly %18, i32 addrspace(4)* nocapture readonly %19, i32 addrspace(4)* nocapture readonly %20, i32 addrspace(4)* nocapture readonly %21) #1
  %10828 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 35
  %10829 = load i8, i8 addrspace(4)* %10828, align 1
  %10830 = zext i8 %10829 to i32
  %10831 = load i32, i32* %31, align 4
  %10832 = shl nuw i32 %10830, 24
  %10833 = and i32 %10831, -16777216
  %10834 = xor i32 %10833, %10832
  %10835 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 34
  %10836 = load i8, i8 addrspace(4)* %10835, align 1
  %10837 = zext i8 %10836 to i32
  %10838 = shl nuw nsw i32 %10837, 16
  %10839 = and i32 %10831, 16711680
  %10840 = xor i32 %10839, %10838
  %10841 = or i32 %10834, %10840
  %10842 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 33
  %10843 = load i8, i8 addrspace(4)* %10842, align 1
  %10844 = zext i8 %10843 to i32
  %10845 = shl nuw nsw i32 %10844, 8
  %10846 = and i32 %10831, 65280
  %10847 = xor i32 %10846, %10845
  %10848 = or i32 %10841, %10847
  %10849 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 32
  %10850 = load i8, i8 addrspace(4)* %10849, align 1
  %10851 = zext i8 %10850 to i32
  %10852 = and i32 %10831, 255
  %10853 = xor i32 %10852, %10851
  %10854 = or i32 %10848, %10853
  store i32 %10854, i32* %31, align 4
  %10855 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 39
  %10856 = load i8, i8 addrspace(4)* %10855, align 1
  %10857 = zext i8 %10856 to i32
  %10858 = load i32, i32* %32, align 4
  %10859 = shl nuw i32 %10857, 24
  %10860 = and i32 %10858, -16777216
  %10861 = xor i32 %10860, %10859
  %10862 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 38
  %10863 = load i8, i8 addrspace(4)* %10862, align 1
  %10864 = zext i8 %10863 to i32
  %10865 = shl nuw nsw i32 %10864, 16
  %10866 = and i32 %10858, 16711680
  %10867 = xor i32 %10866, %10865
  %10868 = or i32 %10861, %10867
  %10869 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 37
  %10870 = load i8, i8 addrspace(4)* %10869, align 1
  %10871 = zext i8 %10870 to i32
  %10872 = shl nuw nsw i32 %10871, 8
  %10873 = and i32 %10858, 65280
  %10874 = xor i32 %10873, %10872
  %10875 = or i32 %10868, %10874
  %10876 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 36
  %10877 = load i8, i8 addrspace(4)* %10876, align 1
  %10878 = zext i8 %10877 to i32
  %10879 = and i32 %10858, 255
  %10880 = xor i32 %10879, %10878
  %10881 = or i32 %10875, %10880
  %10882 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 43
  %10883 = load i8, i8 addrspace(4)* %10882, align 1
  %10884 = zext i8 %10883 to i32
  %10885 = load i32, i32* %33, align 4
  %10886 = shl nuw i32 %10884, 24
  %10887 = and i32 %10885, -16777216
  %10888 = xor i32 %10887, %10886
  %10889 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 42
  %10890 = load i8, i8 addrspace(4)* %10889, align 1
  %10891 = zext i8 %10890 to i32
  %10892 = shl nuw nsw i32 %10891, 16
  %10893 = and i32 %10885, 16711680
  %10894 = xor i32 %10893, %10892
  %10895 = or i32 %10888, %10894
  %10896 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 41
  %10897 = load i8, i8 addrspace(4)* %10896, align 1
  %10898 = zext i8 %10897 to i32
  %10899 = shl nuw nsw i32 %10898, 8
  %10900 = and i32 %10885, 65280
  %10901 = xor i32 %10900, %10899
  %10902 = or i32 %10895, %10901
  %10903 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 40
  %10904 = load i8, i8 addrspace(4)* %10903, align 1
  %10905 = zext i8 %10904 to i32
  %10906 = and i32 %10885, 255
  %10907 = xor i32 %10906, %10905
  %10908 = or i32 %10902, %10907
  %10909 = bitcast i8 addrspace(4)* %5 to i32 addrspace(4)*
  %10910 = load i32, i32 addrspace(4)* %10909, align 4
  %10911 = getelementptr inbounds i8, i8 addrspace(4)* %5, i64 4
  %10912 = bitcast i8 addrspace(4)* %10911 to i32 addrspace(4)*
  %10913 = load i32, i32 addrspace(4)* %10912, align 4
  %10914 = getelementptr inbounds i8, i8 addrspace(4)* %5, i64 8
  %10915 = bitcast i8 addrspace(4)* %10914 to i32 addrspace(4)*
  %10916 = load i32, i32 addrspace(4)* %10915, align 4
  %10917 = getelementptr inbounds i8, i8 addrspace(4)* %5, i64 12
  %10918 = bitcast i8 addrspace(4)* %10917 to i32 addrspace(4)*
  %10919 = load i32, i32 addrspace(4)* %10918, align 4
  call spir_func void @_Z7encryptjjjjjjjjjjjjPjS_S_S_PKjS1_S1_S1_(i32 %6708, i32 %6709, i32 %6710, i32 %6711, i32 %6712, i32 %6713, i32 %6714, i32 %6715, i32 %10910, i32 %10913, i32 %10916, i32 %10919, i32 addrspace(4)* nocapture %59, i32 addrspace(4)* nocapture %60, i32 addrspace(4)* nocapture %61, i32 addrspace(4)* nocapture %62, i32 addrspace(4)* nocapture readonly %18, i32 addrspace(4)* nocapture readonly %19, i32 addrspace(4)* nocapture readonly %20, i32 addrspace(4)* nocapture readonly %21) #1
  %10920 = bitcast i8 addrspace(4)* %6 to i32 addrspace(4)*
  %10921 = load i32, i32 addrspace(4)* %10920, align 4
  %10922 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 4
  %10923 = bitcast i8 addrspace(4)* %10922 to i32 addrspace(4)*
  %10924 = load i32, i32 addrspace(4)* %10923, align 4
  %10925 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 8
  %10926 = bitcast i8 addrspace(4)* %10925 to i32 addrspace(4)*
  %10927 = load i32, i32 addrspace(4)* %10926, align 4
  %10928 = getelementptr inbounds i8, i8 addrspace(4)* %6, i64 12
  %10929 = bitcast i8 addrspace(4)* %10928 to i32 addrspace(4)*
  %10930 = load i32, i32 addrspace(4)* %10929, align 4
  call spir_func void @_Z7encryptjjjjjjjjjjjjPjS_S_S_PKjS1_S1_S1_(i32 %6708, i32 %6709, i32 %6710, i32 %6711, i32 %6712, i32 %6713, i32 %6714, i32 %6715, i32 %10921, i32 %10924, i32 %10927, i32 %10930, i32 addrspace(4)* nocapture %55, i32 addrspace(4)* nocapture %56, i32 addrspace(4)* nocapture %57, i32 addrspace(4)* nocapture %58, i32 addrspace(4)* nocapture readonly %18, i32 addrspace(4)* nocapture readonly %19, i32 addrspace(4)* nocapture readonly %20, i32 addrspace(4)* nocapture readonly %21) #1
  %10931 = load i32, i32* %23, align 4
  %10932 = load i32, i32* %35, align 4
  %10933 = xor i32 %10931, %10932
  %10934 = load i32, i32* %24, align 4
  %10935 = load i32, i32* %36, align 4
  %10936 = xor i32 %10934, %10935
  %10937 = load i32, i32* %25, align 4
  %10938 = load i32, i32* %37, align 4
  %10939 = xor i32 %10937, %10938
  %10940 = load i32, i32* %26, align 4
  %10941 = load i32, i32* %38, align 4
  %10942 = xor i32 %10940, %10941
  call spir_func void @_Z7encryptjjjjjjjjjjjjPjS_S_S_PKjS1_S1_S1_(i32 %6708, i32 %6709, i32 %6710, i32 %6711, i32 %6712, i32 %6713, i32 %6714, i32 %6715, i32 %10933, i32 %10936, i32 %10939, i32 %10942, i32 addrspace(4)* nocapture %55, i32 addrspace(4)* nocapture %56, i32 addrspace(4)* nocapture %57, i32 addrspace(4)* nocapture %58, i32 addrspace(4)* nocapture readonly %18, i32 addrspace(4)* nocapture readonly %19, i32 addrspace(4)* nocapture readonly %20, i32 addrspace(4)* nocapture readonly %21) #1
  %10943 = load i32, i32* %27, align 4
  %10944 = load i32, i32* %35, align 4
  %10945 = xor i32 %10943, %10944
  %10946 = load i32, i32* %28, align 4
  %10947 = load i32, i32* %36, align 4
  %10948 = xor i32 %10946, %10947
  %10949 = load i32, i32* %29, align 4
  %10950 = load i32, i32* %37, align 4
  %10951 = xor i32 %10949, %10950
  %10952 = load i32, i32* %30, align 4
  %10953 = load i32, i32* %38, align 4
  %10954 = xor i32 %10952, %10953
  call spir_func void @_Z7encryptjjjjjjjjjjjjPjS_S_S_PKjS1_S1_S1_(i32 %6708, i32 %6709, i32 %6710, i32 %6711, i32 %6712, i32 %6713, i32 %6714, i32 %6715, i32 %10945, i32 %10948, i32 %10951, i32 %10954, i32 addrspace(4)* nocapture %55, i32 addrspace(4)* nocapture %56, i32 addrspace(4)* nocapture %57, i32 addrspace(4)* nocapture %58, i32 addrspace(4)* nocapture readonly %18, i32 addrspace(4)* nocapture readonly %19, i32 addrspace(4)* nocapture readonly %20, i32 addrspace(4)* nocapture readonly %21) #1
  %10955 = load i32, i32* %31, align 4
  %10956 = load i32, i32* %35, align 4
  %10957 = xor i32 %10955, %10956
  %10958 = load i32, i32* %36, align 4
  %10959 = xor i32 %10881, %10958
  %10960 = load i32, i32* %37, align 4
  %10961 = xor i32 %10908, %10960
  %10962 = load i32, i32* %38, align 4
  call spir_func void @_Z7encryptjjjjjjjjjjjjPjS_S_S_PKjS1_S1_S1_(i32 %6708, i32 %6709, i32 %6710, i32 %6711, i32 %6712, i32 %6713, i32 %6714, i32 %6715, i32 %10957, i32 %10959, i32 %10961, i32 %10962, i32 addrspace(4)* nocapture %55, i32 addrspace(4)* nocapture %56, i32 addrspace(4)* nocapture %57, i32 addrspace(4)* nocapture %58, i32 addrspace(4)* nocapture readonly %18, i32 addrspace(4)* nocapture readonly %19, i32 addrspace(4)* nocapture readonly %20, i32 addrspace(4)* nocapture readonly %21) #1
  %10963 = load i32, i32* %35, align 4
  %10964 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 3
  %10965 = load i8, i8 addrspace(4)* %10964, align 1
  %10966 = zext i8 %10965 to i32
  %10967 = load i32, i32* %39, align 4
  %10968 = shl nuw i32 %10966, 24
  %10969 = and i32 %10967, -16777216
  %10970 = xor i32 %10969, %10968
  %10971 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 2
  %10972 = load i8, i8 addrspace(4)* %10971, align 1
  %10973 = zext i8 %10972 to i32
  %10974 = shl nuw nsw i32 %10973, 16
  %10975 = and i32 %10967, 16711680
  %10976 = xor i32 %10975, %10974
  %10977 = or i32 %10970, %10976
  %10978 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 1
  %10979 = load i8, i8 addrspace(4)* %10978, align 1
  %10980 = zext i8 %10979 to i32
  %10981 = shl nuw nsw i32 %10980, 8
  %10982 = and i32 %10967, 65280
  %10983 = xor i32 %10982, %10981
  %10984 = or i32 %10977, %10983
  %10985 = load i8, i8 addrspace(4)* %4, align 1
  %10986 = zext i8 %10985 to i32
  %10987 = and i32 %10967, 255
  %10988 = xor i32 %10987, %10986
  %10989 = or i32 %10984, %10988
  %10990 = icmp eq i32 %10963, %10989
  br i1 %10990, label %10991, label %11084

10991:                                            ; preds = %10599
  %10992 = load i32, i32* %36, align 4
  %10993 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 7
  %10994 = load i8, i8 addrspace(4)* %10993, align 1
  %10995 = zext i8 %10994 to i32
  %10996 = load i32, i32* %40, align 4
  %10997 = shl nuw i32 %10995, 24
  %10998 = and i32 %10996, -16777216
  %10999 = xor i32 %10998, %10997
  %11000 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 6
  %11001 = load i8, i8 addrspace(4)* %11000, align 1
  %11002 = zext i8 %11001 to i32
  %11003 = shl nuw nsw i32 %11002, 16
  %11004 = and i32 %10996, 16711680
  %11005 = xor i32 %11004, %11003
  %11006 = or i32 %10999, %11005
  %11007 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 5
  %11008 = load i8, i8 addrspace(4)* %11007, align 1
  %11009 = zext i8 %11008 to i32
  %11010 = shl nuw nsw i32 %11009, 8
  %11011 = and i32 %10996, 65280
  %11012 = xor i32 %11011, %11010
  %11013 = or i32 %11006, %11012
  %11014 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 4
  %11015 = load i8, i8 addrspace(4)* %11014, align 1
  %11016 = zext i8 %11015 to i32
  %11017 = and i32 %10996, 255
  %11018 = xor i32 %11017, %11016
  %11019 = or i32 %11013, %11018
  %11020 = icmp eq i32 %10992, %11019
  br i1 %11020, label %11021, label %11084

11021:                                            ; preds = %10991
  %11022 = load i32, i32* %37, align 4
  %11023 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 11
  %11024 = load i8, i8 addrspace(4)* %11023, align 1
  %11025 = zext i8 %11024 to i32
  %11026 = load i32, i32* %41, align 4
  %11027 = shl nuw i32 %11025, 24
  %11028 = and i32 %11026, -16777216
  %11029 = xor i32 %11028, %11027
  %11030 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 10
  %11031 = load i8, i8 addrspace(4)* %11030, align 1
  %11032 = zext i8 %11031 to i32
  %11033 = shl nuw nsw i32 %11032, 16
  %11034 = and i32 %11026, 16711680
  %11035 = xor i32 %11034, %11033
  %11036 = or i32 %11029, %11035
  %11037 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 9
  %11038 = load i8, i8 addrspace(4)* %11037, align 1
  %11039 = zext i8 %11038 to i32
  %11040 = shl nuw nsw i32 %11039, 8
  %11041 = and i32 %11026, 65280
  %11042 = xor i32 %11041, %11040
  %11043 = or i32 %11036, %11042
  %11044 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 8
  %11045 = load i8, i8 addrspace(4)* %11044, align 1
  %11046 = zext i8 %11045 to i32
  %11047 = and i32 %11026, 255
  %11048 = xor i32 %11047, %11046
  %11049 = or i32 %11043, %11048
  %11050 = icmp eq i32 %11022, %11049
  br i1 %11050, label %11051, label %11084

11051:                                            ; preds = %11021
  %11052 = load i32, i32* %38, align 4
  %11053 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 15
  %11054 = load i8, i8 addrspace(4)* %11053, align 1
  %11055 = zext i8 %11054 to i32
  %11056 = load i32, i32* %42, align 4
  %11057 = shl nuw i32 %11055, 24
  %11058 = and i32 %11056, -16777216
  %11059 = xor i32 %11058, %11057
  %11060 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 14
  %11061 = load i8, i8 addrspace(4)* %11060, align 1
  %11062 = zext i8 %11061 to i32
  %11063 = shl nuw nsw i32 %11062, 16
  %11064 = and i32 %11056, 16711680
  %11065 = xor i32 %11064, %11063
  %11066 = or i32 %11059, %11065
  %11067 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 13
  %11068 = load i8, i8 addrspace(4)* %11067, align 1
  %11069 = zext i8 %11068 to i32
  %11070 = shl nuw nsw i32 %11069, 8
  %11071 = and i32 %11056, 65280
  %11072 = xor i32 %11071, %11070
  %11073 = or i32 %11066, %11072
  %11074 = getelementptr inbounds i8, i8 addrspace(4)* %4, i64 12
  %11075 = load i8, i8 addrspace(4)* %11074, align 1
  %11076 = zext i8 %11075 to i32
  %11077 = and i32 %11056, 255
  %11078 = xor i32 %11077, %11076
  %11079 = or i32 %11073, %11078
  %11080 = icmp eq i32 %11052, %11079
  br i1 %11080, label %11081, label %11084

11081:                                            ; preds = %11051
  %11082 = load i32, i32 addrspace(4)* %1, align 4
  %11083 = add nsw i32 %11082, 1
  store i32 %11083, i32 addrspace(4)* %1, align 4
  br label %11084

11084:                                            ; preds = %11081, %11051, %11021, %10991, %10599, %22
  %11085 = bitcast i8* %101 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11085)
  %11086 = bitcast i8* %99 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11086)
  %11087 = bitcast i8* %97 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11087)
  %11088 = bitcast i8* %95 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11088)
  %11089 = bitcast i8* %93 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11089)
  %11090 = bitcast i8* %91 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11090)
  %11091 = bitcast i8* %89 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11091)
  %11092 = bitcast i8* %87 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11092)
  %11093 = bitcast i8* %85 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11093)
  %11094 = bitcast i8* %83 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11094)
  %11095 = bitcast i8* %81 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11095)
  %11096 = bitcast i8* %79 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11096)
  %11097 = bitcast i8* %77 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11097)
  %11098 = bitcast i8* %75 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11098)
  %11099 = bitcast i8* %73 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11099)
  %11100 = bitcast i8* %71 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11100)
  %11101 = bitcast i8* %69 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11101)
  %11102 = bitcast i8* %67 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11102)
  %11103 = bitcast i8* %65 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11103)
  %11104 = bitcast i8* %63 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11104)
  ret void
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #5

; Function Attrs: nounwind
define spir_func i32 @spirv.llvm_fshl_i32(i32 %0, i32 %1, i32 %2) #1 {
rotate:
  %3 = urem i32 %2, 32
  %4 = shl i32 %0, %3
  %5 = sub i32 32, %3
  %6 = lshr i32 %1, %5
  %7 = or i32 %4, %6
  ret i32 %7
}

; Function Attrs: nounwind
define spir_func void @_Z7encryptjjjjjjjjjjjjPjS_S_S_PKjS1_S1_S1_(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 addrspace(4)* nocapture %12, i32 addrspace(4)* nocapture %13, i32 addrspace(4)* nocapture %14, i32 addrspace(4)* nocapture %15, i32 addrspace(4)* nocapture readonly %16, i32 addrspace(4)* nocapture readonly %17, i32 addrspace(4)* nocapture readonly %18, i32 addrspace(4)* nocapture readonly %19) #1 {
  %21 = call spir_func i32 @spirv.llvm_bswap_i32(i32 %8) #1
  %22 = xor i32 %21, %0
  %23 = call spir_func i32 @spirv.llvm_bswap_i32(i32 %9) #1
  %24 = xor i32 %23, %1
  %25 = call spir_func i32 @spirv.llvm_bswap_i32(i32 %10) #1
  %26 = xor i32 %25, %2
  %27 = call spir_func i32 @spirv.llvm_bswap_i32(i32 %11) #1
  %28 = xor i32 %27, %3
  %29 = lshr i32 %22, 24
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %30
  %32 = load i32, i32 addrspace(4)* %31, align 4
  %33 = lshr i32 %24, 16
  %34 = and i32 %33, 255
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %35
  %37 = load i32, i32 addrspace(4)* %36, align 4
  %38 = lshr i32 %26, 8
  %39 = and i32 %38, 255
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %40
  %42 = load i32, i32 addrspace(4)* %41, align 4
  %43 = xor i32 %32, %37
  %44 = xor i32 %43, %42
  %45 = and i32 %28, 255
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %46
  %48 = load i32, i32 addrspace(4)* %47, align 4
  %49 = xor i32 %44, %48
  %50 = xor i32 %49, %4
  %51 = lshr i32 %24, 24
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %52
  %54 = load i32, i32 addrspace(4)* %53, align 4
  %55 = lshr i32 %26, 16
  %56 = and i32 %55, 255
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %57
  %59 = load i32, i32 addrspace(4)* %58, align 4
  %60 = lshr i32 %28, 8
  %61 = and i32 %60, 255
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %62
  %64 = load i32, i32 addrspace(4)* %63, align 4
  %65 = xor i32 %54, %59
  %66 = xor i32 %65, %64
  %67 = and i32 %22, 255
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %68
  %70 = load i32, i32 addrspace(4)* %69, align 4
  %71 = xor i32 %66, %70
  %72 = xor i32 %71, %5
  %73 = lshr i32 %26, 24
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %74
  %76 = load i32, i32 addrspace(4)* %75, align 4
  %77 = lshr i32 %28, 16
  %78 = and i32 %77, 255
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %79
  %81 = load i32, i32 addrspace(4)* %80, align 4
  %82 = lshr i32 %22, 8
  %83 = and i32 %82, 255
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %84
  %86 = load i32, i32 addrspace(4)* %85, align 4
  %87 = xor i32 %76, %81
  %88 = xor i32 %87, %86
  %89 = and i32 %24, 255
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %90
  %92 = load i32, i32 addrspace(4)* %91, align 4
  %93 = xor i32 %88, %92
  %94 = xor i32 %93, %6
  %95 = lshr i32 %28, 24
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %96
  %98 = load i32, i32 addrspace(4)* %97, align 4
  %99 = lshr i32 %22, 16
  %100 = and i32 %99, 255
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %101
  %103 = load i32, i32 addrspace(4)* %102, align 4
  %104 = lshr i32 %24, 8
  %105 = and i32 %104, 255
  %106 = zext i32 %105 to i64
  %107 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %106
  %108 = load i32, i32 addrspace(4)* %107, align 4
  %109 = xor i32 %98, %103
  %110 = xor i32 %109, %108
  %111 = and i32 %26, 255
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %112
  %114 = load i32, i32 addrspace(4)* %113, align 4
  %115 = xor i32 %110, %114
  %116 = xor i32 %115, %7
  %117 = lshr i32 %7, 24
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %118
  %120 = load i32, i32 addrspace(4)* %119, align 4
  %121 = and i32 %120, 255
  %122 = lshr i32 %7, 16
  %123 = and i32 %122, 255
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %124
  %126 = load i32, i32 addrspace(4)* %125, align 4
  %127 = and i32 %126, -16777216
  %128 = or i32 %121, %127
  %129 = lshr i32 %7, 8
  %130 = and i32 %129, 255
  %131 = zext i32 %130 to i64
  %132 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %131
  %133 = load i32, i32 addrspace(4)* %132, align 4
  %134 = and i32 %133, 16711680
  %135 = or i32 %128, %134
  %136 = and i32 %7, 255
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %137
  %139 = load i32, i32 addrspace(4)* %138, align 4
  %140 = and i32 %139, 65280
  %141 = or i32 %135, %140
  %142 = xor i32 %141, %0
  %143 = xor i32 %142, 16777216
  %144 = xor i32 %143, %1
  %145 = xor i32 %144, %2
  %146 = xor i32 %145, %3
  %147 = lshr i32 %50, 24
  %148 = zext i32 %147 to i64
  %149 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %148
  %150 = load i32, i32 addrspace(4)* %149, align 4
  %151 = lshr i32 %72, 16
  %152 = and i32 %151, 255
  %153 = zext i32 %152 to i64
  %154 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %153
  %155 = load i32, i32 addrspace(4)* %154, align 4
  %156 = lshr i32 %94, 8
  %157 = and i32 %156, 255
  %158 = zext i32 %157 to i64
  %159 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %158
  %160 = load i32, i32 addrspace(4)* %159, align 4
  %161 = xor i32 %150, %155
  %162 = xor i32 %161, %160
  %163 = and i32 %116, 255
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %164
  %166 = load i32, i32 addrspace(4)* %165, align 4
  %167 = xor i32 %162, %166
  %168 = xor i32 %167, %143
  %169 = lshr i32 %72, 24
  %170 = zext i32 %169 to i64
  %171 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %170
  %172 = load i32, i32 addrspace(4)* %171, align 4
  %173 = lshr i32 %94, 16
  %174 = and i32 %173, 255
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %175
  %177 = load i32, i32 addrspace(4)* %176, align 4
  %178 = lshr i32 %116, 8
  %179 = and i32 %178, 255
  %180 = zext i32 %179 to i64
  %181 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %180
  %182 = load i32, i32 addrspace(4)* %181, align 4
  %183 = xor i32 %172, %177
  %184 = xor i32 %183, %182
  %185 = and i32 %50, 255
  %186 = zext i32 %185 to i64
  %187 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %186
  %188 = load i32, i32 addrspace(4)* %187, align 4
  %189 = xor i32 %184, %188
  %190 = xor i32 %189, %144
  %191 = lshr i32 %94, 24
  %192 = zext i32 %191 to i64
  %193 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %192
  %194 = load i32, i32 addrspace(4)* %193, align 4
  %195 = lshr i32 %116, 16
  %196 = and i32 %195, 255
  %197 = zext i32 %196 to i64
  %198 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %197
  %199 = load i32, i32 addrspace(4)* %198, align 4
  %200 = lshr i32 %50, 8
  %201 = and i32 %200, 255
  %202 = zext i32 %201 to i64
  %203 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %202
  %204 = load i32, i32 addrspace(4)* %203, align 4
  %205 = xor i32 %194, %199
  %206 = xor i32 %205, %204
  %207 = and i32 %72, 255
  %208 = zext i32 %207 to i64
  %209 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %208
  %210 = load i32, i32 addrspace(4)* %209, align 4
  %211 = xor i32 %206, %210
  %212 = xor i32 %211, %145
  %213 = lshr i32 %116, 24
  %214 = zext i32 %213 to i64
  %215 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %214
  %216 = load i32, i32 addrspace(4)* %215, align 4
  %217 = lshr i32 %50, 16
  %218 = and i32 %217, 255
  %219 = zext i32 %218 to i64
  %220 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %219
  %221 = load i32, i32 addrspace(4)* %220, align 4
  %222 = lshr i32 %72, 8
  %223 = and i32 %222, 255
  %224 = zext i32 %223 to i64
  %225 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %224
  %226 = load i32, i32 addrspace(4)* %225, align 4
  %227 = xor i32 %216, %221
  %228 = xor i32 %227, %226
  %229 = and i32 %94, 255
  %230 = zext i32 %229 to i64
  %231 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %230
  %232 = load i32, i32 addrspace(4)* %231, align 4
  %233 = xor i32 %228, %232
  %234 = xor i32 %233, %146
  %235 = lshr i32 %146, 24
  %236 = zext i32 %235 to i64
  %237 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %236
  %238 = load i32, i32 addrspace(4)* %237, align 4
  %239 = and i32 %238, -16777216
  %240 = lshr i32 %146, 16
  %241 = and i32 %240, 255
  %242 = zext i32 %241 to i64
  %243 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %242
  %244 = load i32, i32 addrspace(4)* %243, align 4
  %245 = and i32 %244, 16711680
  %246 = or i32 %239, %245
  %247 = lshr i32 %146, 8
  %248 = and i32 %247, 255
  %249 = zext i32 %248 to i64
  %250 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %249
  %251 = load i32, i32 addrspace(4)* %250, align 4
  %252 = and i32 %251, 65280
  %253 = or i32 %246, %252
  %254 = and i32 %146, 255
  %255 = zext i32 %254 to i64
  %256 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %255
  %257 = load i32, i32 addrspace(4)* %256, align 4
  %258 = and i32 %257, 255
  %259 = or i32 %253, %258
  %260 = xor i32 %259, %4
  %261 = xor i32 %260, %5
  %262 = xor i32 %261, %6
  %263 = xor i32 %262, %7
  %264 = lshr i32 %168, 24
  %265 = zext i32 %264 to i64
  %266 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %265
  %267 = load i32, i32 addrspace(4)* %266, align 4
  %268 = lshr i32 %190, 16
  %269 = and i32 %268, 255
  %270 = zext i32 %269 to i64
  %271 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %270
  %272 = load i32, i32 addrspace(4)* %271, align 4
  %273 = lshr i32 %212, 8
  %274 = and i32 %273, 255
  %275 = zext i32 %274 to i64
  %276 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %275
  %277 = load i32, i32 addrspace(4)* %276, align 4
  %278 = xor i32 %267, %272
  %279 = xor i32 %278, %277
  %280 = and i32 %234, 255
  %281 = zext i32 %280 to i64
  %282 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %281
  %283 = load i32, i32 addrspace(4)* %282, align 4
  %284 = xor i32 %279, %283
  %285 = xor i32 %284, %260
  %286 = lshr i32 %190, 24
  %287 = zext i32 %286 to i64
  %288 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %287
  %289 = load i32, i32 addrspace(4)* %288, align 4
  %290 = lshr i32 %212, 16
  %291 = and i32 %290, 255
  %292 = zext i32 %291 to i64
  %293 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %292
  %294 = load i32, i32 addrspace(4)* %293, align 4
  %295 = lshr i32 %234, 8
  %296 = and i32 %295, 255
  %297 = zext i32 %296 to i64
  %298 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %297
  %299 = load i32, i32 addrspace(4)* %298, align 4
  %300 = xor i32 %289, %294
  %301 = xor i32 %300, %299
  %302 = and i32 %168, 255
  %303 = zext i32 %302 to i64
  %304 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %303
  %305 = load i32, i32 addrspace(4)* %304, align 4
  %306 = xor i32 %301, %305
  %307 = xor i32 %306, %261
  %308 = lshr i32 %212, 24
  %309 = zext i32 %308 to i64
  %310 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %309
  %311 = load i32, i32 addrspace(4)* %310, align 4
  %312 = lshr i32 %234, 16
  %313 = and i32 %312, 255
  %314 = zext i32 %313 to i64
  %315 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %314
  %316 = load i32, i32 addrspace(4)* %315, align 4
  %317 = lshr i32 %168, 8
  %318 = and i32 %317, 255
  %319 = zext i32 %318 to i64
  %320 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %319
  %321 = load i32, i32 addrspace(4)* %320, align 4
  %322 = xor i32 %311, %316
  %323 = xor i32 %322, %321
  %324 = and i32 %190, 255
  %325 = zext i32 %324 to i64
  %326 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %325
  %327 = load i32, i32 addrspace(4)* %326, align 4
  %328 = xor i32 %323, %327
  %329 = xor i32 %328, %262
  %330 = lshr i32 %234, 24
  %331 = zext i32 %330 to i64
  %332 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %331
  %333 = load i32, i32 addrspace(4)* %332, align 4
  %334 = lshr i32 %168, 16
  %335 = and i32 %334, 255
  %336 = zext i32 %335 to i64
  %337 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %336
  %338 = load i32, i32 addrspace(4)* %337, align 4
  %339 = lshr i32 %190, 8
  %340 = and i32 %339, 255
  %341 = zext i32 %340 to i64
  %342 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %341
  %343 = load i32, i32 addrspace(4)* %342, align 4
  %344 = xor i32 %333, %338
  %345 = xor i32 %344, %343
  %346 = and i32 %212, 255
  %347 = zext i32 %346 to i64
  %348 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %347
  %349 = load i32, i32 addrspace(4)* %348, align 4
  %350 = xor i32 %345, %349
  %351 = xor i32 %350, %263
  %352 = lshr i32 %263, 24
  %353 = zext i32 %352 to i64
  %354 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %353
  %355 = load i32, i32 addrspace(4)* %354, align 4
  %356 = and i32 %355, 255
  %357 = lshr i32 %263, 16
  %358 = and i32 %357, 255
  %359 = zext i32 %358 to i64
  %360 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %359
  %361 = load i32, i32 addrspace(4)* %360, align 4
  %362 = and i32 %361, -16777216
  %363 = or i32 %356, %362
  %364 = lshr i32 %263, 8
  %365 = and i32 %364, 255
  %366 = zext i32 %365 to i64
  %367 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %366
  %368 = load i32, i32 addrspace(4)* %367, align 4
  %369 = and i32 %368, 16711680
  %370 = or i32 %363, %369
  %371 = and i32 %263, 255
  %372 = zext i32 %371 to i64
  %373 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %372
  %374 = load i32, i32 addrspace(4)* %373, align 4
  %375 = and i32 %374, 65280
  %376 = or i32 %370, %375
  %377 = xor i32 %376, %143
  %378 = xor i32 %377, 33554432
  %379 = xor i32 %144, %378
  %380 = xor i32 %378, %2
  %381 = xor i32 %146, %380
  %382 = lshr i32 %285, 24
  %383 = zext i32 %382 to i64
  %384 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %383
  %385 = load i32, i32 addrspace(4)* %384, align 4
  %386 = lshr i32 %307, 16
  %387 = and i32 %386, 255
  %388 = zext i32 %387 to i64
  %389 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %388
  %390 = load i32, i32 addrspace(4)* %389, align 4
  %391 = lshr i32 %329, 8
  %392 = and i32 %391, 255
  %393 = zext i32 %392 to i64
  %394 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %393
  %395 = load i32, i32 addrspace(4)* %394, align 4
  %396 = xor i32 %385, %390
  %397 = xor i32 %396, %395
  %398 = and i32 %351, 255
  %399 = zext i32 %398 to i64
  %400 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %399
  %401 = load i32, i32 addrspace(4)* %400, align 4
  %402 = xor i32 %397, %401
  %403 = xor i32 %402, %378
  %404 = lshr i32 %307, 24
  %405 = zext i32 %404 to i64
  %406 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %405
  %407 = load i32, i32 addrspace(4)* %406, align 4
  %408 = lshr i32 %329, 16
  %409 = and i32 %408, 255
  %410 = zext i32 %409 to i64
  %411 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %410
  %412 = load i32, i32 addrspace(4)* %411, align 4
  %413 = lshr i32 %351, 8
  %414 = and i32 %413, 255
  %415 = zext i32 %414 to i64
  %416 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %415
  %417 = load i32, i32 addrspace(4)* %416, align 4
  %418 = xor i32 %407, %412
  %419 = xor i32 %418, %417
  %420 = and i32 %285, 255
  %421 = zext i32 %420 to i64
  %422 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %421
  %423 = load i32, i32 addrspace(4)* %422, align 4
  %424 = xor i32 %419, %423
  %425 = xor i32 %424, %379
  %426 = lshr i32 %329, 24
  %427 = zext i32 %426 to i64
  %428 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %427
  %429 = load i32, i32 addrspace(4)* %428, align 4
  %430 = lshr i32 %351, 16
  %431 = and i32 %430, 255
  %432 = zext i32 %431 to i64
  %433 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %432
  %434 = load i32, i32 addrspace(4)* %433, align 4
  %435 = lshr i32 %285, 8
  %436 = and i32 %435, 255
  %437 = zext i32 %436 to i64
  %438 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %437
  %439 = load i32, i32 addrspace(4)* %438, align 4
  %440 = xor i32 %429, %434
  %441 = xor i32 %440, %439
  %442 = and i32 %307, 255
  %443 = zext i32 %442 to i64
  %444 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %443
  %445 = load i32, i32 addrspace(4)* %444, align 4
  %446 = xor i32 %441, %445
  %447 = xor i32 %446, %380
  %448 = lshr i32 %351, 24
  %449 = zext i32 %448 to i64
  %450 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %449
  %451 = load i32, i32 addrspace(4)* %450, align 4
  %452 = lshr i32 %285, 16
  %453 = and i32 %452, 255
  %454 = zext i32 %453 to i64
  %455 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %454
  %456 = load i32, i32 addrspace(4)* %455, align 4
  %457 = lshr i32 %307, 8
  %458 = and i32 %457, 255
  %459 = zext i32 %458 to i64
  %460 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %459
  %461 = load i32, i32 addrspace(4)* %460, align 4
  %462 = xor i32 %451, %456
  %463 = xor i32 %462, %461
  %464 = and i32 %329, 255
  %465 = zext i32 %464 to i64
  %466 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %465
  %467 = load i32, i32 addrspace(4)* %466, align 4
  %468 = xor i32 %463, %467
  %469 = xor i32 %468, %381
  %470 = lshr i32 %381, 24
  %471 = zext i32 %470 to i64
  %472 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %471
  %473 = load i32, i32 addrspace(4)* %472, align 4
  %474 = and i32 %473, -16777216
  %475 = lshr i32 %381, 16
  %476 = and i32 %475, 255
  %477 = zext i32 %476 to i64
  %478 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %477
  %479 = load i32, i32 addrspace(4)* %478, align 4
  %480 = and i32 %479, 16711680
  %481 = or i32 %474, %480
  %482 = lshr i32 %381, 8
  %483 = and i32 %482, 255
  %484 = zext i32 %483 to i64
  %485 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %484
  %486 = load i32, i32 addrspace(4)* %485, align 4
  %487 = and i32 %486, 65280
  %488 = or i32 %481, %487
  %489 = and i32 %381, 255
  %490 = zext i32 %489 to i64
  %491 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %490
  %492 = load i32, i32 addrspace(4)* %491, align 4
  %493 = and i32 %492, 255
  %494 = or i32 %488, %493
  %495 = xor i32 %260, %494
  %496 = xor i32 %494, %5
  %497 = xor i32 %262, %496
  %498 = xor i32 %496, %7
  %499 = lshr i32 %403, 24
  %500 = zext i32 %499 to i64
  %501 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %500
  %502 = load i32, i32 addrspace(4)* %501, align 4
  %503 = lshr i32 %425, 16
  %504 = and i32 %503, 255
  %505 = zext i32 %504 to i64
  %506 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %505
  %507 = load i32, i32 addrspace(4)* %506, align 4
  %508 = lshr i32 %447, 8
  %509 = and i32 %508, 255
  %510 = zext i32 %509 to i64
  %511 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %510
  %512 = load i32, i32 addrspace(4)* %511, align 4
  %513 = xor i32 %502, %507
  %514 = xor i32 %513, %512
  %515 = and i32 %469, 255
  %516 = zext i32 %515 to i64
  %517 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %516
  %518 = load i32, i32 addrspace(4)* %517, align 4
  %519 = xor i32 %514, %518
  %520 = xor i32 %519, %495
  %521 = lshr i32 %425, 24
  %522 = zext i32 %521 to i64
  %523 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %522
  %524 = load i32, i32 addrspace(4)* %523, align 4
  %525 = lshr i32 %447, 16
  %526 = and i32 %525, 255
  %527 = zext i32 %526 to i64
  %528 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %527
  %529 = load i32, i32 addrspace(4)* %528, align 4
  %530 = lshr i32 %469, 8
  %531 = and i32 %530, 255
  %532 = zext i32 %531 to i64
  %533 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %532
  %534 = load i32, i32 addrspace(4)* %533, align 4
  %535 = xor i32 %524, %529
  %536 = xor i32 %535, %534
  %537 = and i32 %403, 255
  %538 = zext i32 %537 to i64
  %539 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %538
  %540 = load i32, i32 addrspace(4)* %539, align 4
  %541 = xor i32 %536, %540
  %542 = xor i32 %541, %496
  %543 = lshr i32 %447, 24
  %544 = zext i32 %543 to i64
  %545 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %544
  %546 = load i32, i32 addrspace(4)* %545, align 4
  %547 = lshr i32 %469, 16
  %548 = and i32 %547, 255
  %549 = zext i32 %548 to i64
  %550 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %549
  %551 = load i32, i32 addrspace(4)* %550, align 4
  %552 = lshr i32 %403, 8
  %553 = and i32 %552, 255
  %554 = zext i32 %553 to i64
  %555 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %554
  %556 = load i32, i32 addrspace(4)* %555, align 4
  %557 = xor i32 %546, %551
  %558 = xor i32 %557, %556
  %559 = and i32 %425, 255
  %560 = zext i32 %559 to i64
  %561 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %560
  %562 = load i32, i32 addrspace(4)* %561, align 4
  %563 = xor i32 %558, %562
  %564 = xor i32 %563, %497
  %565 = lshr i32 %469, 24
  %566 = zext i32 %565 to i64
  %567 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %566
  %568 = load i32, i32 addrspace(4)* %567, align 4
  %569 = lshr i32 %403, 16
  %570 = and i32 %569, 255
  %571 = zext i32 %570 to i64
  %572 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %571
  %573 = load i32, i32 addrspace(4)* %572, align 4
  %574 = lshr i32 %425, 8
  %575 = and i32 %574, 255
  %576 = zext i32 %575 to i64
  %577 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %576
  %578 = load i32, i32 addrspace(4)* %577, align 4
  %579 = xor i32 %568, %573
  %580 = xor i32 %579, %578
  %581 = and i32 %447, 255
  %582 = zext i32 %581 to i64
  %583 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %582
  %584 = load i32, i32 addrspace(4)* %583, align 4
  %585 = xor i32 %580, %584
  %586 = xor i32 %585, %498
  %587 = lshr i32 %498, 24
  %588 = zext i32 %587 to i64
  %589 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %588
  %590 = load i32, i32 addrspace(4)* %589, align 4
  %591 = and i32 %590, 255
  %592 = lshr i32 %498, 16
  %593 = and i32 %592, 255
  %594 = zext i32 %593 to i64
  %595 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %594
  %596 = load i32, i32 addrspace(4)* %595, align 4
  %597 = and i32 %596, -16777216
  %598 = or i32 %591, %597
  %599 = lshr i32 %498, 8
  %600 = and i32 %599, 255
  %601 = zext i32 %600 to i64
  %602 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %601
  %603 = load i32, i32 addrspace(4)* %602, align 4
  %604 = and i32 %603, 16711680
  %605 = or i32 %598, %604
  %606 = and i32 %498, 255
  %607 = zext i32 %606 to i64
  %608 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %607
  %609 = load i32, i32 addrspace(4)* %608, align 4
  %610 = and i32 %609, 65280
  %611 = or i32 %605, %610
  %612 = xor i32 %611, %378
  %613 = xor i32 %612, 67108864
  %614 = xor i32 %379, %613
  %615 = xor i32 %380, %614
  %616 = xor i32 %146, %614
  %617 = lshr i32 %520, 24
  %618 = zext i32 %617 to i64
  %619 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %618
  %620 = load i32, i32 addrspace(4)* %619, align 4
  %621 = lshr i32 %542, 16
  %622 = and i32 %621, 255
  %623 = zext i32 %622 to i64
  %624 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %623
  %625 = load i32, i32 addrspace(4)* %624, align 4
  %626 = lshr i32 %564, 8
  %627 = and i32 %626, 255
  %628 = zext i32 %627 to i64
  %629 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %628
  %630 = load i32, i32 addrspace(4)* %629, align 4
  %631 = xor i32 %620, %625
  %632 = xor i32 %631, %630
  %633 = and i32 %586, 255
  %634 = zext i32 %633 to i64
  %635 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %634
  %636 = load i32, i32 addrspace(4)* %635, align 4
  %637 = xor i32 %632, %636
  %638 = xor i32 %637, %613
  %639 = lshr i32 %542, 24
  %640 = zext i32 %639 to i64
  %641 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %640
  %642 = load i32, i32 addrspace(4)* %641, align 4
  %643 = lshr i32 %564, 16
  %644 = and i32 %643, 255
  %645 = zext i32 %644 to i64
  %646 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %645
  %647 = load i32, i32 addrspace(4)* %646, align 4
  %648 = lshr i32 %586, 8
  %649 = and i32 %648, 255
  %650 = zext i32 %649 to i64
  %651 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %650
  %652 = load i32, i32 addrspace(4)* %651, align 4
  %653 = xor i32 %642, %647
  %654 = xor i32 %653, %652
  %655 = and i32 %520, 255
  %656 = zext i32 %655 to i64
  %657 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %656
  %658 = load i32, i32 addrspace(4)* %657, align 4
  %659 = xor i32 %654, %658
  %660 = xor i32 %659, %614
  %661 = lshr i32 %564, 24
  %662 = zext i32 %661 to i64
  %663 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %662
  %664 = load i32, i32 addrspace(4)* %663, align 4
  %665 = lshr i32 %586, 16
  %666 = and i32 %665, 255
  %667 = zext i32 %666 to i64
  %668 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %667
  %669 = load i32, i32 addrspace(4)* %668, align 4
  %670 = lshr i32 %520, 8
  %671 = and i32 %670, 255
  %672 = zext i32 %671 to i64
  %673 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %672
  %674 = load i32, i32 addrspace(4)* %673, align 4
  %675 = xor i32 %664, %669
  %676 = xor i32 %675, %674
  %677 = and i32 %542, 255
  %678 = zext i32 %677 to i64
  %679 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %678
  %680 = load i32, i32 addrspace(4)* %679, align 4
  %681 = xor i32 %676, %680
  %682 = xor i32 %681, %615
  %683 = lshr i32 %586, 24
  %684 = zext i32 %683 to i64
  %685 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %684
  %686 = load i32, i32 addrspace(4)* %685, align 4
  %687 = lshr i32 %520, 16
  %688 = and i32 %687, 255
  %689 = zext i32 %688 to i64
  %690 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %689
  %691 = load i32, i32 addrspace(4)* %690, align 4
  %692 = lshr i32 %542, 8
  %693 = and i32 %692, 255
  %694 = zext i32 %693 to i64
  %695 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %694
  %696 = load i32, i32 addrspace(4)* %695, align 4
  %697 = xor i32 %686, %691
  %698 = xor i32 %697, %696
  %699 = and i32 %564, 255
  %700 = zext i32 %699 to i64
  %701 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %700
  %702 = load i32, i32 addrspace(4)* %701, align 4
  %703 = xor i32 %698, %702
  %704 = xor i32 %703, %616
  %705 = lshr i32 %616, 24
  %706 = zext i32 %705 to i64
  %707 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %706
  %708 = load i32, i32 addrspace(4)* %707, align 4
  %709 = and i32 %708, -16777216
  %710 = lshr i32 %616, 16
  %711 = and i32 %710, 255
  %712 = zext i32 %711 to i64
  %713 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %712
  %714 = load i32, i32 addrspace(4)* %713, align 4
  %715 = and i32 %714, 16711680
  %716 = or i32 %709, %715
  %717 = lshr i32 %616, 8
  %718 = and i32 %717, 255
  %719 = zext i32 %718 to i64
  %720 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %719
  %721 = load i32, i32 addrspace(4)* %720, align 4
  %722 = and i32 %721, 65280
  %723 = or i32 %716, %722
  %724 = and i32 %616, 255
  %725 = zext i32 %724 to i64
  %726 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %725
  %727 = load i32, i32 addrspace(4)* %726, align 4
  %728 = and i32 %727, 255
  %729 = or i32 %723, %728
  %730 = xor i32 %495, %729
  %731 = xor i32 %496, %730
  %732 = xor i32 %262, %730
  %733 = xor i32 %498, %732
  %734 = lshr i32 %638, 24
  %735 = zext i32 %734 to i64
  %736 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %735
  %737 = load i32, i32 addrspace(4)* %736, align 4
  %738 = lshr i32 %660, 16
  %739 = and i32 %738, 255
  %740 = zext i32 %739 to i64
  %741 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %740
  %742 = load i32, i32 addrspace(4)* %741, align 4
  %743 = lshr i32 %682, 8
  %744 = and i32 %743, 255
  %745 = zext i32 %744 to i64
  %746 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %745
  %747 = load i32, i32 addrspace(4)* %746, align 4
  %748 = xor i32 %737, %742
  %749 = xor i32 %748, %747
  %750 = and i32 %704, 255
  %751 = zext i32 %750 to i64
  %752 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %751
  %753 = load i32, i32 addrspace(4)* %752, align 4
  %754 = xor i32 %749, %753
  %755 = xor i32 %754, %730
  %756 = lshr i32 %660, 24
  %757 = zext i32 %756 to i64
  %758 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %757
  %759 = load i32, i32 addrspace(4)* %758, align 4
  %760 = lshr i32 %682, 16
  %761 = and i32 %760, 255
  %762 = zext i32 %761 to i64
  %763 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %762
  %764 = load i32, i32 addrspace(4)* %763, align 4
  %765 = lshr i32 %704, 8
  %766 = and i32 %765, 255
  %767 = zext i32 %766 to i64
  %768 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %767
  %769 = load i32, i32 addrspace(4)* %768, align 4
  %770 = xor i32 %759, %764
  %771 = xor i32 %770, %769
  %772 = and i32 %638, 255
  %773 = zext i32 %772 to i64
  %774 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %773
  %775 = load i32, i32 addrspace(4)* %774, align 4
  %776 = xor i32 %771, %775
  %777 = xor i32 %776, %731
  %778 = lshr i32 %682, 24
  %779 = zext i32 %778 to i64
  %780 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %779
  %781 = load i32, i32 addrspace(4)* %780, align 4
  %782 = lshr i32 %704, 16
  %783 = and i32 %782, 255
  %784 = zext i32 %783 to i64
  %785 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %784
  %786 = load i32, i32 addrspace(4)* %785, align 4
  %787 = lshr i32 %638, 8
  %788 = and i32 %787, 255
  %789 = zext i32 %788 to i64
  %790 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %789
  %791 = load i32, i32 addrspace(4)* %790, align 4
  %792 = xor i32 %781, %786
  %793 = xor i32 %792, %791
  %794 = and i32 %660, 255
  %795 = zext i32 %794 to i64
  %796 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %795
  %797 = load i32, i32 addrspace(4)* %796, align 4
  %798 = xor i32 %793, %797
  %799 = xor i32 %798, %732
  %800 = lshr i32 %704, 24
  %801 = zext i32 %800 to i64
  %802 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %801
  %803 = load i32, i32 addrspace(4)* %802, align 4
  %804 = lshr i32 %638, 16
  %805 = and i32 %804, 255
  %806 = zext i32 %805 to i64
  %807 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %806
  %808 = load i32, i32 addrspace(4)* %807, align 4
  %809 = lshr i32 %660, 8
  %810 = and i32 %809, 255
  %811 = zext i32 %810 to i64
  %812 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %811
  %813 = load i32, i32 addrspace(4)* %812, align 4
  %814 = xor i32 %803, %808
  %815 = xor i32 %814, %813
  %816 = and i32 %682, 255
  %817 = zext i32 %816 to i64
  %818 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %817
  %819 = load i32, i32 addrspace(4)* %818, align 4
  %820 = xor i32 %815, %819
  %821 = xor i32 %820, %733
  %822 = lshr i32 %733, 24
  %823 = zext i32 %822 to i64
  %824 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %823
  %825 = load i32, i32 addrspace(4)* %824, align 4
  %826 = and i32 %825, 255
  %827 = lshr i32 %733, 16
  %828 = and i32 %827, 255
  %829 = zext i32 %828 to i64
  %830 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %829
  %831 = load i32, i32 addrspace(4)* %830, align 4
  %832 = and i32 %831, -16777216
  %833 = or i32 %826, %832
  %834 = lshr i32 %733, 8
  %835 = and i32 %834, 255
  %836 = zext i32 %835 to i64
  %837 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %836
  %838 = load i32, i32 addrspace(4)* %837, align 4
  %839 = and i32 %838, 16711680
  %840 = or i32 %833, %839
  %841 = and i32 %733, 255
  %842 = zext i32 %841 to i64
  %843 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %842
  %844 = load i32, i32 addrspace(4)* %843, align 4
  %845 = and i32 %844, 65280
  %846 = or i32 %840, %845
  %847 = xor i32 %846, %613
  %848 = xor i32 %847, 134217728
  %849 = xor i32 %614, %848
  %850 = xor i32 %380, %848
  %851 = xor i32 %616, %850
  %852 = lshr i32 %755, 24
  %853 = zext i32 %852 to i64
  %854 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %853
  %855 = load i32, i32 addrspace(4)* %854, align 4
  %856 = lshr i32 %777, 16
  %857 = and i32 %856, 255
  %858 = zext i32 %857 to i64
  %859 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %858
  %860 = load i32, i32 addrspace(4)* %859, align 4
  %861 = lshr i32 %799, 8
  %862 = and i32 %861, 255
  %863 = zext i32 %862 to i64
  %864 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %863
  %865 = load i32, i32 addrspace(4)* %864, align 4
  %866 = xor i32 %855, %860
  %867 = xor i32 %866, %865
  %868 = and i32 %821, 255
  %869 = zext i32 %868 to i64
  %870 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %869
  %871 = load i32, i32 addrspace(4)* %870, align 4
  %872 = xor i32 %867, %871
  %873 = xor i32 %872, %848
  %874 = lshr i32 %777, 24
  %875 = zext i32 %874 to i64
  %876 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %875
  %877 = load i32, i32 addrspace(4)* %876, align 4
  %878 = lshr i32 %799, 16
  %879 = and i32 %878, 255
  %880 = zext i32 %879 to i64
  %881 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %880
  %882 = load i32, i32 addrspace(4)* %881, align 4
  %883 = lshr i32 %821, 8
  %884 = and i32 %883, 255
  %885 = zext i32 %884 to i64
  %886 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %885
  %887 = load i32, i32 addrspace(4)* %886, align 4
  %888 = xor i32 %877, %882
  %889 = xor i32 %888, %887
  %890 = and i32 %755, 255
  %891 = zext i32 %890 to i64
  %892 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %891
  %893 = load i32, i32 addrspace(4)* %892, align 4
  %894 = xor i32 %889, %893
  %895 = xor i32 %894, %849
  %896 = lshr i32 %799, 24
  %897 = zext i32 %896 to i64
  %898 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %897
  %899 = load i32, i32 addrspace(4)* %898, align 4
  %900 = lshr i32 %821, 16
  %901 = and i32 %900, 255
  %902 = zext i32 %901 to i64
  %903 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %902
  %904 = load i32, i32 addrspace(4)* %903, align 4
  %905 = lshr i32 %755, 8
  %906 = and i32 %905, 255
  %907 = zext i32 %906 to i64
  %908 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %907
  %909 = load i32, i32 addrspace(4)* %908, align 4
  %910 = xor i32 %899, %904
  %911 = xor i32 %910, %909
  %912 = and i32 %777, 255
  %913 = zext i32 %912 to i64
  %914 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %913
  %915 = load i32, i32 addrspace(4)* %914, align 4
  %916 = xor i32 %911, %915
  %917 = xor i32 %916, %850
  %918 = lshr i32 %821, 24
  %919 = zext i32 %918 to i64
  %920 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %919
  %921 = load i32, i32 addrspace(4)* %920, align 4
  %922 = lshr i32 %755, 16
  %923 = and i32 %922, 255
  %924 = zext i32 %923 to i64
  %925 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %924
  %926 = load i32, i32 addrspace(4)* %925, align 4
  %927 = lshr i32 %777, 8
  %928 = and i32 %927, 255
  %929 = zext i32 %928 to i64
  %930 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %929
  %931 = load i32, i32 addrspace(4)* %930, align 4
  %932 = xor i32 %921, %926
  %933 = xor i32 %932, %931
  %934 = and i32 %799, 255
  %935 = zext i32 %934 to i64
  %936 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %935
  %937 = load i32, i32 addrspace(4)* %936, align 4
  %938 = xor i32 %933, %937
  %939 = xor i32 %938, %851
  %940 = lshr i32 %851, 24
  %941 = zext i32 %940 to i64
  %942 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %941
  %943 = load i32, i32 addrspace(4)* %942, align 4
  %944 = and i32 %943, -16777216
  %945 = lshr i32 %851, 16
  %946 = and i32 %945, 255
  %947 = zext i32 %946 to i64
  %948 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %947
  %949 = load i32, i32 addrspace(4)* %948, align 4
  %950 = and i32 %949, 16711680
  %951 = or i32 %944, %950
  %952 = lshr i32 %851, 8
  %953 = and i32 %952, 255
  %954 = zext i32 %953 to i64
  %955 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %954
  %956 = load i32, i32 addrspace(4)* %955, align 4
  %957 = and i32 %956, 65280
  %958 = or i32 %951, %957
  %959 = and i32 %851, 255
  %960 = zext i32 %959 to i64
  %961 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %960
  %962 = load i32, i32 addrspace(4)* %961, align 4
  %963 = and i32 %962, 255
  %964 = or i32 %958, %963
  %965 = xor i32 %730, %964
  %966 = xor i32 %496, %964
  %967 = xor i32 %732, %966
  %968 = xor i32 %964, %7
  %969 = lshr i32 %873, 24
  %970 = zext i32 %969 to i64
  %971 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %970
  %972 = load i32, i32 addrspace(4)* %971, align 4
  %973 = lshr i32 %895, 16
  %974 = and i32 %973, 255
  %975 = zext i32 %974 to i64
  %976 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %975
  %977 = load i32, i32 addrspace(4)* %976, align 4
  %978 = lshr i32 %917, 8
  %979 = and i32 %978, 255
  %980 = zext i32 %979 to i64
  %981 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %980
  %982 = load i32, i32 addrspace(4)* %981, align 4
  %983 = xor i32 %972, %977
  %984 = xor i32 %983, %982
  %985 = and i32 %939, 255
  %986 = zext i32 %985 to i64
  %987 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %986
  %988 = load i32, i32 addrspace(4)* %987, align 4
  %989 = xor i32 %984, %988
  %990 = xor i32 %989, %965
  %991 = lshr i32 %895, 24
  %992 = zext i32 %991 to i64
  %993 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %992
  %994 = load i32, i32 addrspace(4)* %993, align 4
  %995 = lshr i32 %917, 16
  %996 = and i32 %995, 255
  %997 = zext i32 %996 to i64
  %998 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %997
  %999 = load i32, i32 addrspace(4)* %998, align 4
  %1000 = lshr i32 %939, 8
  %1001 = and i32 %1000, 255
  %1002 = zext i32 %1001 to i64
  %1003 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1002
  %1004 = load i32, i32 addrspace(4)* %1003, align 4
  %1005 = xor i32 %994, %999
  %1006 = xor i32 %1005, %1004
  %1007 = and i32 %873, 255
  %1008 = zext i32 %1007 to i64
  %1009 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1008
  %1010 = load i32, i32 addrspace(4)* %1009, align 4
  %1011 = xor i32 %1006, %1010
  %1012 = xor i32 %1011, %966
  %1013 = lshr i32 %917, 24
  %1014 = zext i32 %1013 to i64
  %1015 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1014
  %1016 = load i32, i32 addrspace(4)* %1015, align 4
  %1017 = lshr i32 %939, 16
  %1018 = and i32 %1017, 255
  %1019 = zext i32 %1018 to i64
  %1020 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1019
  %1021 = load i32, i32 addrspace(4)* %1020, align 4
  %1022 = lshr i32 %873, 8
  %1023 = and i32 %1022, 255
  %1024 = zext i32 %1023 to i64
  %1025 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1024
  %1026 = load i32, i32 addrspace(4)* %1025, align 4
  %1027 = xor i32 %1016, %1021
  %1028 = xor i32 %1027, %1026
  %1029 = and i32 %895, 255
  %1030 = zext i32 %1029 to i64
  %1031 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1030
  %1032 = load i32, i32 addrspace(4)* %1031, align 4
  %1033 = xor i32 %1028, %1032
  %1034 = xor i32 %1033, %967
  %1035 = lshr i32 %939, 24
  %1036 = zext i32 %1035 to i64
  %1037 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1036
  %1038 = load i32, i32 addrspace(4)* %1037, align 4
  %1039 = lshr i32 %873, 16
  %1040 = and i32 %1039, 255
  %1041 = zext i32 %1040 to i64
  %1042 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1041
  %1043 = load i32, i32 addrspace(4)* %1042, align 4
  %1044 = lshr i32 %895, 8
  %1045 = and i32 %1044, 255
  %1046 = zext i32 %1045 to i64
  %1047 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1046
  %1048 = load i32, i32 addrspace(4)* %1047, align 4
  %1049 = xor i32 %1038, %1043
  %1050 = xor i32 %1049, %1048
  %1051 = and i32 %917, 255
  %1052 = zext i32 %1051 to i64
  %1053 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1052
  %1054 = load i32, i32 addrspace(4)* %1053, align 4
  %1055 = xor i32 %1050, %1054
  %1056 = xor i32 %1055, %968
  %1057 = lshr i32 %968, 24
  %1058 = zext i32 %1057 to i64
  %1059 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1058
  %1060 = load i32, i32 addrspace(4)* %1059, align 4
  %1061 = and i32 %1060, 255
  %1062 = lshr i32 %968, 16
  %1063 = and i32 %1062, 255
  %1064 = zext i32 %1063 to i64
  %1065 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1064
  %1066 = load i32, i32 addrspace(4)* %1065, align 4
  %1067 = and i32 %1066, -16777216
  %1068 = or i32 %1061, %1067
  %1069 = lshr i32 %968, 8
  %1070 = and i32 %1069, 255
  %1071 = zext i32 %1070 to i64
  %1072 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1071
  %1073 = load i32, i32 addrspace(4)* %1072, align 4
  %1074 = and i32 %1073, 16711680
  %1075 = or i32 %1068, %1074
  %1076 = and i32 %968, 255
  %1077 = zext i32 %1076 to i64
  %1078 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1077
  %1079 = load i32, i32 addrspace(4)* %1078, align 4
  %1080 = and i32 %1079, 65280
  %1081 = or i32 %1075, %1080
  %1082 = xor i32 %1081, %848
  %1083 = xor i32 %1082, 268435456
  %1084 = xor i32 %849, %1083
  %1085 = xor i32 %850, %1084
  %1086 = xor i32 %616, %1084
  %1087 = lshr i32 %990, 24
  %1088 = zext i32 %1087 to i64
  %1089 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1088
  %1090 = load i32, i32 addrspace(4)* %1089, align 4
  %1091 = lshr i32 %1012, 16
  %1092 = and i32 %1091, 255
  %1093 = zext i32 %1092 to i64
  %1094 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1093
  %1095 = load i32, i32 addrspace(4)* %1094, align 4
  %1096 = lshr i32 %1034, 8
  %1097 = and i32 %1096, 255
  %1098 = zext i32 %1097 to i64
  %1099 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1098
  %1100 = load i32, i32 addrspace(4)* %1099, align 4
  %1101 = xor i32 %1090, %1095
  %1102 = xor i32 %1101, %1100
  %1103 = and i32 %1056, 255
  %1104 = zext i32 %1103 to i64
  %1105 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1104
  %1106 = load i32, i32 addrspace(4)* %1105, align 4
  %1107 = xor i32 %1102, %1106
  %1108 = xor i32 %1107, %1083
  %1109 = lshr i32 %1012, 24
  %1110 = zext i32 %1109 to i64
  %1111 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1110
  %1112 = load i32, i32 addrspace(4)* %1111, align 4
  %1113 = lshr i32 %1034, 16
  %1114 = and i32 %1113, 255
  %1115 = zext i32 %1114 to i64
  %1116 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1115
  %1117 = load i32, i32 addrspace(4)* %1116, align 4
  %1118 = lshr i32 %1056, 8
  %1119 = and i32 %1118, 255
  %1120 = zext i32 %1119 to i64
  %1121 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1120
  %1122 = load i32, i32 addrspace(4)* %1121, align 4
  %1123 = xor i32 %1112, %1117
  %1124 = xor i32 %1123, %1122
  %1125 = and i32 %990, 255
  %1126 = zext i32 %1125 to i64
  %1127 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1126
  %1128 = load i32, i32 addrspace(4)* %1127, align 4
  %1129 = xor i32 %1124, %1128
  %1130 = xor i32 %1129, %1084
  %1131 = lshr i32 %1034, 24
  %1132 = zext i32 %1131 to i64
  %1133 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1132
  %1134 = load i32, i32 addrspace(4)* %1133, align 4
  %1135 = lshr i32 %1056, 16
  %1136 = and i32 %1135, 255
  %1137 = zext i32 %1136 to i64
  %1138 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1137
  %1139 = load i32, i32 addrspace(4)* %1138, align 4
  %1140 = lshr i32 %990, 8
  %1141 = and i32 %1140, 255
  %1142 = zext i32 %1141 to i64
  %1143 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1142
  %1144 = load i32, i32 addrspace(4)* %1143, align 4
  %1145 = xor i32 %1134, %1139
  %1146 = xor i32 %1145, %1144
  %1147 = and i32 %1012, 255
  %1148 = zext i32 %1147 to i64
  %1149 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1148
  %1150 = load i32, i32 addrspace(4)* %1149, align 4
  %1151 = xor i32 %1146, %1150
  %1152 = xor i32 %1151, %1085
  %1153 = lshr i32 %1056, 24
  %1154 = zext i32 %1153 to i64
  %1155 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1154
  %1156 = load i32, i32 addrspace(4)* %1155, align 4
  %1157 = lshr i32 %990, 16
  %1158 = and i32 %1157, 255
  %1159 = zext i32 %1158 to i64
  %1160 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1159
  %1161 = load i32, i32 addrspace(4)* %1160, align 4
  %1162 = lshr i32 %1012, 8
  %1163 = and i32 %1162, 255
  %1164 = zext i32 %1163 to i64
  %1165 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1164
  %1166 = load i32, i32 addrspace(4)* %1165, align 4
  %1167 = xor i32 %1156, %1161
  %1168 = xor i32 %1167, %1166
  %1169 = and i32 %1034, 255
  %1170 = zext i32 %1169 to i64
  %1171 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1170
  %1172 = load i32, i32 addrspace(4)* %1171, align 4
  %1173 = xor i32 %1168, %1172
  %1174 = xor i32 %1173, %1086
  %1175 = lshr i32 %1086, 24
  %1176 = zext i32 %1175 to i64
  %1177 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1176
  %1178 = load i32, i32 addrspace(4)* %1177, align 4
  %1179 = and i32 %1178, -16777216
  %1180 = lshr i32 %1086, 16
  %1181 = and i32 %1180, 255
  %1182 = zext i32 %1181 to i64
  %1183 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1182
  %1184 = load i32, i32 addrspace(4)* %1183, align 4
  %1185 = and i32 %1184, 16711680
  %1186 = or i32 %1179, %1185
  %1187 = lshr i32 %1086, 8
  %1188 = and i32 %1187, 255
  %1189 = zext i32 %1188 to i64
  %1190 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1189
  %1191 = load i32, i32 addrspace(4)* %1190, align 4
  %1192 = and i32 %1191, 65280
  %1193 = or i32 %1186, %1192
  %1194 = and i32 %1086, 255
  %1195 = zext i32 %1194 to i64
  %1196 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1195
  %1197 = load i32, i32 addrspace(4)* %1196, align 4
  %1198 = and i32 %1197, 255
  %1199 = or i32 %1193, %1198
  %1200 = xor i32 %965, %1199
  %1201 = xor i32 %966, %1200
  %1202 = xor i32 %732, %1200
  %1203 = xor i32 %968, %1202
  %1204 = lshr i32 %1108, 24
  %1205 = zext i32 %1204 to i64
  %1206 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1205
  %1207 = load i32, i32 addrspace(4)* %1206, align 4
  %1208 = lshr i32 %1130, 16
  %1209 = and i32 %1208, 255
  %1210 = zext i32 %1209 to i64
  %1211 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1210
  %1212 = load i32, i32 addrspace(4)* %1211, align 4
  %1213 = lshr i32 %1152, 8
  %1214 = and i32 %1213, 255
  %1215 = zext i32 %1214 to i64
  %1216 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1215
  %1217 = load i32, i32 addrspace(4)* %1216, align 4
  %1218 = xor i32 %1207, %1212
  %1219 = xor i32 %1218, %1217
  %1220 = and i32 %1174, 255
  %1221 = zext i32 %1220 to i64
  %1222 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1221
  %1223 = load i32, i32 addrspace(4)* %1222, align 4
  %1224 = xor i32 %1219, %1223
  %1225 = xor i32 %1224, %1200
  %1226 = lshr i32 %1130, 24
  %1227 = zext i32 %1226 to i64
  %1228 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1227
  %1229 = load i32, i32 addrspace(4)* %1228, align 4
  %1230 = lshr i32 %1152, 16
  %1231 = and i32 %1230, 255
  %1232 = zext i32 %1231 to i64
  %1233 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1232
  %1234 = load i32, i32 addrspace(4)* %1233, align 4
  %1235 = lshr i32 %1174, 8
  %1236 = and i32 %1235, 255
  %1237 = zext i32 %1236 to i64
  %1238 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1237
  %1239 = load i32, i32 addrspace(4)* %1238, align 4
  %1240 = xor i32 %1229, %1234
  %1241 = xor i32 %1240, %1239
  %1242 = and i32 %1108, 255
  %1243 = zext i32 %1242 to i64
  %1244 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1243
  %1245 = load i32, i32 addrspace(4)* %1244, align 4
  %1246 = xor i32 %1241, %1245
  %1247 = xor i32 %1246, %1201
  %1248 = lshr i32 %1152, 24
  %1249 = zext i32 %1248 to i64
  %1250 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1249
  %1251 = load i32, i32 addrspace(4)* %1250, align 4
  %1252 = lshr i32 %1174, 16
  %1253 = and i32 %1252, 255
  %1254 = zext i32 %1253 to i64
  %1255 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1254
  %1256 = load i32, i32 addrspace(4)* %1255, align 4
  %1257 = lshr i32 %1108, 8
  %1258 = and i32 %1257, 255
  %1259 = zext i32 %1258 to i64
  %1260 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1259
  %1261 = load i32, i32 addrspace(4)* %1260, align 4
  %1262 = xor i32 %1251, %1256
  %1263 = xor i32 %1262, %1261
  %1264 = and i32 %1130, 255
  %1265 = zext i32 %1264 to i64
  %1266 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1265
  %1267 = load i32, i32 addrspace(4)* %1266, align 4
  %1268 = xor i32 %1263, %1267
  %1269 = xor i32 %1268, %1202
  %1270 = lshr i32 %1174, 24
  %1271 = zext i32 %1270 to i64
  %1272 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1271
  %1273 = load i32, i32 addrspace(4)* %1272, align 4
  %1274 = lshr i32 %1108, 16
  %1275 = and i32 %1274, 255
  %1276 = zext i32 %1275 to i64
  %1277 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1276
  %1278 = load i32, i32 addrspace(4)* %1277, align 4
  %1279 = lshr i32 %1130, 8
  %1280 = and i32 %1279, 255
  %1281 = zext i32 %1280 to i64
  %1282 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1281
  %1283 = load i32, i32 addrspace(4)* %1282, align 4
  %1284 = xor i32 %1273, %1278
  %1285 = xor i32 %1284, %1283
  %1286 = and i32 %1152, 255
  %1287 = zext i32 %1286 to i64
  %1288 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1287
  %1289 = load i32, i32 addrspace(4)* %1288, align 4
  %1290 = xor i32 %1285, %1289
  %1291 = xor i32 %1290, %1203
  %1292 = lshr i32 %1203, 24
  %1293 = zext i32 %1292 to i64
  %1294 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1293
  %1295 = load i32, i32 addrspace(4)* %1294, align 4
  %1296 = and i32 %1295, 255
  %1297 = lshr i32 %1203, 16
  %1298 = and i32 %1297, 255
  %1299 = zext i32 %1298 to i64
  %1300 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1299
  %1301 = load i32, i32 addrspace(4)* %1300, align 4
  %1302 = and i32 %1301, -16777216
  %1303 = or i32 %1296, %1302
  %1304 = lshr i32 %1203, 8
  %1305 = and i32 %1304, 255
  %1306 = zext i32 %1305 to i64
  %1307 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1306
  %1308 = load i32, i32 addrspace(4)* %1307, align 4
  %1309 = and i32 %1308, 16711680
  %1310 = or i32 %1303, %1309
  %1311 = and i32 %1203, 255
  %1312 = zext i32 %1311 to i64
  %1313 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1312
  %1314 = load i32, i32 addrspace(4)* %1313, align 4
  %1315 = and i32 %1314, 65280
  %1316 = or i32 %1310, %1315
  %1317 = xor i32 %1316, %1083
  %1318 = xor i32 %1317, 536870912
  %1319 = xor i32 %1084, %1318
  %1320 = xor i32 %850, %1318
  %1321 = xor i32 %1086, %1320
  %1322 = lshr i32 %1225, 24
  %1323 = zext i32 %1322 to i64
  %1324 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1323
  %1325 = load i32, i32 addrspace(4)* %1324, align 4
  %1326 = lshr i32 %1247, 16
  %1327 = and i32 %1326, 255
  %1328 = zext i32 %1327 to i64
  %1329 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1328
  %1330 = load i32, i32 addrspace(4)* %1329, align 4
  %1331 = lshr i32 %1269, 8
  %1332 = and i32 %1331, 255
  %1333 = zext i32 %1332 to i64
  %1334 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1333
  %1335 = load i32, i32 addrspace(4)* %1334, align 4
  %1336 = xor i32 %1325, %1330
  %1337 = xor i32 %1336, %1335
  %1338 = and i32 %1291, 255
  %1339 = zext i32 %1338 to i64
  %1340 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1339
  %1341 = load i32, i32 addrspace(4)* %1340, align 4
  %1342 = xor i32 %1337, %1341
  %1343 = xor i32 %1342, %1318
  %1344 = lshr i32 %1247, 24
  %1345 = zext i32 %1344 to i64
  %1346 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1345
  %1347 = load i32, i32 addrspace(4)* %1346, align 4
  %1348 = lshr i32 %1269, 16
  %1349 = and i32 %1348, 255
  %1350 = zext i32 %1349 to i64
  %1351 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1350
  %1352 = load i32, i32 addrspace(4)* %1351, align 4
  %1353 = lshr i32 %1291, 8
  %1354 = and i32 %1353, 255
  %1355 = zext i32 %1354 to i64
  %1356 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1355
  %1357 = load i32, i32 addrspace(4)* %1356, align 4
  %1358 = xor i32 %1347, %1352
  %1359 = xor i32 %1358, %1357
  %1360 = and i32 %1225, 255
  %1361 = zext i32 %1360 to i64
  %1362 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1361
  %1363 = load i32, i32 addrspace(4)* %1362, align 4
  %1364 = xor i32 %1359, %1363
  %1365 = xor i32 %1364, %1319
  %1366 = lshr i32 %1269, 24
  %1367 = zext i32 %1366 to i64
  %1368 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1367
  %1369 = load i32, i32 addrspace(4)* %1368, align 4
  %1370 = lshr i32 %1291, 16
  %1371 = and i32 %1370, 255
  %1372 = zext i32 %1371 to i64
  %1373 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1372
  %1374 = load i32, i32 addrspace(4)* %1373, align 4
  %1375 = lshr i32 %1225, 8
  %1376 = and i32 %1375, 255
  %1377 = zext i32 %1376 to i64
  %1378 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1377
  %1379 = load i32, i32 addrspace(4)* %1378, align 4
  %1380 = xor i32 %1369, %1374
  %1381 = xor i32 %1380, %1379
  %1382 = and i32 %1247, 255
  %1383 = zext i32 %1382 to i64
  %1384 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1383
  %1385 = load i32, i32 addrspace(4)* %1384, align 4
  %1386 = xor i32 %1381, %1385
  %1387 = xor i32 %1386, %1320
  %1388 = lshr i32 %1291, 24
  %1389 = zext i32 %1388 to i64
  %1390 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1389
  %1391 = load i32, i32 addrspace(4)* %1390, align 4
  %1392 = lshr i32 %1225, 16
  %1393 = and i32 %1392, 255
  %1394 = zext i32 %1393 to i64
  %1395 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1394
  %1396 = load i32, i32 addrspace(4)* %1395, align 4
  %1397 = lshr i32 %1247, 8
  %1398 = and i32 %1397, 255
  %1399 = zext i32 %1398 to i64
  %1400 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1399
  %1401 = load i32, i32 addrspace(4)* %1400, align 4
  %1402 = xor i32 %1391, %1396
  %1403 = xor i32 %1402, %1401
  %1404 = and i32 %1269, 255
  %1405 = zext i32 %1404 to i64
  %1406 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1405
  %1407 = load i32, i32 addrspace(4)* %1406, align 4
  %1408 = xor i32 %1403, %1407
  %1409 = xor i32 %1408, %1321
  %1410 = lshr i32 %1321, 24
  %1411 = zext i32 %1410 to i64
  %1412 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1411
  %1413 = load i32, i32 addrspace(4)* %1412, align 4
  %1414 = and i32 %1413, -16777216
  %1415 = lshr i32 %1321, 16
  %1416 = and i32 %1415, 255
  %1417 = zext i32 %1416 to i64
  %1418 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1417
  %1419 = load i32, i32 addrspace(4)* %1418, align 4
  %1420 = and i32 %1419, 16711680
  %1421 = or i32 %1414, %1420
  %1422 = lshr i32 %1321, 8
  %1423 = and i32 %1422, 255
  %1424 = zext i32 %1423 to i64
  %1425 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1424
  %1426 = load i32, i32 addrspace(4)* %1425, align 4
  %1427 = and i32 %1426, 65280
  %1428 = or i32 %1421, %1427
  %1429 = and i32 %1321, 255
  %1430 = zext i32 %1429 to i64
  %1431 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1430
  %1432 = load i32, i32 addrspace(4)* %1431, align 4
  %1433 = and i32 %1432, 255
  %1434 = or i32 %1428, %1433
  %1435 = xor i32 %1200, %1434
  %1436 = xor i32 %966, %1434
  %1437 = xor i32 %1202, %1436
  %1438 = xor i32 %968, %1436
  %1439 = lshr i32 %1343, 24
  %1440 = zext i32 %1439 to i64
  %1441 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1440
  %1442 = load i32, i32 addrspace(4)* %1441, align 4
  %1443 = lshr i32 %1365, 16
  %1444 = and i32 %1443, 255
  %1445 = zext i32 %1444 to i64
  %1446 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1445
  %1447 = load i32, i32 addrspace(4)* %1446, align 4
  %1448 = lshr i32 %1387, 8
  %1449 = and i32 %1448, 255
  %1450 = zext i32 %1449 to i64
  %1451 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1450
  %1452 = load i32, i32 addrspace(4)* %1451, align 4
  %1453 = xor i32 %1442, %1447
  %1454 = xor i32 %1453, %1452
  %1455 = and i32 %1409, 255
  %1456 = zext i32 %1455 to i64
  %1457 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1456
  %1458 = load i32, i32 addrspace(4)* %1457, align 4
  %1459 = xor i32 %1454, %1458
  %1460 = xor i32 %1459, %1435
  %1461 = lshr i32 %1365, 24
  %1462 = zext i32 %1461 to i64
  %1463 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1462
  %1464 = load i32, i32 addrspace(4)* %1463, align 4
  %1465 = lshr i32 %1387, 16
  %1466 = and i32 %1465, 255
  %1467 = zext i32 %1466 to i64
  %1468 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1467
  %1469 = load i32, i32 addrspace(4)* %1468, align 4
  %1470 = lshr i32 %1409, 8
  %1471 = and i32 %1470, 255
  %1472 = zext i32 %1471 to i64
  %1473 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1472
  %1474 = load i32, i32 addrspace(4)* %1473, align 4
  %1475 = xor i32 %1464, %1469
  %1476 = xor i32 %1475, %1474
  %1477 = and i32 %1343, 255
  %1478 = zext i32 %1477 to i64
  %1479 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1478
  %1480 = load i32, i32 addrspace(4)* %1479, align 4
  %1481 = xor i32 %1476, %1480
  %1482 = xor i32 %1481, %1436
  %1483 = lshr i32 %1387, 24
  %1484 = zext i32 %1483 to i64
  %1485 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1484
  %1486 = load i32, i32 addrspace(4)* %1485, align 4
  %1487 = lshr i32 %1409, 16
  %1488 = and i32 %1487, 255
  %1489 = zext i32 %1488 to i64
  %1490 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1489
  %1491 = load i32, i32 addrspace(4)* %1490, align 4
  %1492 = lshr i32 %1343, 8
  %1493 = and i32 %1492, 255
  %1494 = zext i32 %1493 to i64
  %1495 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1494
  %1496 = load i32, i32 addrspace(4)* %1495, align 4
  %1497 = xor i32 %1486, %1491
  %1498 = xor i32 %1497, %1496
  %1499 = and i32 %1365, 255
  %1500 = zext i32 %1499 to i64
  %1501 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1500
  %1502 = load i32, i32 addrspace(4)* %1501, align 4
  %1503 = xor i32 %1498, %1502
  %1504 = xor i32 %1503, %1437
  %1505 = lshr i32 %1409, 24
  %1506 = zext i32 %1505 to i64
  %1507 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1506
  %1508 = load i32, i32 addrspace(4)* %1507, align 4
  %1509 = lshr i32 %1343, 16
  %1510 = and i32 %1509, 255
  %1511 = zext i32 %1510 to i64
  %1512 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1511
  %1513 = load i32, i32 addrspace(4)* %1512, align 4
  %1514 = lshr i32 %1365, 8
  %1515 = and i32 %1514, 255
  %1516 = zext i32 %1515 to i64
  %1517 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1516
  %1518 = load i32, i32 addrspace(4)* %1517, align 4
  %1519 = xor i32 %1508, %1513
  %1520 = xor i32 %1519, %1518
  %1521 = and i32 %1387, 255
  %1522 = zext i32 %1521 to i64
  %1523 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1522
  %1524 = load i32, i32 addrspace(4)* %1523, align 4
  %1525 = xor i32 %1520, %1524
  %1526 = xor i32 %1525, %1438
  %1527 = lshr i32 %1438, 24
  %1528 = zext i32 %1527 to i64
  %1529 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1528
  %1530 = load i32, i32 addrspace(4)* %1529, align 4
  %1531 = and i32 %1530, 255
  %1532 = lshr i32 %1438, 16
  %1533 = and i32 %1532, 255
  %1534 = zext i32 %1533 to i64
  %1535 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1534
  %1536 = load i32, i32 addrspace(4)* %1535, align 4
  %1537 = and i32 %1536, -16777216
  %1538 = or i32 %1531, %1537
  %1539 = lshr i32 %1438, 8
  %1540 = and i32 %1539, 255
  %1541 = zext i32 %1540 to i64
  %1542 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1541
  %1543 = load i32, i32 addrspace(4)* %1542, align 4
  %1544 = and i32 %1543, 16711680
  %1545 = or i32 %1538, %1544
  %1546 = and i32 %1438, 255
  %1547 = zext i32 %1546 to i64
  %1548 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1547
  %1549 = load i32, i32 addrspace(4)* %1548, align 4
  %1550 = and i32 %1549, 65280
  %1551 = or i32 %1545, %1550
  %1552 = xor i32 %1551, %1318
  %1553 = xor i32 %1552, 1073741824
  %1554 = xor i32 %1319, %1553
  %1555 = lshr i32 %1460, 24
  %1556 = zext i32 %1555 to i64
  %1557 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1556
  %1558 = load i32, i32 addrspace(4)* %1557, align 4
  %1559 = and i32 %1558, -16777216
  %1560 = lshr i32 %1482, 16
  %1561 = and i32 %1560, 255
  %1562 = zext i32 %1561 to i64
  %1563 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1562
  %1564 = load i32, i32 addrspace(4)* %1563, align 4
  %1565 = and i32 %1564, 16711680
  %1566 = or i32 %1559, %1565
  %1567 = lshr i32 %1504, 8
  %1568 = and i32 %1567, 255
  %1569 = zext i32 %1568 to i64
  %1570 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1569
  %1571 = load i32, i32 addrspace(4)* %1570, align 4
  %1572 = and i32 %1571, 65280
  %1573 = or i32 %1566, %1572
  %1574 = and i32 %1526, 255
  %1575 = zext i32 %1574 to i64
  %1576 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1575
  %1577 = load i32, i32 addrspace(4)* %1576, align 4
  %1578 = and i32 %1577, 255
  %1579 = or i32 %1573, %1578
  %1580 = xor i32 %1579, %1553
  %1581 = lshr i32 %1482, 24
  %1582 = zext i32 %1581 to i64
  %1583 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1582
  %1584 = load i32, i32 addrspace(4)* %1583, align 4
  %1585 = and i32 %1584, -16777216
  %1586 = lshr i32 %1504, 16
  %1587 = and i32 %1586, 255
  %1588 = zext i32 %1587 to i64
  %1589 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1588
  %1590 = load i32, i32 addrspace(4)* %1589, align 4
  %1591 = and i32 %1590, 16711680
  %1592 = or i32 %1585, %1591
  %1593 = lshr i32 %1526, 8
  %1594 = and i32 %1593, 255
  %1595 = zext i32 %1594 to i64
  %1596 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1595
  %1597 = load i32, i32 addrspace(4)* %1596, align 4
  %1598 = and i32 %1597, 65280
  %1599 = or i32 %1592, %1598
  %1600 = and i32 %1460, 255
  %1601 = zext i32 %1600 to i64
  %1602 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1601
  %1603 = load i32, i32 addrspace(4)* %1602, align 4
  %1604 = and i32 %1603, 255
  %1605 = or i32 %1599, %1604
  %1606 = xor i32 %1605, %1554
  %1607 = lshr i32 %1504, 24
  %1608 = zext i32 %1607 to i64
  %1609 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1608
  %1610 = load i32, i32 addrspace(4)* %1609, align 4
  %1611 = and i32 %1610, -16777216
  %1612 = lshr i32 %1526, 16
  %1613 = and i32 %1612, 255
  %1614 = zext i32 %1613 to i64
  %1615 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1614
  %1616 = load i32, i32 addrspace(4)* %1615, align 4
  %1617 = and i32 %1616, 16711680
  %1618 = or i32 %1611, %1617
  %1619 = lshr i32 %1460, 8
  %1620 = and i32 %1619, 255
  %1621 = zext i32 %1620 to i64
  %1622 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1621
  %1623 = load i32, i32 addrspace(4)* %1622, align 4
  %1624 = and i32 %1623, 65280
  %1625 = or i32 %1618, %1624
  %1626 = and i32 %1482, 255
  %1627 = zext i32 %1626 to i64
  %1628 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1627
  %1629 = load i32, i32 addrspace(4)* %1628, align 4
  %1630 = and i32 %1629, 255
  %1631 = or i32 %1625, %1630
  %1632 = xor i32 %1554, %1631
  %1633 = xor i32 %1632, %1320
  %1634 = lshr i32 %1526, 24
  %1635 = zext i32 %1634 to i64
  %1636 = getelementptr inbounds i32, i32 addrspace(4)* %18, i64 %1635
  %1637 = load i32, i32 addrspace(4)* %1636, align 4
  %1638 = and i32 %1637, -16777216
  %1639 = lshr i32 %1460, 16
  %1640 = and i32 %1639, 255
  %1641 = zext i32 %1640 to i64
  %1642 = getelementptr inbounds i32, i32 addrspace(4)* %19, i64 %1641
  %1643 = load i32, i32 addrspace(4)* %1642, align 4
  %1644 = and i32 %1643, 16711680
  %1645 = or i32 %1638, %1644
  %1646 = lshr i32 %1482, 8
  %1647 = and i32 %1646, 255
  %1648 = zext i32 %1647 to i64
  %1649 = getelementptr inbounds i32, i32 addrspace(4)* %16, i64 %1648
  %1650 = load i32, i32 addrspace(4)* %1649, align 4
  %1651 = and i32 %1650, 65280
  %1652 = or i32 %1645, %1651
  %1653 = and i32 %1504, 255
  %1654 = zext i32 %1653 to i64
  %1655 = getelementptr inbounds i32, i32 addrspace(4)* %17, i64 %1654
  %1656 = load i32, i32 addrspace(4)* %1655, align 4
  %1657 = and i32 %1656, 255
  %1658 = or i32 %1652, %1657
  %1659 = xor i32 %1554, %1658
  %1660 = xor i32 %1659, %1086
  %1661 = call spir_func i32 @spirv.llvm_bswap_i32(i32 %1580) #1
  store i32 %1661, i32 addrspace(4)* %12, align 4
  %1662 = call spir_func i32 @spirv.llvm_bswap_i32(i32 %1606) #1
  store i32 %1662, i32 addrspace(4)* %13, align 4
  %1663 = call spir_func i32 @spirv.llvm_bswap_i32(i32 %1633) #1
  store i32 %1663, i32 addrspace(4)* %14, align 4
  %1664 = call spir_func i32 @spirv.llvm_bswap_i32(i32 %1660) #1
  store i32 %1664, i32 addrspace(4)* %15, align 4
  ret void
}

; Function Attrs: nounwind
define spir_func i32 @spirv.llvm_bswap_i32(i32 %0) #1 {
entry:
  %bswap.4 = shl i32 %0, 24
  %bswap.3 = shl i32 %0, 8
  %bswap.2 = lshr i32 %0, 8
  %bswap.1 = lshr i32 %0, 24
  %bswap.and3 = and i32 %bswap.3, 16711680
  %bswap.and2 = and i32 %bswap.2, 65280
  %bswap.or1 = or i32 %bswap.4, %bswap.and3
  %bswap.or2 = or i32 %bswap.and2, %bswap.1
  %bswap.i32 = or i32 %bswap.or1, %bswap.or2
  ret i32 %bswap.i32
}

; Function Attrs: alwaysinline nounwind
define spir_func void @__itt_offload_wi_finish_wrapper() #2 {
  %1 = alloca [3 x i64], align 8
  %2 = icmp eq i8 0, 0
  br i1 %2, label %16, label %3

3:                                                ; preds = %0
  %4 = bitcast [3 x i64]* %1 to i8*
  %5 = bitcast i8* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %5)
  %6 = getelementptr inbounds [3 x i64], [3 x i64]* %1, i64 0, i64 0
  %7 = addrspacecast i64* %6 to i64 addrspace(4)*
  %8 = call spir_func <3 x i64> @__builtin_spirv_BuiltInWorkgroupId() #6
  %9 = extractelement <3 x i64> %8, i32 0
  store i64 %9, i64* %6, align 8
  %10 = getelementptr inbounds [3 x i64], [3 x i64]* %1, i64 0, i64 1
  %11 = extractelement <3 x i64> %8, i32 1
  store i64 %11, i64* %10, align 8
  %12 = getelementptr inbounds [3 x i64], [3 x i64]* %1, i64 0, i64 2
  %13 = extractelement <3 x i64> %8, i32 2
  store i64 %13, i64* %12, align 8
  %14 = call spir_func i64 @__builtin_spirv_BuiltInGlobalLinearId() #6
  call spir_func void @__itt_offload_wi_finish_stub(i64 addrspace(4)* %7, i64 %14) #4
  %15 = bitcast i8* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %15)
  br label %16

16:                                               ; preds = %3, %0
  ret void
}

; Function Attrs: noinline nounwind optnone
define spir_func void @__itt_offload_wi_finish_stub(i64 addrspace(4)* %0, i64 %1) #4 {
  %3 = alloca i64 addrspace(4)*, align 8
  %4 = alloca i64, align 8
  %5 = addrspacecast i64 addrspace(4)** %3 to i64 addrspace(4)* addrspace(4)*
  %6 = addrspacecast i64* %4 to i64 addrspace(4)*
  store i64 addrspace(4)* %0, i64 addrspace(4)* addrspace(4)* %5, align 8
  store i64 %1, i64 addrspace(4)* %6, align 8
  ret void
}

; Function Attrs: nounwind readnone
declare spir_func <3 x i64> @__builtin_spirv_BuiltInGlobalSize() #6

; Function Attrs: nounwind readnone
declare spir_func <3 x i64> @__builtin_spirv_BuiltInGlobalOffset() #6

; Function Attrs: nounwind readnone
declare spir_func <3 x i64> @__builtin_spirv_BuiltInNumWorkgroups() #6

; Function Attrs: nounwind readnone
declare spir_func <3 x i64> @__builtin_spirv_BuiltInGlobalInvocationId() #6

; Function Attrs: nounwind readnone
declare spir_func <3 x i64> @__builtin_spirv_BuiltInLocalInvocationId() #6

; Function Attrs: nounwind readnone
declare spir_func <3 x i64> @__builtin_spirv_BuiltInWorkgroupId() #6

; Function Attrs: nounwind readnone
declare spir_func i64 @__builtin_spirv_BuiltInGlobalLinearId() #6

; Function Attrs: nounwind readnone
declare spir_func <3 x i64> @__builtin_spirv_BuiltInWorkgroupSize() #6

attributes #0 = { nounwind readnone speculatable willreturn }
attributes #1 = { nounwind }
attributes #2 = { alwaysinline nounwind }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noinline nounwind optnone }
attributes #5 = { nounwind willreturn }
attributes #6 = { nounwind readnone }

!opencl.kernels = !{!0}
!IGCMetadata = !{!7}
!opencl.enable.FP_CONTRACT = !{}
!opencl.spir.version = !{!199}
!opencl.ocl.version = !{!199}
!opencl.used.extensions = !{!200}
!opencl.used.optional.core.features = !{!200}
!opencl.compiler.options = !{!200}
!igc.functions = !{}

!0 = !{void (i32, i32 addrspace(1)*, i8 addrspace(1)*, i8 addrspace(1)*, i8 addrspace(1)*, i8 addrspace(1)*, i8 addrspace(1)*, i32, i32, i32, i32, i32 addrspace(1)*, i32 addrspace(1)*, i32 addrspace(1)*, i32 addrspace(1)*, i32 addrspace(1)*, i32 addrspace(1)*)* @_ZTSZZ6attackPcPjPhS1_S1_iRdENKUlRN4sycl3_V17handlerEE_clES6_EUlNS4_7nd_itemILi3EEEE_, !1, !2, !3, !4, !5, !6}
!1 = !{!"kernel_arg_addr_space", i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1}
!2 = !{!"kernel_arg_access_qual", !"none", !"none", !"none", !"none", !"none", !"none", !"none", !"none", !"none", !"none", !"none", !"none", !"none", !"none", !"none", !"none", !"none"}
!3 = !{!"kernel_arg_type", !"int", !"int*", !"char*", !"char*", !"char*", !"char*", !"char*", !"int", !"int", !"int", !"int", !"int*", !"int*", !"int*", !"int*", !"int*", !"int*"}
!4 = !{!"kernel_arg_type_qual", !"", !"", !"", !"", !"", !"", !"", !"", !"", !"", !"", !"", !"", !"", !"", !"", !""}
!5 = !{!"kernel_arg_base_type", !"int", !"int*", !"char*", !"char*", !"char*", !"char*", !"char*", !"int", !"int", !"int", !"int", !"int*", !"int*", !"int*", !"int*", !"int*", !"int*"}
!6 = !{!"intel_reqd_sub_group_size", i32 32}
!7 = !{!"ModuleMD", !8, !9, !69, !70, !100, !116, !131, !141, !143, !144, !157, !158, !159, !160, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !178, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !194, !197, !198}
!8 = !{!"isPrecise", i1 false}
!9 = !{!"compOpt", !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68}
!10 = !{!"DenormsAreZero", i1 false}
!11 = !{!"CorrectlyRoundedDivSqrt", i1 false}
!12 = !{!"OptDisable", i1 false}
!13 = !{!"MadEnable", i1 false}
!14 = !{!"NoSignedZeros", i1 false}
!15 = !{!"NoNaNs", i1 false}
!16 = !{!"FloatRoundingMode", i32 0}
!17 = !{!"FloatCvtIntRoundingMode", i32 3}
!18 = !{!"VISAPreSchedRPThreshold", i32 0}
!19 = !{!"SetLoopUnrollThreshold", i32 0}
!20 = !{!"UnsafeMathOptimizations", i1 false}
!21 = !{!"FiniteMathOnly", i1 false}
!22 = !{!"FastRelaxedMath", i1 false}
!23 = !{!"DashGSpecified", i1 false}
!24 = !{!"FastCompilation", i1 false}
!25 = !{!"UseScratchSpacePrivateMemory", i1 true}
!26 = !{!"RelaxedBuiltins", i1 false}
!27 = !{!"SubgroupIndependentForwardProgressRequired", i1 true}
!28 = !{!"GreaterThan2GBBufferRequired", i1 true}
!29 = !{!"GreaterThan4GBBufferRequired", i1 true}
!30 = !{!"DisableA64WA", i1 false}
!31 = !{!"ForceEnableA64WA", i1 false}
!32 = !{!"PushConstantsEnable", i1 true}
!33 = !{!"HasPositivePointerOffset", i1 false}
!34 = !{!"HasBufferOffsetArg", i1 false}
!35 = !{!"BufferOffsetArgOptional", i1 true}
!36 = !{!"HasSubDWAlignedPtrArg", i1 false}
!37 = !{!"replaceGlobalOffsetsByZero", i1 false}
!38 = !{!"forcePixelShaderSIMDMode", i32 0}
!39 = !{!"pixelShaderDoNotAbortOnSpill", i1 false}
!40 = !{!"UniformWGS", i1 false}
!41 = !{!"disableVertexComponentPacking", i1 false}
!42 = !{!"disablePartialVertexComponentPacking", i1 false}
!43 = !{!"PreferBindlessImages", i1 false}
!44 = !{!"UseBindlessMode", i1 false}
!45 = !{!"UseLegacyBindlessMode", i1 true}
!46 = !{!"disableMathRefactoring", i1 false}
!47 = !{!"atomicBranch", i1 false}
!48 = !{!"ForceInt32DivRemEmu", i1 false}
!49 = !{!"ForceInt32DivRemEmuSP", i1 false}
!50 = !{!"DisableFastestSingleCSSIMD", i1 false}
!51 = !{!"DisableFastestLinearScan", i1 false}
!52 = !{!"UseStatelessforPrivateMemory", i1 false}
!53 = !{!"EnableTakeGlobalAddress", i1 false}
!54 = !{!"IsLibraryCompilation", i1 false}
!55 = !{!"FastVISACompile", i1 false}
!56 = !{!"MatchSinCosPi", i1 false}
!57 = !{!"ExcludeIRFromZEBinary", i1 false}
!58 = !{!"EmitZeBinVISASections", i1 false}
!59 = !{!"FP64GenEmulationEnabled", i1 false}
!60 = !{!"allowDisableRematforCS", i1 false}
!61 = !{!"DisableIncSpillCostAllAddrTaken", i1 false}
!62 = !{!"DisableCPSOmaskWA", i1 false}
!63 = !{!"DisableFastestGopt", i1 false}
!64 = !{!"WaForceHalfPromotion", i1 false}
!65 = !{!"DisableConstantCoalescing", i1 false}
!66 = !{!"EnableUndefAlphaOutputAsRed", i1 true}
!67 = !{!"WaEnableALTModeVisaWA", i1 false}
!68 = !{!"NewSpillCostFunction", i1 false}
!69 = !{!"FuncMD"}
!70 = !{!"pushInfo", !71, !72, !73, !76, !77, !78, !79, !80, !81, !82, !83, !96, !97, !98, !99}
!71 = !{!"pushableAddresses"}
!72 = !{!"bindlessPushInfo"}
!73 = !{!"dynamicBufferInfo", !74, !75}
!74 = !{!"firstIndex", i32 0}
!75 = !{!"numOffsets", i32 0}
!76 = !{!"MaxNumberOfPushedBuffers", i32 0}
!77 = !{!"inlineConstantBufferSlot", i32 -1}
!78 = !{!"inlineConstantBufferOffset", i32 -1}
!79 = !{!"inlineConstantBufferGRFOffset", i32 -1}
!80 = !{!"constants"}
!81 = !{!"inputs"}
!82 = !{!"constantReg"}
!83 = !{!"simplePushInfoArr", !84, !93, !94, !95}
!84 = !{!"simplePushInfoArrVec[0]", !85, !86, !87, !88, !89, !90, !91, !92}
!85 = !{!"cbIdx", i32 0}
!86 = !{!"pushableAddressGrfOffset", i32 -1}
!87 = !{!"pushableOffsetGrfOffset", i32 -1}
!88 = !{!"offset", i32 0}
!89 = !{!"size", i32 0}
!90 = !{!"isStateless", i1 false}
!91 = !{!"isBindless", i1 false}
!92 = !{!"simplePushLoads"}
!93 = !{!"simplePushInfoArrVec[1]", !85, !86, !87, !88, !89, !90, !91, !92}
!94 = !{!"simplePushInfoArrVec[2]", !85, !86, !87, !88, !89, !90, !91, !92}
!95 = !{!"simplePushInfoArrVec[3]", !85, !86, !87, !88, !89, !90, !91, !92}
!96 = !{!"simplePushBufferUsed", i32 0}
!97 = !{!"pushAnalysisWIInfos"}
!98 = !{!"inlineRTGlobalPtrOffset", i32 0}
!99 = !{!"rtSyncSurfPtrOffset", i32 0}
!100 = !{!"psInfo", !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115}
!101 = !{!"BlendStateDisabledMask", i8 0}
!102 = !{!"SkipSrc0Alpha", i1 false}
!103 = !{!"DualSourceBlendingDisabled", i1 false}
!104 = !{!"ForceEnableSimd32", i1 false}
!105 = !{!"outputDepth", i1 false}
!106 = !{!"outputStencil", i1 false}
!107 = !{!"outputMask", i1 false}
!108 = !{!"blendToFillEnabled", i1 false}
!109 = !{!"forceEarlyZ", i1 false}
!110 = !{!"hasVersionedLoop", i1 false}
!111 = !{!"forceSingleSourceRTWAfterDualSourceRTW", i1 false}
!112 = !{!"NumSamples", i8 0}
!113 = !{!"blendOptimizationMode"}
!114 = !{!"colorOutputMask"}
!115 = !{!"WaDisableVRS", i1 false}
!116 = !{!"csInfo", !117, !118, !119, !120, !121, !18, !19, !122, !123, !124, !125, !126, !127, !128, !129, !47, !130}
!117 = !{!"maxWorkGroupSize", i32 0}
!118 = !{!"waveSize", i32 0}
!119 = !{!"ComputeShaderSecondCompile"}
!120 = !{!"forcedSIMDSize", i8 0}
!121 = !{!"forceTotalGRFNum", i32 0}
!122 = !{!"allowLowerSimd", i1 false}
!123 = !{!"disableSimd32Slicing", i1 false}
!124 = !{!"disableSplitOnSpill", i1 false}
!125 = !{!"forcedVISAPreRAScheduler", i1 false}
!126 = !{!"disableLocalIdOrderOptimizations", i1 false}
!127 = !{!"disableDispatchAlongY", i1 false}
!128 = !{!"neededThreadIdLayout", i1* null}
!129 = !{!"forceTileYWalk", i1 false}
!130 = !{!"ResForHfPacking"}
!131 = !{!"msInfo", !132, !133, !134, !135, !136, !137, !138, !139, !140}
!132 = !{!"PrimitiveTopology", i32 3}
!133 = !{!"MaxNumOfPrimitives", i32 0}
!134 = !{!"MaxNumOfVertices", i32 0}
!135 = !{!"MaxNumOfPerPrimitiveOutputs", i32 0}
!136 = !{!"MaxNumOfPerVertexOutputs", i32 0}
!137 = !{!"WorkGroupSize", i32 0}
!138 = !{!"WorkGroupMemorySizeInBytes", i32 0}
!139 = !{!"IndexFormat", i32 6}
!140 = !{!"SubgroupSize", i32 0}
!141 = !{!"taskInfo", !142, !137, !138, !140}
!142 = !{!"MaxNumOfOutputs", i32 0}
!143 = !{!"NBarrierCnt", i32 0}
!144 = !{!"rtInfo", !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156}
!145 = !{!"RayQueryAllocSizeInBytes", i32 0}
!146 = !{!"NumContinuations", i32 0}
!147 = !{!"RTAsyncStackAddrspace", i32 -1}
!148 = !{!"RTAsyncStackSurfaceStateOffset", i1* null}
!149 = !{!"SWHotZoneAddrspace", i32 -1}
!150 = !{!"SWHotZoneSurfaceStateOffset", i1* null}
!151 = !{!"SWStackAddrspace", i32 -1}
!152 = !{!"SWStackSurfaceStateOffset", i1* null}
!153 = !{!"RTSyncStackAddrspace", i32 -1}
!154 = !{!"RTSyncStackSurfaceStateOffset", i1* null}
!155 = !{!"doSyncDispatchRays", i1 false}
!156 = !{!"MemStyle", !"Xe"}
!157 = !{!"CurUniqueIndirectIdx", i32 0}
!158 = !{!"inlineDynTextures"}
!159 = !{!"inlineResInfoData"}
!160 = !{!"immConstant", !161, !162, !163}
!161 = !{!"data"}
!162 = !{!"sizes"}
!163 = !{!"zeroIdxs"}
!164 = !{!"stringConstants"}
!165 = !{!"inlineConstantBuffers"}
!166 = !{!"inlineGlobalBuffers"}
!167 = !{!"GlobalPointerProgramBinaryInfos"}
!168 = !{!"ConstantPointerProgramBinaryInfos"}
!169 = !{!"GlobalBufferAddressRelocInfo"}
!170 = !{!"ConstantBufferAddressRelocInfo"}
!171 = !{!"forceLscCacheList"}
!172 = !{!"SrvMap"}
!173 = !{!"RasterizerOrderedByteAddressBuffer"}
!174 = !{!"MinNOSPushConstantSize", i32 0}
!175 = !{!"inlineProgramScopeOffsets"}
!176 = !{!"shaderData", !177}
!177 = !{!"numReplicas", i32 0}
!178 = !{!"URBInfo", !179, !180, !181}
!179 = !{!"has64BVertexHeaderInput", i1 false}
!180 = !{!"has64BVertexHeaderOutput", i1 false}
!181 = !{!"hasVertexHeader", i1 true}
!182 = !{!"UseBindlessImage", i1 false}
!183 = !{!"enableRangeReduce", i1 false}
!184 = !{!"allowMatchMadOptimizationforVS", i1 false}
!185 = !{!"disableMemOptforNegativeOffsetLoads", i1 false}
!186 = !{!"enableThreeWayLoadSpiltOpt", i1 false}
!187 = !{!"statefulResourcesNotAliased", i1 false}
!188 = !{!"disableMixMode", i1 false}
!189 = !{!"privateMemoryPerWI", i32 0}
!190 = !{!"PrivateMemoryPerFG"}
!191 = !{!"m_OptsToDisable"}
!192 = !{!"capabilities", !193}
!193 = !{!"globalVariableDecorationsINTEL", i1 false}
!194 = !{!"m_ShaderResourceViewMcsMask", !195, !196}
!195 = !{!"m_ShaderResourceViewMcsMaskVec[0]", i64 0}
!196 = !{!"m_ShaderResourceViewMcsMaskVec[1]", i64 0}
!197 = !{!"computedDepthMode", i32 0}
!198 = !{!"isHDCFastClearShader", i1 false}
!199 = !{i32 1, i32 0}
!200 = !{}
