; ------------------------------------------------
; OCL_asme3ece85de5060e07_optimized.ll
; ------------------------------------------------
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v16:16:16-v24:32:32-v32:32:32-v48:64:64-v64:64:64-v96:128:128-v128:128:128-v192:256:256-v256:256:256-v512:512:512-v1024:1024:1024-n8:16:32"
target triple = "spir64-unknown-unknown"

; Function Attrs: nounwind
define spir_kernel void @_ZTSZ16evaluate_w_blockPhPjRdEUlN4sycl3_V17nd_itemILi3EEEE_(i8 addrspace(1)* nocapture readonly %0, i8 addrspace(1)* nocapture readonly %1, i32 addrspace(1)* %2, <8 x i32> %r0, <8 x i32> %payloadHeader, <3 x i32> %numWorkGroups, <3 x i32> %globalSize, <3 x i32> %localSize, <3 x i32> %enqueuedLocalSize, i16 %localIdX, i16 %localIdY, i16 %localIdZ, i8* nocapture readnone %privateBase, i32 %bufferOffset, i32 %bufferOffset1, i32 %bufferOffset2) #0 {
  %scalar35 = extractelement <8 x i32> %r0, i32 1
  %scalar = extractelement <3 x i32> %localSize, i32 0
  %conv.i47 = zext i32 %scalar to i64
  %conv.i.i92 = zext i32 %scalar35 to i64
  %conv.i.i183 = zext i16 %localIdX to i64
  %4 = icmp sgt i32 %scalar35, -1
  call void @llvm.assume(i1 %4) #4
  %5 = icmp sgt i32 %scalar, -1
  call void @llvm.assume(i1 %5) #4
  %6 = mul nuw nsw i64 %conv.i.i92, %conv.i47
  %7 = add nuw nsw i64 %6, %conv.i.i183
  %8 = and i64 %7, 4293918720
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %.preheader.i.preheader, label %_Z14kernel_w_blockPhS_PjRKN4sycl3_V17nd_itemILi3EEE.exit

.preheader.i.preheader:                           ; preds = %3
  %10 = load i8, i8 addrspace(1)* %0, align 1
  %11 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 1
  %12 = load i8, i8 addrspace(1)* %11, align 1
  %13 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 2
  %14 = load i8, i8 addrspace(1)* %13, align 1
  %15 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 3
  %16 = load i8, i8 addrspace(1)* %15, align 1
  %17 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 4
  %18 = load i8, i8 addrspace(1)* %17, align 1
  %19 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 5
  %20 = load i8, i8 addrspace(1)* %19, align 1
  %21 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 6
  %22 = load i8, i8 addrspace(1)* %21, align 1
  %23 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 7
  %24 = load i8, i8 addrspace(1)* %23, align 1
  %25 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 8
  %26 = load i8, i8 addrspace(1)* %25, align 1
  %27 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 9
  %28 = load i8, i8 addrspace(1)* %27, align 1
  %29 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 10
  %30 = load i8, i8 addrspace(1)* %29, align 1
  %31 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 11
  %32 = load i8, i8 addrspace(1)* %31, align 1
  %33 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 12
  %34 = load i8, i8 addrspace(1)* %33, align 1
  %35 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 13
  %36 = load i8, i8 addrspace(1)* %35, align 1
  %37 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 14
  %38 = load i8, i8 addrspace(1)* %37, align 1
  %39 = getelementptr inbounds i8, i8 addrspace(1)* %0, i64 15
  %40 = load i8, i8 addrspace(1)* %39, align 1
  %41 = load i8, i8 addrspace(1)* %1, align 1
  %42 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 1
  %43 = load i8, i8 addrspace(1)* %42, align 1
  %44 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 2
  %45 = load i8, i8 addrspace(1)* %44, align 1
  %46 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 3
  %47 = load i8, i8 addrspace(1)* %46, align 1
  %48 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 4
  %49 = load i8, i8 addrspace(1)* %48, align 1
  %50 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 5
  %51 = load i8, i8 addrspace(1)* %50, align 1
  %52 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 6
  %53 = load i8, i8 addrspace(1)* %52, align 1
  %54 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 7
  %55 = load i8, i8 addrspace(1)* %54, align 1
  %56 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 8
  %57 = load i8, i8 addrspace(1)* %56, align 1
  %58 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 9
  %59 = load i8, i8 addrspace(1)* %58, align 1
  %60 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 10
  %61 = load i8, i8 addrspace(1)* %60, align 1
  %62 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 11
  %63 = load i8, i8 addrspace(1)* %62, align 1
  %64 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 12
  %65 = load i8, i8 addrspace(1)* %64, align 1
  %66 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 13
  %67 = load i8, i8 addrspace(1)* %66, align 1
  %68 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 14
  %69 = load i8, i8 addrspace(1)* %68, align 1
  %70 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 15
  %71 = load i8, i8 addrspace(1)* %70, align 1
  %72 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 16
  %73 = load i8, i8 addrspace(1)* %72, align 1
  %74 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 17
  %75 = load i8, i8 addrspace(1)* %74, align 1
  %76 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 18
  %77 = load i8, i8 addrspace(1)* %76, align 1
  %78 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 19
  %79 = load i8, i8 addrspace(1)* %78, align 1
  %80 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 20
  %81 = load i8, i8 addrspace(1)* %80, align 1
  %82 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 21
  %83 = load i8, i8 addrspace(1)* %82, align 1
  %84 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 22
  %85 = load i8, i8 addrspace(1)* %84, align 1
  %86 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 23
  %87 = load i8, i8 addrspace(1)* %86, align 1
  %88 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 24
  %89 = load i8, i8 addrspace(1)* %88, align 1
  %90 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 25
  %91 = load i8, i8 addrspace(1)* %90, align 1
  %92 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 26
  %93 = load i8, i8 addrspace(1)* %92, align 1
  %94 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 27
  %95 = load i8, i8 addrspace(1)* %94, align 1
  %96 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 28
  %97 = load i8, i8 addrspace(1)* %96, align 1
  %98 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 29
  %99 = load i8, i8 addrspace(1)* %98, align 1
  %100 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 30
  %101 = load i8, i8 addrspace(1)* %100, align 1
  %102 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 31
  %103 = load i8, i8 addrspace(1)* %102, align 1
  %104 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 32
  %105 = load i8, i8 addrspace(1)* %104, align 1
  %106 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 33
  %107 = load i8, i8 addrspace(1)* %106, align 1
  %108 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 34
  %109 = load i8, i8 addrspace(1)* %108, align 1
  %110 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 35
  %111 = load i8, i8 addrspace(1)* %110, align 1
  %112 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 36
  %113 = load i8, i8 addrspace(1)* %112, align 1
  %114 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 37
  %115 = load i8, i8 addrspace(1)* %114, align 1
  %116 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 38
  %117 = load i8, i8 addrspace(1)* %116, align 1
  %118 = getelementptr inbounds i8, i8 addrspace(1)* %1, i64 39
  %119 = load i8, i8 addrspace(1)* %118, align 1
  %120 = shl i64 %7, 6
  %121 = and i64 %120, 4294967232
  %122 = zext i8 %10 to i32
  %123 = shl nuw i32 %122, 24
  %124 = zext i8 %12 to i32
  %125 = shl nuw nsw i32 %124, 16
  %126 = or i32 %123, %125
  %127 = zext i8 %14 to i32
  %128 = shl nuw nsw i32 %127, 8
  %129 = or i32 %126, %128
  %130 = zext i8 %16 to i32
  %131 = or i32 %129, %130
  %132 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %121
  store i32 %131, i32 addrspace(1)* %132, align 4
  %133 = zext i8 %18 to i32
  %134 = shl nuw i32 %133, 24
  %135 = zext i8 %20 to i32
  %136 = shl nuw nsw i32 %135, 16
  %137 = or i32 %134, %136
  %138 = zext i8 %22 to i32
  %139 = shl nuw nsw i32 %138, 8
  %140 = or i32 %137, %139
  %141 = zext i8 %24 to i32
  %142 = or i32 %140, %141
  %143 = or i64 %121, 1
  %144 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %143
  store i32 %142, i32 addrspace(1)* %144, align 4
  %145 = zext i8 %26 to i32
  %146 = shl nuw i32 %145, 24
  %147 = zext i8 %28 to i32
  %148 = shl nuw nsw i32 %147, 16
  %149 = or i32 %146, %148
  %150 = zext i8 %30 to i32
  %151 = shl nuw nsw i32 %150, 8
  %152 = or i32 %149, %151
  %153 = zext i8 %32 to i32
  %154 = or i32 %152, %153
  %155 = or i64 %121, 2
  %156 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %155
  store i32 %154, i32 addrspace(1)* %156, align 4
  %157 = zext i8 %34 to i32
  %158 = shl nuw i32 %157, 24
  %159 = zext i8 %36 to i32
  %160 = shl nuw nsw i32 %159, 16
  %161 = or i32 %158, %160
  %162 = zext i8 %38 to i32
  %163 = shl nuw nsw i32 %162, 8
  %164 = or i32 %161, %163
  %165 = zext i8 %40 to i32
  %166 = or i32 %164, %165
  %167 = or i64 %121, 3
  %168 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %167
  store i32 %166, i32 addrspace(1)* %168, align 4
  %169 = trunc i64 %7 to i32
  %bswap.4.i.i = shl i32 %169, 24
  %bswap.3.i.i = shl i32 %169, 8
  %bswap.2.i.i = lshr i32 %169, 8
  %bswap.and3.i.i = and i32 %bswap.3.i.i, 16711680
  %bswap.and2.i.i = and i32 %bswap.2.i.i, 65280
  %bswap.or1.i.i = or i32 %bswap.4.i.i, %bswap.and3.i.i
  %bswap.i32.i.i = or i32 %bswap.or1.i.i, %bswap.and2.i.i
  %170 = or i64 %121, 4
  %171 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %170
  store i32 %bswap.i32.i.i, i32 addrspace(1)* %171, align 4
  %172 = or i64 %121, 5
  %173 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %172
  store i32 0, i32 addrspace(1)* %173, align 4
  %174 = zext i8 %41 to i32
  %175 = shl nuw i32 %174, 24
  %176 = zext i8 %43 to i32
  %177 = shl nuw nsw i32 %176, 16
  %178 = or i32 %175, %177
  %179 = zext i8 %45 to i32
  %180 = shl nuw nsw i32 %179, 8
  %181 = or i32 %178, %180
  %182 = zext i8 %47 to i32
  %183 = or i32 %181, %182
  %184 = or i64 %121, 6
  %185 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %184
  store i32 %183, i32 addrspace(1)* %185, align 4
  %186 = zext i8 %49 to i32
  %187 = shl nuw i32 %186, 24
  %188 = zext i8 %51 to i32
  %189 = shl nuw nsw i32 %188, 16
  %190 = or i32 %187, %189
  %191 = zext i8 %53 to i32
  %192 = shl nuw nsw i32 %191, 8
  %193 = or i32 %190, %192
  %194 = zext i8 %55 to i32
  %195 = or i32 %193, %194
  %196 = or i64 %121, 7
  %197 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %196
  store i32 %195, i32 addrspace(1)* %197, align 4
  %198 = zext i8 %57 to i32
  %199 = shl nuw i32 %198, 24
  %200 = zext i8 %59 to i32
  %201 = shl nuw nsw i32 %200, 16
  %202 = or i32 %199, %201
  %203 = zext i8 %61 to i32
  %204 = shl nuw nsw i32 %203, 8
  %205 = or i32 %202, %204
  %206 = zext i8 %63 to i32
  %207 = or i32 %205, %206
  %208 = or i64 %121, 8
  %209 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %208
  store i32 %207, i32 addrspace(1)* %209, align 4
  %210 = zext i8 %65 to i32
  %211 = shl nuw i32 %210, 24
  %212 = zext i8 %67 to i32
  %213 = shl nuw nsw i32 %212, 16
  %214 = or i32 %211, %213
  %215 = zext i8 %69 to i32
  %216 = shl nuw nsw i32 %215, 8
  %217 = or i32 %214, %216
  %218 = zext i8 %71 to i32
  %219 = or i32 %217, %218
  %220 = or i64 %121, 9
  %221 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %220
  store i32 %219, i32 addrspace(1)* %221, align 4
  %222 = zext i8 %73 to i32
  %223 = shl nuw i32 %222, 24
  %224 = zext i8 %75 to i32
  %225 = shl nuw nsw i32 %224, 16
  %226 = or i32 %223, %225
  %227 = zext i8 %77 to i32
  %228 = shl nuw nsw i32 %227, 8
  %229 = or i32 %226, %228
  %230 = zext i8 %79 to i32
  %231 = or i32 %229, %230
  %232 = or i64 %121, 10
  %233 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %232
  store i32 %231, i32 addrspace(1)* %233, align 4
  %234 = zext i8 %81 to i32
  %235 = shl nuw i32 %234, 24
  %236 = zext i8 %83 to i32
  %237 = shl nuw nsw i32 %236, 16
  %238 = or i32 %235, %237
  %239 = zext i8 %85 to i32
  %240 = shl nuw nsw i32 %239, 8
  %241 = or i32 %238, %240
  %242 = zext i8 %87 to i32
  %243 = or i32 %241, %242
  %244 = or i64 %121, 11
  %245 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %244
  store i32 %243, i32 addrspace(1)* %245, align 4
  %246 = zext i8 %89 to i32
  %247 = shl nuw i32 %246, 24
  %248 = zext i8 %91 to i32
  %249 = shl nuw nsw i32 %248, 16
  %250 = or i32 %247, %249
  %251 = zext i8 %93 to i32
  %252 = shl nuw nsw i32 %251, 8
  %253 = or i32 %250, %252
  %254 = zext i8 %95 to i32
  %255 = or i32 %253, %254
  %256 = or i64 %121, 12
  %257 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %256
  store i32 %255, i32 addrspace(1)* %257, align 4
  %258 = zext i8 %97 to i32
  %259 = shl nuw i32 %258, 24
  %260 = zext i8 %99 to i32
  %261 = shl nuw nsw i32 %260, 16
  %262 = or i32 %259, %261
  %263 = zext i8 %101 to i32
  %264 = shl nuw nsw i32 %263, 8
  %265 = or i32 %262, %264
  %266 = zext i8 %103 to i32
  %267 = or i32 %265, %266
  %268 = or i64 %121, 13
  %269 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %268
  store i32 %267, i32 addrspace(1)* %269, align 4
  %270 = zext i8 %105 to i32
  %271 = shl nuw i32 %270, 24
  %272 = zext i8 %107 to i32
  %273 = shl nuw nsw i32 %272, 16
  %274 = or i32 %271, %273
  %275 = zext i8 %109 to i32
  %276 = shl nuw nsw i32 %275, 8
  %277 = or i32 %274, %276
  %278 = zext i8 %111 to i32
  %279 = or i32 %277, %278
  %280 = or i64 %121, 14
  %281 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %280
  store i32 %279, i32 addrspace(1)* %281, align 4
  %282 = zext i8 %113 to i32
  %283 = shl nuw i32 %282, 24
  %284 = zext i8 %115 to i32
  %285 = shl nuw nsw i32 %284, 16
  %286 = or i32 %283, %285
  %287 = zext i8 %117 to i32
  %288 = shl nuw nsw i32 %287, 8
  %289 = or i32 %286, %288
  %290 = zext i8 %119 to i32
  %291 = or i32 %289, %290
  %292 = or i64 %121, 15
  %293 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %292
  store i32 %291, i32 addrspace(1)* %293, align 4
  %294 = or i64 %121, 16
  %295 = add i32 %131, %219
  %296 = shl i32 %141, 25
  %297 = lshr i32 %142, 7
  %298 = or i32 %296, %297
  %299 = shl i32 %142, 14
  %300 = lshr i32 %137, 18
  %301 = or i32 %299, %300
  %302 = xor i32 %298, %301
  %303 = lshr i32 %142, 3
  %304 = xor i32 %302, %303
  %305 = add i32 %295, %304
  %306 = shl i32 %279, 15
  %307 = lshr i32 %274, 17
  %308 = or i32 %306, %307
  %309 = shl i32 %279, 13
  %310 = lshr i32 %274, 19
  %311 = or i32 %309, %310
  %312 = xor i32 %308, %311
  %313 = lshr i32 %277, 10
  %314 = xor i32 %312, %313
  %315 = add i32 %305, %314
  %316 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %294
  store i32 %315, i32 addrspace(1)* %316, align 4
  %317 = or i64 %121, 17
  %318 = add i32 %142, %231
  %319 = shl i32 %153, 25
  %320 = lshr i32 %154, 7
  %321 = or i32 %319, %320
  %322 = shl i32 %154, 14
  %323 = lshr i32 %149, 18
  %324 = or i32 %322, %323
  %325 = xor i32 %321, %324
  %326 = lshr i32 %154, 3
  %327 = xor i32 %325, %326
  %328 = add i32 %318, %327
  %329 = shl i32 %291, 15
  %330 = lshr i32 %286, 17
  %331 = or i32 %329, %330
  %332 = shl i32 %291, 13
  %333 = lshr i32 %286, 19
  %334 = or i32 %332, %333
  %335 = xor i32 %331, %334
  %336 = lshr i32 %289, 10
  %337 = xor i32 %335, %336
  %338 = add i32 %328, %337
  %339 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %317
  store i32 %338, i32 addrspace(1)* %339, align 4
  %340 = or i64 %121, 18
  %341 = add i32 %154, %243
  %342 = shl i32 %165, 25
  %343 = lshr i32 %166, 7
  %344 = or i32 %342, %343
  %345 = shl i32 %166, 14
  %346 = lshr i32 %161, 18
  %347 = or i32 %345, %346
  %348 = xor i32 %344, %347
  %349 = lshr i32 %166, 3
  %350 = xor i32 %348, %349
  %351 = add i32 %341, %350
  %352 = shl i32 %315, 15
  %353 = lshr i32 %315, 17
  %354 = or i32 %352, %353
  %355 = shl i32 %315, 13
  %356 = lshr i32 %315, 19
  %357 = or i32 %355, %356
  %358 = xor i32 %354, %357
  %359 = lshr i32 %315, 10
  %360 = xor i32 %358, %359
  %361 = add i32 %351, %360
  %362 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %340
  store i32 %361, i32 addrspace(1)* %362, align 4
  %363 = or i64 %121, 19
  %364 = add i32 %166, %255
  %365 = lshr exact i32 %bswap.i32.i.i, 7
  %366 = shl i32 %bswap.i32.i.i, 14
  %367 = lshr i32 %bswap.or1.i.i, 18
  %368 = or i32 %366, %367
  %369 = xor i32 %365, %368
  %370 = lshr exact i32 %bswap.i32.i.i, 3
  %371 = xor i32 %369, %370
  %372 = add i32 %364, %371
  %373 = shl i32 %338, 15
  %374 = lshr i32 %338, 17
  %375 = or i32 %373, %374
  %376 = shl i32 %338, 13
  %377 = lshr i32 %338, 19
  %378 = or i32 %376, %377
  %379 = xor i32 %375, %378
  %380 = lshr i32 %338, 10
  %381 = xor i32 %379, %380
  %382 = add i32 %372, %381
  %383 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %363
  store i32 %382, i32 addrspace(1)* %383, align 4
  %384 = or i64 %121, 20
  %385 = add i32 %bswap.i32.i.i, %267
  %386 = shl i32 %361, 15
  %387 = lshr i32 %361, 17
  %388 = or i32 %386, %387
  %389 = shl i32 %361, 13
  %390 = lshr i32 %361, 19
  %391 = or i32 %389, %390
  %392 = xor i32 %388, %391
  %393 = lshr i32 %361, 10
  %394 = xor i32 %392, %393
  %395 = add i32 %385, %394
  %396 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %384
  store i32 %395, i32 addrspace(1)* %396, align 4
  %397 = or i64 %121, 21
  %398 = shl i32 %182, 25
  %399 = lshr i32 %183, 7
  %400 = or i32 %398, %399
  %401 = shl i32 %183, 14
  %402 = lshr i32 %178, 18
  %403 = or i32 %401, %402
  %404 = xor i32 %400, %403
  %405 = lshr i32 %183, 3
  %406 = xor i32 %404, %405
  %407 = add i32 %279, %406
  %408 = shl i32 %382, 15
  %409 = lshr i32 %382, 17
  %410 = or i32 %408, %409
  %411 = shl i32 %382, 13
  %412 = lshr i32 %382, 19
  %413 = or i32 %411, %412
  %414 = xor i32 %410, %413
  %415 = lshr i32 %382, 10
  %416 = xor i32 %414, %415
  %417 = add i32 %407, %416
  %418 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %397
  store i32 %417, i32 addrspace(1)* %418, align 4
  %419 = or i64 %121, 22
  %420 = add i32 %183, %291
  %421 = shl i32 %194, 25
  %422 = lshr i32 %195, 7
  %423 = or i32 %421, %422
  %424 = shl i32 %195, 14
  %425 = lshr i32 %190, 18
  %426 = or i32 %424, %425
  %427 = xor i32 %423, %426
  %428 = lshr i32 %195, 3
  %429 = xor i32 %427, %428
  %430 = add i32 %420, %429
  %431 = shl i32 %395, 15
  %432 = lshr i32 %395, 17
  %433 = or i32 %431, %432
  %434 = shl i32 %395, 13
  %435 = lshr i32 %395, 19
  %436 = or i32 %434, %435
  %437 = xor i32 %433, %436
  %438 = lshr i32 %395, 10
  %439 = xor i32 %437, %438
  %440 = add i32 %430, %439
  %441 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %419
  store i32 %440, i32 addrspace(1)* %441, align 4
  %442 = or i64 %121, 23
  %443 = add i32 %195, %315
  %444 = shl i32 %206, 25
  %445 = lshr i32 %207, 7
  %446 = or i32 %444, %445
  %447 = shl i32 %207, 14
  %448 = lshr i32 %202, 18
  %449 = or i32 %447, %448
  %450 = xor i32 %446, %449
  %451 = lshr i32 %207, 3
  %452 = xor i32 %450, %451
  %453 = add i32 %443, %452
  %454 = shl i32 %417, 15
  %455 = lshr i32 %417, 17
  %456 = or i32 %454, %455
  %457 = shl i32 %417, 13
  %458 = lshr i32 %417, 19
  %459 = or i32 %457, %458
  %460 = xor i32 %456, %459
  %461 = lshr i32 %417, 10
  %462 = xor i32 %460, %461
  %463 = add i32 %453, %462
  %464 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %442
  store i32 %463, i32 addrspace(1)* %464, align 4
  %465 = or i64 %121, 24
  %466 = add i32 %207, %338
  %467 = shl i32 %218, 25
  %468 = lshr i32 %219, 7
  %469 = or i32 %467, %468
  %470 = shl i32 %219, 14
  %471 = lshr i32 %214, 18
  %472 = or i32 %470, %471
  %473 = xor i32 %469, %472
  %474 = lshr i32 %219, 3
  %475 = xor i32 %473, %474
  %476 = add i32 %466, %475
  %477 = shl i32 %440, 15
  %478 = lshr i32 %440, 17
  %479 = or i32 %477, %478
  %480 = shl i32 %440, 13
  %481 = lshr i32 %440, 19
  %482 = or i32 %480, %481
  %483 = xor i32 %479, %482
  %484 = lshr i32 %440, 10
  %485 = xor i32 %483, %484
  %486 = add i32 %476, %485
  %487 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %465
  store i32 %486, i32 addrspace(1)* %487, align 4
  %488 = or i64 %121, 25
  %489 = add i32 %219, %361
  %490 = shl i32 %230, 25
  %491 = lshr i32 %231, 7
  %492 = or i32 %490, %491
  %493 = shl i32 %231, 14
  %494 = lshr i32 %226, 18
  %495 = or i32 %493, %494
  %496 = xor i32 %492, %495
  %497 = lshr i32 %231, 3
  %498 = xor i32 %496, %497
  %499 = add i32 %489, %498
  %500 = shl i32 %463, 15
  %501 = lshr i32 %463, 17
  %502 = or i32 %500, %501
  %503 = shl i32 %463, 13
  %504 = lshr i32 %463, 19
  %505 = or i32 %503, %504
  %506 = xor i32 %502, %505
  %507 = lshr i32 %463, 10
  %508 = xor i32 %506, %507
  %509 = add i32 %499, %508
  %510 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %488
  store i32 %509, i32 addrspace(1)* %510, align 4
  %511 = or i64 %121, 26
  %512 = add i32 %231, %382
  %513 = shl i32 %242, 25
  %514 = lshr i32 %243, 7
  %515 = or i32 %513, %514
  %516 = shl i32 %243, 14
  %517 = lshr i32 %238, 18
  %518 = or i32 %516, %517
  %519 = xor i32 %515, %518
  %520 = lshr i32 %243, 3
  %521 = xor i32 %519, %520
  %522 = add i32 %512, %521
  %523 = shl i32 %486, 15
  %524 = lshr i32 %486, 17
  %525 = or i32 %523, %524
  %526 = shl i32 %486, 13
  %527 = lshr i32 %486, 19
  %528 = or i32 %526, %527
  %529 = xor i32 %525, %528
  %530 = lshr i32 %486, 10
  %531 = xor i32 %529, %530
  %532 = add i32 %522, %531
  %533 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %511
  store i32 %532, i32 addrspace(1)* %533, align 4
  %534 = or i64 %121, 27
  %535 = add i32 %243, %395
  %536 = shl i32 %254, 25
  %537 = lshr i32 %255, 7
  %538 = or i32 %536, %537
  %539 = shl i32 %255, 14
  %540 = lshr i32 %250, 18
  %541 = or i32 %539, %540
  %542 = xor i32 %538, %541
  %543 = lshr i32 %255, 3
  %544 = xor i32 %542, %543
  %545 = add i32 %535, %544
  %546 = shl i32 %509, 15
  %547 = lshr i32 %509, 17
  %548 = or i32 %546, %547
  %549 = shl i32 %509, 13
  %550 = lshr i32 %509, 19
  %551 = or i32 %549, %550
  %552 = xor i32 %548, %551
  %553 = lshr i32 %509, 10
  %554 = xor i32 %552, %553
  %555 = add i32 %545, %554
  %556 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %534
  store i32 %555, i32 addrspace(1)* %556, align 4
  %557 = or i64 %121, 28
  %558 = add i32 %255, %417
  %559 = shl i32 %266, 25
  %560 = lshr i32 %267, 7
  %561 = or i32 %559, %560
  %562 = shl i32 %267, 14
  %563 = lshr i32 %262, 18
  %564 = or i32 %562, %563
  %565 = xor i32 %561, %564
  %566 = lshr i32 %267, 3
  %567 = xor i32 %565, %566
  %568 = add i32 %558, %567
  %569 = shl i32 %532, 15
  %570 = lshr i32 %532, 17
  %571 = or i32 %569, %570
  %572 = shl i32 %532, 13
  %573 = lshr i32 %532, 19
  %574 = or i32 %572, %573
  %575 = xor i32 %571, %574
  %576 = lshr i32 %532, 10
  %577 = xor i32 %575, %576
  %578 = add i32 %568, %577
  %579 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %557
  store i32 %578, i32 addrspace(1)* %579, align 4
  %580 = or i64 %121, 29
  %581 = add i32 %267, %440
  %582 = shl i32 %278, 25
  %583 = lshr i32 %279, 7
  %584 = or i32 %582, %583
  %585 = shl i32 %279, 14
  %586 = lshr i32 %274, 18
  %587 = or i32 %585, %586
  %588 = xor i32 %584, %587
  %589 = lshr i32 %279, 3
  %590 = xor i32 %588, %589
  %591 = add i32 %581, %590
  %592 = shl i32 %555, 15
  %593 = lshr i32 %555, 17
  %594 = or i32 %592, %593
  %595 = shl i32 %555, 13
  %596 = lshr i32 %555, 19
  %597 = or i32 %595, %596
  %598 = xor i32 %594, %597
  %599 = lshr i32 %555, 10
  %600 = xor i32 %598, %599
  %601 = add i32 %591, %600
  %602 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %580
  store i32 %601, i32 addrspace(1)* %602, align 4
  %603 = or i64 %121, 30
  %604 = add i32 %279, %463
  %605 = shl i32 %290, 25
  %606 = lshr i32 %291, 7
  %607 = or i32 %605, %606
  %608 = shl i32 %291, 14
  %609 = lshr i32 %286, 18
  %610 = or i32 %608, %609
  %611 = xor i32 %607, %610
  %612 = lshr i32 %291, 3
  %613 = xor i32 %611, %612
  %614 = add i32 %604, %613
  %615 = shl i32 %578, 15
  %616 = lshr i32 %578, 17
  %617 = or i32 %615, %616
  %618 = shl i32 %578, 13
  %619 = lshr i32 %578, 19
  %620 = or i32 %618, %619
  %621 = xor i32 %617, %620
  %622 = lshr i32 %578, 10
  %623 = xor i32 %621, %622
  %624 = add i32 %614, %623
  %625 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %603
  store i32 %624, i32 addrspace(1)* %625, align 4
  %626 = or i64 %121, 31
  %627 = add i32 %291, %486
  %628 = shl i32 %315, 25
  %629 = lshr i32 %315, 7
  %630 = or i32 %628, %629
  %631 = shl i32 %315, 14
  %632 = lshr i32 %315, 18
  %633 = or i32 %631, %632
  %634 = xor i32 %630, %633
  %635 = lshr i32 %315, 3
  %636 = xor i32 %634, %635
  %637 = add i32 %627, %636
  %638 = shl i32 %601, 15
  %639 = lshr i32 %601, 17
  %640 = or i32 %638, %639
  %641 = shl i32 %601, 13
  %642 = lshr i32 %601, 19
  %643 = or i32 %641, %642
  %644 = xor i32 %640, %643
  %645 = lshr i32 %601, 10
  %646 = xor i32 %644, %645
  %647 = add i32 %637, %646
  %648 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %626
  store i32 %647, i32 addrspace(1)* %648, align 4
  %649 = or i64 %121, 32
  %650 = add i32 %315, %509
  %651 = shl i32 %338, 25
  %652 = lshr i32 %338, 7
  %653 = or i32 %651, %652
  %654 = shl i32 %338, 14
  %655 = lshr i32 %338, 18
  %656 = or i32 %654, %655
  %657 = xor i32 %653, %656
  %658 = lshr i32 %338, 3
  %659 = xor i32 %657, %658
  %660 = add i32 %650, %659
  %661 = shl i32 %624, 15
  %662 = lshr i32 %624, 17
  %663 = or i32 %661, %662
  %664 = shl i32 %624, 13
  %665 = lshr i32 %624, 19
  %666 = or i32 %664, %665
  %667 = xor i32 %663, %666
  %668 = lshr i32 %624, 10
  %669 = xor i32 %667, %668
  %670 = add i32 %660, %669
  %671 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %649
  store i32 %670, i32 addrspace(1)* %671, align 4
  %672 = or i64 %121, 33
  %673 = add i32 %338, %532
  %674 = shl i32 %361, 25
  %675 = lshr i32 %361, 7
  %676 = or i32 %674, %675
  %677 = shl i32 %361, 14
  %678 = lshr i32 %361, 18
  %679 = or i32 %677, %678
  %680 = xor i32 %676, %679
  %681 = lshr i32 %361, 3
  %682 = xor i32 %680, %681
  %683 = add i32 %673, %682
  %684 = shl i32 %647, 15
  %685 = lshr i32 %647, 17
  %686 = or i32 %684, %685
  %687 = shl i32 %647, 13
  %688 = lshr i32 %647, 19
  %689 = or i32 %687, %688
  %690 = xor i32 %686, %689
  %691 = lshr i32 %647, 10
  %692 = xor i32 %690, %691
  %693 = add i32 %683, %692
  %694 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %672
  store i32 %693, i32 addrspace(1)* %694, align 4
  %695 = or i64 %121, 34
  %696 = add i32 %361, %555
  %697 = shl i32 %382, 25
  %698 = lshr i32 %382, 7
  %699 = or i32 %697, %698
  %700 = shl i32 %382, 14
  %701 = lshr i32 %382, 18
  %702 = or i32 %700, %701
  %703 = xor i32 %699, %702
  %704 = lshr i32 %382, 3
  %705 = xor i32 %703, %704
  %706 = add i32 %696, %705
  %707 = shl i32 %670, 15
  %708 = lshr i32 %670, 17
  %709 = or i32 %707, %708
  %710 = shl i32 %670, 13
  %711 = lshr i32 %670, 19
  %712 = or i32 %710, %711
  %713 = xor i32 %709, %712
  %714 = lshr i32 %670, 10
  %715 = xor i32 %713, %714
  %716 = add i32 %706, %715
  %717 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %695
  store i32 %716, i32 addrspace(1)* %717, align 4
  %718 = or i64 %121, 35
  %719 = add i32 %382, %578
  %720 = shl i32 %395, 25
  %721 = lshr i32 %395, 7
  %722 = or i32 %720, %721
  %723 = shl i32 %395, 14
  %724 = lshr i32 %395, 18
  %725 = or i32 %723, %724
  %726 = xor i32 %722, %725
  %727 = lshr i32 %395, 3
  %728 = xor i32 %726, %727
  %729 = add i32 %719, %728
  %730 = shl i32 %693, 15
  %731 = lshr i32 %693, 17
  %732 = or i32 %730, %731
  %733 = shl i32 %693, 13
  %734 = lshr i32 %693, 19
  %735 = or i32 %733, %734
  %736 = xor i32 %732, %735
  %737 = lshr i32 %693, 10
  %738 = xor i32 %736, %737
  %739 = add i32 %729, %738
  %740 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %718
  store i32 %739, i32 addrspace(1)* %740, align 4
  %741 = or i64 %121, 36
  %742 = add i32 %395, %601
  %743 = shl i32 %417, 25
  %744 = lshr i32 %417, 7
  %745 = or i32 %743, %744
  %746 = shl i32 %417, 14
  %747 = lshr i32 %417, 18
  %748 = or i32 %746, %747
  %749 = xor i32 %745, %748
  %750 = lshr i32 %417, 3
  %751 = xor i32 %749, %750
  %752 = add i32 %742, %751
  %753 = shl i32 %716, 15
  %754 = lshr i32 %716, 17
  %755 = or i32 %753, %754
  %756 = shl i32 %716, 13
  %757 = lshr i32 %716, 19
  %758 = or i32 %756, %757
  %759 = xor i32 %755, %758
  %760 = lshr i32 %716, 10
  %761 = xor i32 %759, %760
  %762 = add i32 %752, %761
  %763 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %741
  store i32 %762, i32 addrspace(1)* %763, align 4
  %764 = or i64 %121, 37
  %765 = add i32 %417, %624
  %766 = shl i32 %440, 25
  %767 = lshr i32 %440, 7
  %768 = or i32 %766, %767
  %769 = shl i32 %440, 14
  %770 = lshr i32 %440, 18
  %771 = or i32 %769, %770
  %772 = xor i32 %768, %771
  %773 = lshr i32 %440, 3
  %774 = xor i32 %772, %773
  %775 = add i32 %765, %774
  %776 = shl i32 %739, 15
  %777 = lshr i32 %739, 17
  %778 = or i32 %776, %777
  %779 = shl i32 %739, 13
  %780 = lshr i32 %739, 19
  %781 = or i32 %779, %780
  %782 = xor i32 %778, %781
  %783 = lshr i32 %739, 10
  %784 = xor i32 %782, %783
  %785 = add i32 %775, %784
  %786 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %764
  store i32 %785, i32 addrspace(1)* %786, align 4
  %787 = or i64 %121, 38
  %788 = add i32 %440, %647
  %789 = shl i32 %463, 25
  %790 = lshr i32 %463, 7
  %791 = or i32 %789, %790
  %792 = shl i32 %463, 14
  %793 = lshr i32 %463, 18
  %794 = or i32 %792, %793
  %795 = xor i32 %791, %794
  %796 = lshr i32 %463, 3
  %797 = xor i32 %795, %796
  %798 = add i32 %788, %797
  %799 = shl i32 %762, 15
  %800 = lshr i32 %762, 17
  %801 = or i32 %799, %800
  %802 = shl i32 %762, 13
  %803 = lshr i32 %762, 19
  %804 = or i32 %802, %803
  %805 = xor i32 %801, %804
  %806 = lshr i32 %762, 10
  %807 = xor i32 %805, %806
  %808 = add i32 %798, %807
  %809 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %787
  store i32 %808, i32 addrspace(1)* %809, align 4
  %810 = or i64 %121, 39
  %811 = add i32 %463, %670
  %812 = shl i32 %486, 25
  %813 = lshr i32 %486, 7
  %814 = or i32 %812, %813
  %815 = shl i32 %486, 14
  %816 = lshr i32 %486, 18
  %817 = or i32 %815, %816
  %818 = xor i32 %814, %817
  %819 = lshr i32 %486, 3
  %820 = xor i32 %818, %819
  %821 = add i32 %811, %820
  %822 = shl i32 %785, 15
  %823 = lshr i32 %785, 17
  %824 = or i32 %822, %823
  %825 = shl i32 %785, 13
  %826 = lshr i32 %785, 19
  %827 = or i32 %825, %826
  %828 = xor i32 %824, %827
  %829 = lshr i32 %785, 10
  %830 = xor i32 %828, %829
  %831 = add i32 %821, %830
  %832 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %810
  store i32 %831, i32 addrspace(1)* %832, align 4
  %833 = or i64 %121, 40
  %834 = add i32 %486, %693
  %835 = shl i32 %509, 25
  %836 = lshr i32 %509, 7
  %837 = or i32 %835, %836
  %838 = shl i32 %509, 14
  %839 = lshr i32 %509, 18
  %840 = or i32 %838, %839
  %841 = xor i32 %837, %840
  %842 = lshr i32 %509, 3
  %843 = xor i32 %841, %842
  %844 = add i32 %834, %843
  %845 = shl i32 %808, 15
  %846 = lshr i32 %808, 17
  %847 = or i32 %845, %846
  %848 = shl i32 %808, 13
  %849 = lshr i32 %808, 19
  %850 = or i32 %848, %849
  %851 = xor i32 %847, %850
  %852 = lshr i32 %808, 10
  %853 = xor i32 %851, %852
  %854 = add i32 %844, %853
  %855 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %833
  store i32 %854, i32 addrspace(1)* %855, align 4
  %856 = or i64 %121, 41
  %857 = add i32 %509, %716
  %858 = shl i32 %532, 25
  %859 = lshr i32 %532, 7
  %860 = or i32 %858, %859
  %861 = shl i32 %532, 14
  %862 = lshr i32 %532, 18
  %863 = or i32 %861, %862
  %864 = xor i32 %860, %863
  %865 = lshr i32 %532, 3
  %866 = xor i32 %864, %865
  %867 = add i32 %857, %866
  %868 = shl i32 %831, 15
  %869 = lshr i32 %831, 17
  %870 = or i32 %868, %869
  %871 = shl i32 %831, 13
  %872 = lshr i32 %831, 19
  %873 = or i32 %871, %872
  %874 = xor i32 %870, %873
  %875 = lshr i32 %831, 10
  %876 = xor i32 %874, %875
  %877 = add i32 %867, %876
  %878 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %856
  store i32 %877, i32 addrspace(1)* %878, align 4
  %879 = or i64 %121, 42
  %880 = add i32 %532, %739
  %881 = shl i32 %555, 25
  %882 = lshr i32 %555, 7
  %883 = or i32 %881, %882
  %884 = shl i32 %555, 14
  %885 = lshr i32 %555, 18
  %886 = or i32 %884, %885
  %887 = xor i32 %883, %886
  %888 = lshr i32 %555, 3
  %889 = xor i32 %887, %888
  %890 = add i32 %880, %889
  %891 = shl i32 %854, 15
  %892 = lshr i32 %854, 17
  %893 = or i32 %891, %892
  %894 = shl i32 %854, 13
  %895 = lshr i32 %854, 19
  %896 = or i32 %894, %895
  %897 = xor i32 %893, %896
  %898 = lshr i32 %854, 10
  %899 = xor i32 %897, %898
  %900 = add i32 %890, %899
  %901 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %879
  store i32 %900, i32 addrspace(1)* %901, align 4
  %902 = or i64 %121, 43
  %903 = add i32 %555, %762
  %904 = shl i32 %578, 25
  %905 = lshr i32 %578, 7
  %906 = or i32 %904, %905
  %907 = shl i32 %578, 14
  %908 = lshr i32 %578, 18
  %909 = or i32 %907, %908
  %910 = xor i32 %906, %909
  %911 = lshr i32 %578, 3
  %912 = xor i32 %910, %911
  %913 = add i32 %903, %912
  %914 = shl i32 %877, 15
  %915 = lshr i32 %877, 17
  %916 = or i32 %914, %915
  %917 = shl i32 %877, 13
  %918 = lshr i32 %877, 19
  %919 = or i32 %917, %918
  %920 = xor i32 %916, %919
  %921 = lshr i32 %877, 10
  %922 = xor i32 %920, %921
  %923 = add i32 %913, %922
  %924 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %902
  store i32 %923, i32 addrspace(1)* %924, align 4
  %925 = or i64 %121, 44
  %926 = add i32 %578, %785
  %927 = shl i32 %601, 25
  %928 = lshr i32 %601, 7
  %929 = or i32 %927, %928
  %930 = shl i32 %601, 14
  %931 = lshr i32 %601, 18
  %932 = or i32 %930, %931
  %933 = xor i32 %929, %932
  %934 = lshr i32 %601, 3
  %935 = xor i32 %933, %934
  %936 = add i32 %926, %935
  %937 = shl i32 %900, 15
  %938 = lshr i32 %900, 17
  %939 = or i32 %937, %938
  %940 = shl i32 %900, 13
  %941 = lshr i32 %900, 19
  %942 = or i32 %940, %941
  %943 = xor i32 %939, %942
  %944 = lshr i32 %900, 10
  %945 = xor i32 %943, %944
  %946 = add i32 %936, %945
  %947 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %925
  store i32 %946, i32 addrspace(1)* %947, align 4
  %948 = or i64 %121, 45
  %949 = add i32 %601, %808
  %950 = shl i32 %624, 25
  %951 = lshr i32 %624, 7
  %952 = or i32 %950, %951
  %953 = shl i32 %624, 14
  %954 = lshr i32 %624, 18
  %955 = or i32 %953, %954
  %956 = xor i32 %952, %955
  %957 = lshr i32 %624, 3
  %958 = xor i32 %956, %957
  %959 = add i32 %949, %958
  %960 = shl i32 %923, 15
  %961 = lshr i32 %923, 17
  %962 = or i32 %960, %961
  %963 = shl i32 %923, 13
  %964 = lshr i32 %923, 19
  %965 = or i32 %963, %964
  %966 = xor i32 %962, %965
  %967 = lshr i32 %923, 10
  %968 = xor i32 %966, %967
  %969 = add i32 %959, %968
  %970 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %948
  store i32 %969, i32 addrspace(1)* %970, align 4
  %971 = or i64 %121, 46
  %972 = add i32 %624, %831
  %973 = shl i32 %647, 25
  %974 = lshr i32 %647, 7
  %975 = or i32 %973, %974
  %976 = shl i32 %647, 14
  %977 = lshr i32 %647, 18
  %978 = or i32 %976, %977
  %979 = xor i32 %975, %978
  %980 = lshr i32 %647, 3
  %981 = xor i32 %979, %980
  %982 = add i32 %972, %981
  %983 = shl i32 %946, 15
  %984 = lshr i32 %946, 17
  %985 = or i32 %983, %984
  %986 = shl i32 %946, 13
  %987 = lshr i32 %946, 19
  %988 = or i32 %986, %987
  %989 = xor i32 %985, %988
  %990 = lshr i32 %946, 10
  %991 = xor i32 %989, %990
  %992 = add i32 %982, %991
  %993 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %971
  store i32 %992, i32 addrspace(1)* %993, align 4
  %994 = or i64 %121, 47
  %995 = add i32 %647, %854
  %996 = shl i32 %670, 25
  %997 = lshr i32 %670, 7
  %998 = or i32 %996, %997
  %999 = shl i32 %670, 14
  %1000 = lshr i32 %670, 18
  %1001 = or i32 %999, %1000
  %1002 = xor i32 %998, %1001
  %1003 = lshr i32 %670, 3
  %1004 = xor i32 %1002, %1003
  %1005 = add i32 %995, %1004
  %1006 = shl i32 %969, 15
  %1007 = lshr i32 %969, 17
  %1008 = or i32 %1006, %1007
  %1009 = shl i32 %969, 13
  %1010 = lshr i32 %969, 19
  %1011 = or i32 %1009, %1010
  %1012 = xor i32 %1008, %1011
  %1013 = lshr i32 %969, 10
  %1014 = xor i32 %1012, %1013
  %1015 = add i32 %1005, %1014
  %1016 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %994
  store i32 %1015, i32 addrspace(1)* %1016, align 4
  %1017 = or i64 %121, 48
  %1018 = add i32 %670, %877
  %1019 = shl i32 %693, 25
  %1020 = lshr i32 %693, 7
  %1021 = or i32 %1019, %1020
  %1022 = shl i32 %693, 14
  %1023 = lshr i32 %693, 18
  %1024 = or i32 %1022, %1023
  %1025 = xor i32 %1021, %1024
  %1026 = lshr i32 %693, 3
  %1027 = xor i32 %1025, %1026
  %1028 = add i32 %1018, %1027
  %1029 = shl i32 %992, 15
  %1030 = lshr i32 %992, 17
  %1031 = or i32 %1029, %1030
  %1032 = shl i32 %992, 13
  %1033 = lshr i32 %992, 19
  %1034 = or i32 %1032, %1033
  %1035 = xor i32 %1031, %1034
  %1036 = lshr i32 %992, 10
  %1037 = xor i32 %1035, %1036
  %1038 = add i32 %1028, %1037
  %1039 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1017
  store i32 %1038, i32 addrspace(1)* %1039, align 4
  %1040 = or i64 %121, 49
  %1041 = add i32 %693, %900
  %1042 = shl i32 %716, 25
  %1043 = lshr i32 %716, 7
  %1044 = or i32 %1042, %1043
  %1045 = shl i32 %716, 14
  %1046 = lshr i32 %716, 18
  %1047 = or i32 %1045, %1046
  %1048 = xor i32 %1044, %1047
  %1049 = lshr i32 %716, 3
  %1050 = xor i32 %1048, %1049
  %1051 = add i32 %1041, %1050
  %1052 = shl i32 %1015, 15
  %1053 = lshr i32 %1015, 17
  %1054 = or i32 %1052, %1053
  %1055 = shl i32 %1015, 13
  %1056 = lshr i32 %1015, 19
  %1057 = or i32 %1055, %1056
  %1058 = xor i32 %1054, %1057
  %1059 = lshr i32 %1015, 10
  %1060 = xor i32 %1058, %1059
  %1061 = add i32 %1051, %1060
  %1062 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1040
  store i32 %1061, i32 addrspace(1)* %1062, align 4
  %1063 = or i64 %121, 50
  %1064 = add i32 %716, %923
  %1065 = shl i32 %739, 25
  %1066 = lshr i32 %739, 7
  %1067 = or i32 %1065, %1066
  %1068 = shl i32 %739, 14
  %1069 = lshr i32 %739, 18
  %1070 = or i32 %1068, %1069
  %1071 = xor i32 %1067, %1070
  %1072 = lshr i32 %739, 3
  %1073 = xor i32 %1071, %1072
  %1074 = add i32 %1064, %1073
  %1075 = shl i32 %1038, 15
  %1076 = lshr i32 %1038, 17
  %1077 = or i32 %1075, %1076
  %1078 = shl i32 %1038, 13
  %1079 = lshr i32 %1038, 19
  %1080 = or i32 %1078, %1079
  %1081 = xor i32 %1077, %1080
  %1082 = lshr i32 %1038, 10
  %1083 = xor i32 %1081, %1082
  %1084 = add i32 %1074, %1083
  %1085 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1063
  store i32 %1084, i32 addrspace(1)* %1085, align 4
  %1086 = or i64 %121, 51
  %1087 = add i32 %739, %946
  %1088 = shl i32 %762, 25
  %1089 = lshr i32 %762, 7
  %1090 = or i32 %1088, %1089
  %1091 = shl i32 %762, 14
  %1092 = lshr i32 %762, 18
  %1093 = or i32 %1091, %1092
  %1094 = xor i32 %1090, %1093
  %1095 = lshr i32 %762, 3
  %1096 = xor i32 %1094, %1095
  %1097 = add i32 %1087, %1096
  %1098 = shl i32 %1061, 15
  %1099 = lshr i32 %1061, 17
  %1100 = or i32 %1098, %1099
  %1101 = shl i32 %1061, 13
  %1102 = lshr i32 %1061, 19
  %1103 = or i32 %1101, %1102
  %1104 = xor i32 %1100, %1103
  %1105 = lshr i32 %1061, 10
  %1106 = xor i32 %1104, %1105
  %1107 = add i32 %1097, %1106
  %1108 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1086
  store i32 %1107, i32 addrspace(1)* %1108, align 4
  %1109 = or i64 %121, 52
  %1110 = add i32 %762, %969
  %1111 = shl i32 %785, 25
  %1112 = lshr i32 %785, 7
  %1113 = or i32 %1111, %1112
  %1114 = shl i32 %785, 14
  %1115 = lshr i32 %785, 18
  %1116 = or i32 %1114, %1115
  %1117 = xor i32 %1113, %1116
  %1118 = lshr i32 %785, 3
  %1119 = xor i32 %1117, %1118
  %1120 = add i32 %1110, %1119
  %1121 = shl i32 %1084, 15
  %1122 = lshr i32 %1084, 17
  %1123 = or i32 %1121, %1122
  %1124 = shl i32 %1084, 13
  %1125 = lshr i32 %1084, 19
  %1126 = or i32 %1124, %1125
  %1127 = xor i32 %1123, %1126
  %1128 = lshr i32 %1084, 10
  %1129 = xor i32 %1127, %1128
  %1130 = add i32 %1120, %1129
  %1131 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1109
  store i32 %1130, i32 addrspace(1)* %1131, align 4
  %1132 = or i64 %121, 53
  %1133 = add i32 %785, %992
  %1134 = shl i32 %808, 25
  %1135 = lshr i32 %808, 7
  %1136 = or i32 %1134, %1135
  %1137 = shl i32 %808, 14
  %1138 = lshr i32 %808, 18
  %1139 = or i32 %1137, %1138
  %1140 = xor i32 %1136, %1139
  %1141 = lshr i32 %808, 3
  %1142 = xor i32 %1140, %1141
  %1143 = add i32 %1133, %1142
  %1144 = shl i32 %1107, 15
  %1145 = lshr i32 %1107, 17
  %1146 = or i32 %1144, %1145
  %1147 = shl i32 %1107, 13
  %1148 = lshr i32 %1107, 19
  %1149 = or i32 %1147, %1148
  %1150 = xor i32 %1146, %1149
  %1151 = lshr i32 %1107, 10
  %1152 = xor i32 %1150, %1151
  %1153 = add i32 %1143, %1152
  %1154 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1132
  store i32 %1153, i32 addrspace(1)* %1154, align 4
  %1155 = or i64 %121, 54
  %1156 = add i32 %808, %1015
  %1157 = shl i32 %831, 25
  %1158 = lshr i32 %831, 7
  %1159 = or i32 %1157, %1158
  %1160 = shl i32 %831, 14
  %1161 = lshr i32 %831, 18
  %1162 = or i32 %1160, %1161
  %1163 = xor i32 %1159, %1162
  %1164 = lshr i32 %831, 3
  %1165 = xor i32 %1163, %1164
  %1166 = add i32 %1156, %1165
  %1167 = shl i32 %1130, 15
  %1168 = lshr i32 %1130, 17
  %1169 = or i32 %1167, %1168
  %1170 = shl i32 %1130, 13
  %1171 = lshr i32 %1130, 19
  %1172 = or i32 %1170, %1171
  %1173 = xor i32 %1169, %1172
  %1174 = lshr i32 %1130, 10
  %1175 = xor i32 %1173, %1174
  %1176 = add i32 %1166, %1175
  %1177 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1155
  store i32 %1176, i32 addrspace(1)* %1177, align 4
  %1178 = or i64 %121, 55
  %1179 = add i32 %831, %1038
  %1180 = shl i32 %854, 25
  %1181 = lshr i32 %854, 7
  %1182 = or i32 %1180, %1181
  %1183 = shl i32 %854, 14
  %1184 = lshr i32 %854, 18
  %1185 = or i32 %1183, %1184
  %1186 = xor i32 %1182, %1185
  %1187 = lshr i32 %854, 3
  %1188 = xor i32 %1186, %1187
  %1189 = add i32 %1179, %1188
  %1190 = shl i32 %1153, 15
  %1191 = lshr i32 %1153, 17
  %1192 = or i32 %1190, %1191
  %1193 = shl i32 %1153, 13
  %1194 = lshr i32 %1153, 19
  %1195 = or i32 %1193, %1194
  %1196 = xor i32 %1192, %1195
  %1197 = lshr i32 %1153, 10
  %1198 = xor i32 %1196, %1197
  %1199 = add i32 %1189, %1198
  %1200 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1178
  store i32 %1199, i32 addrspace(1)* %1200, align 4
  %1201 = or i64 %121, 56
  %1202 = add i32 %854, %1061
  %1203 = shl i32 %877, 25
  %1204 = lshr i32 %877, 7
  %1205 = or i32 %1203, %1204
  %1206 = shl i32 %877, 14
  %1207 = lshr i32 %877, 18
  %1208 = or i32 %1206, %1207
  %1209 = xor i32 %1205, %1208
  %1210 = lshr i32 %877, 3
  %1211 = xor i32 %1209, %1210
  %1212 = add i32 %1202, %1211
  %1213 = shl i32 %1176, 15
  %1214 = lshr i32 %1176, 17
  %1215 = or i32 %1213, %1214
  %1216 = shl i32 %1176, 13
  %1217 = lshr i32 %1176, 19
  %1218 = or i32 %1216, %1217
  %1219 = xor i32 %1215, %1218
  %1220 = lshr i32 %1176, 10
  %1221 = xor i32 %1219, %1220
  %1222 = add i32 %1212, %1221
  %1223 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1201
  store i32 %1222, i32 addrspace(1)* %1223, align 4
  %1224 = or i64 %121, 57
  %1225 = add i32 %877, %1084
  %1226 = shl i32 %900, 25
  %1227 = lshr i32 %900, 7
  %1228 = or i32 %1226, %1227
  %1229 = shl i32 %900, 14
  %1230 = lshr i32 %900, 18
  %1231 = or i32 %1229, %1230
  %1232 = xor i32 %1228, %1231
  %1233 = lshr i32 %900, 3
  %1234 = xor i32 %1232, %1233
  %1235 = add i32 %1225, %1234
  %1236 = shl i32 %1199, 15
  %1237 = lshr i32 %1199, 17
  %1238 = or i32 %1236, %1237
  %1239 = shl i32 %1199, 13
  %1240 = lshr i32 %1199, 19
  %1241 = or i32 %1239, %1240
  %1242 = xor i32 %1238, %1241
  %1243 = lshr i32 %1199, 10
  %1244 = xor i32 %1242, %1243
  %1245 = add i32 %1235, %1244
  %1246 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1224
  store i32 %1245, i32 addrspace(1)* %1246, align 4
  %1247 = or i64 %121, 58
  %1248 = add i32 %900, %1107
  %1249 = shl i32 %923, 25
  %1250 = lshr i32 %923, 7
  %1251 = or i32 %1249, %1250
  %1252 = shl i32 %923, 14
  %1253 = lshr i32 %923, 18
  %1254 = or i32 %1252, %1253
  %1255 = xor i32 %1251, %1254
  %1256 = lshr i32 %923, 3
  %1257 = xor i32 %1255, %1256
  %1258 = add i32 %1248, %1257
  %1259 = shl i32 %1222, 15
  %1260 = lshr i32 %1222, 17
  %1261 = or i32 %1259, %1260
  %1262 = shl i32 %1222, 13
  %1263 = lshr i32 %1222, 19
  %1264 = or i32 %1262, %1263
  %1265 = xor i32 %1261, %1264
  %1266 = lshr i32 %1222, 10
  %1267 = xor i32 %1265, %1266
  %1268 = add i32 %1258, %1267
  %1269 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1247
  store i32 %1268, i32 addrspace(1)* %1269, align 4
  %1270 = or i64 %121, 59
  %1271 = add i32 %923, %1130
  %1272 = shl i32 %946, 25
  %1273 = lshr i32 %946, 7
  %1274 = or i32 %1272, %1273
  %1275 = shl i32 %946, 14
  %1276 = lshr i32 %946, 18
  %1277 = or i32 %1275, %1276
  %1278 = xor i32 %1274, %1277
  %1279 = lshr i32 %946, 3
  %1280 = xor i32 %1278, %1279
  %1281 = add i32 %1271, %1280
  %1282 = shl i32 %1245, 15
  %1283 = lshr i32 %1245, 17
  %1284 = or i32 %1282, %1283
  %1285 = shl i32 %1245, 13
  %1286 = lshr i32 %1245, 19
  %1287 = or i32 %1285, %1286
  %1288 = xor i32 %1284, %1287
  %1289 = lshr i32 %1245, 10
  %1290 = xor i32 %1288, %1289
  %1291 = add i32 %1281, %1290
  %1292 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1270
  store i32 %1291, i32 addrspace(1)* %1292, align 4
  %1293 = or i64 %121, 60
  %1294 = add i32 %946, %1153
  %1295 = shl i32 %969, 25
  %1296 = lshr i32 %969, 7
  %1297 = or i32 %1295, %1296
  %1298 = shl i32 %969, 14
  %1299 = lshr i32 %969, 18
  %1300 = or i32 %1298, %1299
  %1301 = xor i32 %1297, %1300
  %1302 = lshr i32 %969, 3
  %1303 = xor i32 %1301, %1302
  %1304 = add i32 %1294, %1303
  %1305 = shl i32 %1268, 15
  %1306 = lshr i32 %1268, 17
  %1307 = or i32 %1305, %1306
  %1308 = shl i32 %1268, 13
  %1309 = lshr i32 %1268, 19
  %1310 = or i32 %1308, %1309
  %1311 = xor i32 %1307, %1310
  %1312 = lshr i32 %1268, 10
  %1313 = xor i32 %1311, %1312
  %1314 = add i32 %1304, %1313
  %1315 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1293
  store i32 %1314, i32 addrspace(1)* %1315, align 4
  %1316 = or i64 %121, 61
  %1317 = add i32 %969, %1176
  %1318 = shl i32 %992, 25
  %1319 = lshr i32 %992, 7
  %1320 = or i32 %1318, %1319
  %1321 = shl i32 %992, 14
  %1322 = lshr i32 %992, 18
  %1323 = or i32 %1321, %1322
  %1324 = xor i32 %1320, %1323
  %1325 = lshr i32 %992, 3
  %1326 = xor i32 %1324, %1325
  %1327 = add i32 %1317, %1326
  %1328 = shl i32 %1291, 15
  %1329 = lshr i32 %1291, 17
  %1330 = or i32 %1328, %1329
  %1331 = shl i32 %1291, 13
  %1332 = lshr i32 %1291, 19
  %1333 = or i32 %1331, %1332
  %1334 = xor i32 %1330, %1333
  %1335 = lshr i32 %1291, 10
  %1336 = xor i32 %1334, %1335
  %1337 = add i32 %1327, %1336
  %1338 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1316
  store i32 %1337, i32 addrspace(1)* %1338, align 4
  %1339 = or i64 %121, 62
  %1340 = add i32 %992, %1199
  %1341 = shl i32 %1015, 25
  %1342 = lshr i32 %1015, 7
  %1343 = or i32 %1341, %1342
  %1344 = shl i32 %1015, 14
  %1345 = lshr i32 %1015, 18
  %1346 = or i32 %1344, %1345
  %1347 = xor i32 %1343, %1346
  %1348 = lshr i32 %1015, 3
  %1349 = xor i32 %1347, %1348
  %1350 = add i32 %1340, %1349
  %1351 = shl i32 %1314, 15
  %1352 = lshr i32 %1314, 17
  %1353 = or i32 %1351, %1352
  %1354 = shl i32 %1314, 13
  %1355 = lshr i32 %1314, 19
  %1356 = or i32 %1354, %1355
  %1357 = xor i32 %1353, %1356
  %1358 = lshr i32 %1314, 10
  %1359 = xor i32 %1357, %1358
  %1360 = add i32 %1350, %1359
  %1361 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1339
  store i32 %1360, i32 addrspace(1)* %1361, align 4
  %1362 = or i64 %121, 63
  %1363 = add i32 %1015, %1222
  %1364 = shl i32 %1038, 25
  %1365 = lshr i32 %1038, 7
  %1366 = or i32 %1364, %1365
  %1367 = shl i32 %1038, 14
  %1368 = lshr i32 %1038, 18
  %1369 = or i32 %1367, %1368
  %1370 = xor i32 %1366, %1369
  %1371 = lshr i32 %1038, 3
  %1372 = xor i32 %1370, %1371
  %1373 = add i32 %1363, %1372
  %1374 = shl i32 %1337, 15
  %1375 = lshr i32 %1337, 17
  %1376 = or i32 %1374, %1375
  %1377 = shl i32 %1337, 13
  %1378 = lshr i32 %1337, 19
  %1379 = or i32 %1377, %1378
  %1380 = xor i32 %1376, %1379
  %1381 = lshr i32 %1337, 10
  %1382 = xor i32 %1380, %1381
  %1383 = add i32 %1373, %1382
  %1384 = getelementptr inbounds i32, i32 addrspace(1)* %2, i64 %1362
  store i32 %1383, i32 addrspace(1)* %1384, align 4
  br label %_Z14kernel_w_blockPhS_PjRKN4sycl3_V17nd_itemILi3EEE.exit

_Z14kernel_w_blockPhS_PjRKN4sycl3_V17nd_itemILi3EEE.exit: ; preds = %3, %.preheader.i.preheader
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #2

; Function Attrs: convergent nounwind readnone
declare spir_func i32 @__builtin_IB_get_num_groups(i32) local_unnamed_addr #3

; Function Attrs: convergent nounwind readnone
declare spir_func i32 @__builtin_IB_get_local_size(i32) local_unnamed_addr #3

; Function Attrs: convergent nounwind readnone
declare spir_func i32 @__builtin_IB_get_group_id(i32) local_unnamed_addr #3

; Function Attrs: convergent nounwind readnone
declare spir_func i32 @__builtin_IB_get_local_id_x() local_unnamed_addr #3

; Function Attrs: convergent nounwind readnone
declare spir_func i32 @__builtin_IB_get_local_id_y() local_unnamed_addr #3

; Function Attrs: convergent nounwind readnone
declare spir_func i32 @__builtin_IB_get_local_id_z() local_unnamed_addr #3

; Function Attrs: convergent nounwind readnone
declare spir_func i32 @__builtin_IB_get_enqueued_local_size(i32) local_unnamed_addr #3

; Function Attrs: convergent nounwind readnone
declare spir_func i32 @__builtin_IB_get_global_offset(i32) local_unnamed_addr #3

; Function Attrs: convergent nounwind readnone
declare spir_func i32 @__builtin_IB_get_global_size(i32) local_unnamed_addr #3

attributes #0 = { nounwind "less-precise-fpmad"="true" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind willreturn }
attributes #3 = { convergent nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!IGCMetadata = !{!0}
!igc.functions = !{!292}
!opencl.ocl.version = !{!312, !312, !312, !312, !312}
!opencl.spir.version = !{!312, !312, !312, !312, !312}
!llvm.ident = !{!313, !313, !313, !313, !313}
!llvm.module.flags = !{!314}

!0 = !{!"ModuleMD", !1, !2, !62, !164, !194, !210, !225, !235, !237, !238, !251, !252, !253, !254, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !272, !276, !277, !278, !279, !280, !281, !282, !131, !283, !284, !285, !287, !290, !291}
!1 = !{!"isPrecise", i1 false}
!2 = !{!"compOpt", !3, !4, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61}
!3 = !{!"DenormsAreZero", i1 false}
!4 = !{!"CorrectlyRoundedDivSqrt", i1 false}
!5 = !{!"OptDisable", i1 false}
!6 = !{!"MadEnable", i1 true}
!7 = !{!"NoSignedZeros", i1 false}
!8 = !{!"NoNaNs", i1 false}
!9 = !{!"FloatRoundingMode", i32 0}
!10 = !{!"FloatCvtIntRoundingMode", i32 3}
!11 = !{!"VISAPreSchedRPThreshold", i32 0}
!12 = !{!"SetLoopUnrollThreshold", i32 0}
!13 = !{!"UnsafeMathOptimizations", i1 false}
!14 = !{!"FiniteMathOnly", i1 false}
!15 = !{!"FastRelaxedMath", i1 false}
!16 = !{!"DashGSpecified", i1 false}
!17 = !{!"FastCompilation", i1 false}
!18 = !{!"UseScratchSpacePrivateMemory", i1 true}
!19 = !{!"RelaxedBuiltins", i1 false}
!20 = !{!"SubgroupIndependentForwardProgressRequired", i1 true}
!21 = !{!"GreaterThan2GBBufferRequired", i1 true}
!22 = !{!"GreaterThan4GBBufferRequired", i1 false}
!23 = !{!"DisableA64WA", i1 false}
!24 = !{!"ForceEnableA64WA", i1 false}
!25 = !{!"PushConstantsEnable", i1 true}
!26 = !{!"HasPositivePointerOffset", i1 false}
!27 = !{!"HasBufferOffsetArg", i1 true}
!28 = !{!"BufferOffsetArgOptional", i1 true}
!29 = !{!"HasSubDWAlignedPtrArg", i1 false}
!30 = !{!"replaceGlobalOffsetsByZero", i1 false}
!31 = !{!"forcePixelShaderSIMDMode", i32 0}
!32 = !{!"pixelShaderDoNotAbortOnSpill", i1 false}
!33 = !{!"UniformWGS", i1 false}
!34 = !{!"disableVertexComponentPacking", i1 false}
!35 = !{!"disablePartialVertexComponentPacking", i1 false}
!36 = !{!"PreferBindlessImages", i1 false}
!37 = !{!"UseBindlessMode", i1 false}
!38 = !{!"UseLegacyBindlessMode", i1 true}
!39 = !{!"disableMathRefactoring", i1 false}
!40 = !{!"atomicBranch", i1 false}
!41 = !{!"ForceInt32DivRemEmu", i1 false}
!42 = !{!"ForceInt32DivRemEmuSP", i1 false}
!43 = !{!"DisableFastestSingleCSSIMD", i1 false}
!44 = !{!"DisableFastestLinearScan", i1 false}
!45 = !{!"UseStatelessforPrivateMemory", i1 false}
!46 = !{!"EnableTakeGlobalAddress", i1 false}
!47 = !{!"IsLibraryCompilation", i1 false}
!48 = !{!"FastVISACompile", i1 false}
!49 = !{!"MatchSinCosPi", i1 false}
!50 = !{!"ExcludeIRFromZEBinary", i1 false}
!51 = !{!"EmitZeBinVISASections", i1 false}
!52 = !{!"FP64GenEmulationEnabled", i1 false}
!53 = !{!"allowDisableRematforCS", i1 false}
!54 = !{!"DisableIncSpillCostAllAddrTaken", i1 false}
!55 = !{!"DisableCPSOmaskWA", i1 false}
!56 = !{!"DisableFastestGopt", i1 false}
!57 = !{!"WaForceHalfPromotion", i1 false}
!58 = !{!"DisableConstantCoalescing", i1 false}
!59 = !{!"EnableUndefAlphaOutputAsRed", i1 true}
!60 = !{!"WaEnableALTModeVisaWA", i1 false}
!61 = !{!"NewSpillCostFunction", i1 false}
!62 = !{!"FuncMD", !63, !64}
!63 = !{!"FuncMDMap[0]", void (i8 addrspace(1)*, i8 addrspace(1)*, i32 addrspace(1)*, <8 x i32>, <8 x i32>, <3 x i32>, <3 x i32>, <3 x i32>, <3 x i32>, i16, i16, i16, i8*, i32, i32, i32)* @_ZTSZ16evaluate_w_blockPhPjRdEUlN4sycl3_V17nd_itemILi3EEEE_}
!64 = !{!"FuncMDValue[0]", !65, !66, !70, !71, !72, !93, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !142, !146, !150, !154, !158, !159, !160}
!65 = !{!"localOffsets"}
!66 = !{!"workGroupWalkOrder", !67, !68, !69}
!67 = !{!"dim0", i32 0}
!68 = !{!"dim1", i32 0}
!69 = !{!"dim2", i32 0}
!70 = !{!"funcArgs"}
!71 = !{!"functionType", !"KernelFunction"}
!72 = !{!"rtInfo", !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !92}
!73 = !{!"callableShaderType", !"NumberOfCallableShaderTypes"}
!74 = !{!"isContinuation", i1 false}
!75 = !{!"hasTraceRayPayload", i1 false}
!76 = !{!"hasHitAttributes", i1 false}
!77 = !{!"hasCallableData", i1 false}
!78 = !{!"ShaderStackSize", i32 0}
!79 = !{!"ShaderHash", i64 0}
!80 = !{!"ShaderName", !""}
!81 = !{!"ParentName", !""}
!82 = !{!"SlotNum", i1* null}
!83 = !{!"NOSSize", i32 0}
!84 = !{!"globalRootSignatureSize", i32 0}
!85 = !{!"Entries"}
!86 = !{!"SpillUnions"}
!87 = !{!"CustomHitAttrSizeInBytes", i32 0}
!88 = !{!"Types", !89, !90, !91}
!89 = !{!"FrameStartTys"}
!90 = !{!"ArgumentTys"}
!91 = !{!"FullFrameTys"}
!92 = !{!"Aliases"}
!93 = !{!"resAllocMD", !94, !95, !96, !97, !122}
!94 = !{!"uavsNumType", i32 4}
!95 = !{!"srvsNumType", i32 0}
!96 = !{!"samplersNumType", i32 0}
!97 = !{!"argAllocMDList", !98, !102, !104, !106, !109, !110, !111, !112, !113, !114, !115, !116, !117, !119, !120, !121}
!98 = !{!"argAllocMDListVec[0]", !99, !100, !101}
!99 = !{!"type", i32 1}
!100 = !{!"extensionType", i32 -1}
!101 = !{!"indexType", i32 0}
!102 = !{!"argAllocMDListVec[1]", !99, !100, !103}
!103 = !{!"indexType", i32 1}
!104 = !{!"argAllocMDListVec[2]", !99, !100, !105}
!105 = !{!"indexType", i32 2}
!106 = !{!"argAllocMDListVec[3]", !107, !100, !108}
!107 = !{!"type", i32 0}
!108 = !{!"indexType", i32 -1}
!109 = !{!"argAllocMDListVec[4]", !107, !100, !108}
!110 = !{!"argAllocMDListVec[5]", !107, !100, !108}
!111 = !{!"argAllocMDListVec[6]", !107, !100, !108}
!112 = !{!"argAllocMDListVec[7]", !107, !100, !108}
!113 = !{!"argAllocMDListVec[8]", !107, !100, !108}
!114 = !{!"argAllocMDListVec[9]", !107, !100, !108}
!115 = !{!"argAllocMDListVec[10]", !107, !100, !108}
!116 = !{!"argAllocMDListVec[11]", !107, !100, !108}
!117 = !{!"argAllocMDListVec[12]", !99, !100, !118}
!118 = !{!"indexType", i32 3}
!119 = !{!"argAllocMDListVec[13]", !107, !100, !108}
!120 = !{!"argAllocMDListVec[14]", !107, !100, !108}
!121 = !{!"argAllocMDListVec[15]", !107, !100, !108}
!122 = !{!"inlineSamplersMD"}
!123 = !{!"maxByteOffsets"}
!124 = !{!"IsInitializer", i1 false}
!125 = !{!"IsFinalizer", i1 false}
!126 = !{!"CompiledSubGroupsNumber", i32 0}
!127 = !{!"hasInlineVmeSamplers", i1 false}
!128 = !{!"localSize", i32 0}
!129 = !{!"localIDPresent", i1 false}
!130 = !{!"groupIDPresent", i1 false}
!131 = !{!"privateMemoryPerWI", i32 0}
!132 = !{!"globalIDPresent", i1 false}
!133 = !{!"hasSyncRTCalls", i1 false}
!134 = !{!"hasNonKernelArgLoad", i1 false}
!135 = !{!"hasNonKernelArgStore", i1 false}
!136 = !{!"hasNonKernelArgAtomic", i1 false}
!137 = !{!"UserAnnotations"}
!138 = !{!"m_OpenCLArgAddressSpaces", !139, !140, !141}
!139 = !{!"m_OpenCLArgAddressSpacesVec[0]", i32 1}
!140 = !{!"m_OpenCLArgAddressSpacesVec[1]", i32 1}
!141 = !{!"m_OpenCLArgAddressSpacesVec[2]", i32 1}
!142 = !{!"m_OpenCLArgAccessQualifiers", !143, !144, !145}
!143 = !{!"m_OpenCLArgAccessQualifiersVec[0]", !"none"}
!144 = !{!"m_OpenCLArgAccessQualifiersVec[1]", !"none"}
!145 = !{!"m_OpenCLArgAccessQualifiersVec[2]", !"none"}
!146 = !{!"m_OpenCLArgTypes", !147, !148, !149}
!147 = !{!"m_OpenCLArgTypesVec[0]", !"char*"}
!148 = !{!"m_OpenCLArgTypesVec[1]", !"char*"}
!149 = !{!"m_OpenCLArgTypesVec[2]", !"int*"}
!150 = !{!"m_OpenCLArgBaseTypes", !151, !152, !153}
!151 = !{!"m_OpenCLArgBaseTypesVec[0]", !"char*"}
!152 = !{!"m_OpenCLArgBaseTypesVec[1]", !"char*"}
!153 = !{!"m_OpenCLArgBaseTypesVec[2]", !"int*"}
!154 = !{!"m_OpenCLArgTypeQualifiers", !155, !156, !157}
!155 = !{!"m_OpenCLArgTypeQualifiersVec[0]", !""}
!156 = !{!"m_OpenCLArgTypeQualifiersVec[1]", !""}
!157 = !{!"m_OpenCLArgTypeQualifiersVec[2]", !""}
!158 = !{!"m_OpenCLArgNames"}
!159 = !{!"m_OpenCLArgScalarAsPointers"}
!160 = !{!"m_OptsToDisablePerFunc", !161, !162, !163}
!161 = !{!"m_OptsToDisablePerFuncSet[0]", !"IGC-AddressArithmeticSinking"}
!162 = !{!"m_OptsToDisablePerFuncSet[1]", !"IGC-AllowSimd32Slicing"}
!163 = !{!"m_OptsToDisablePerFuncSet[2]", !"IGC-SinkLoadOpt"}
!164 = !{!"pushInfo", !165, !166, !167, !170, !171, !172, !173, !174, !175, !176, !177, !190, !191, !192, !193}
!165 = !{!"pushableAddresses"}
!166 = !{!"bindlessPushInfo"}
!167 = !{!"dynamicBufferInfo", !168, !169}
!168 = !{!"firstIndex", i32 0}
!169 = !{!"numOffsets", i32 0}
!170 = !{!"MaxNumberOfPushedBuffers", i32 0}
!171 = !{!"inlineConstantBufferSlot", i32 -1}
!172 = !{!"inlineConstantBufferOffset", i32 -1}
!173 = !{!"inlineConstantBufferGRFOffset", i32 -1}
!174 = !{!"constants"}
!175 = !{!"inputs"}
!176 = !{!"constantReg"}
!177 = !{!"simplePushInfoArr", !178, !187, !188, !189}
!178 = !{!"simplePushInfoArrVec[0]", !179, !180, !181, !182, !183, !184, !185, !186}
!179 = !{!"cbIdx", i32 0}
!180 = !{!"pushableAddressGrfOffset", i32 -1}
!181 = !{!"pushableOffsetGrfOffset", i32 -1}
!182 = !{!"offset", i32 0}
!183 = !{!"size", i32 0}
!184 = !{!"isStateless", i1 false}
!185 = !{!"isBindless", i1 false}
!186 = !{!"simplePushLoads"}
!187 = !{!"simplePushInfoArrVec[1]", !179, !180, !181, !182, !183, !184, !185, !186}
!188 = !{!"simplePushInfoArrVec[2]", !179, !180, !181, !182, !183, !184, !185, !186}
!189 = !{!"simplePushInfoArrVec[3]", !179, !180, !181, !182, !183, !184, !185, !186}
!190 = !{!"simplePushBufferUsed", i32 0}
!191 = !{!"pushAnalysisWIInfos"}
!192 = !{!"inlineRTGlobalPtrOffset", i32 0}
!193 = !{!"rtSyncSurfPtrOffset", i32 0}
!194 = !{!"psInfo", !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209}
!195 = !{!"BlendStateDisabledMask", i8 0}
!196 = !{!"SkipSrc0Alpha", i1 false}
!197 = !{!"DualSourceBlendingDisabled", i1 false}
!198 = !{!"ForceEnableSimd32", i1 false}
!199 = !{!"outputDepth", i1 false}
!200 = !{!"outputStencil", i1 false}
!201 = !{!"outputMask", i1 false}
!202 = !{!"blendToFillEnabled", i1 false}
!203 = !{!"forceEarlyZ", i1 false}
!204 = !{!"hasVersionedLoop", i1 false}
!205 = !{!"forceSingleSourceRTWAfterDualSourceRTW", i1 false}
!206 = !{!"NumSamples", i8 0}
!207 = !{!"blendOptimizationMode"}
!208 = !{!"colorOutputMask"}
!209 = !{!"WaDisableVRS", i1 false}
!210 = !{!"csInfo", !211, !212, !213, !214, !215, !11, !12, !216, !217, !218, !219, !220, !221, !222, !223, !40, !224}
!211 = !{!"maxWorkGroupSize", i32 0}
!212 = !{!"waveSize", i32 0}
!213 = !{!"ComputeShaderSecondCompile"}
!214 = !{!"forcedSIMDSize", i8 0}
!215 = !{!"forceTotalGRFNum", i32 0}
!216 = !{!"allowLowerSimd", i1 false}
!217 = !{!"disableSimd32Slicing", i1 false}
!218 = !{!"disableSplitOnSpill", i1 false}
!219 = !{!"forcedVISAPreRAScheduler", i1 false}
!220 = !{!"disableLocalIdOrderOptimizations", i1 false}
!221 = !{!"disableDispatchAlongY", i1 false}
!222 = !{!"neededThreadIdLayout", i1* null}
!223 = !{!"forceTileYWalk", i1 false}
!224 = !{!"ResForHfPacking"}
!225 = !{!"msInfo", !226, !227, !228, !229, !230, !231, !232, !233, !234}
!226 = !{!"PrimitiveTopology", i32 3}
!227 = !{!"MaxNumOfPrimitives", i32 0}
!228 = !{!"MaxNumOfVertices", i32 0}
!229 = !{!"MaxNumOfPerPrimitiveOutputs", i32 0}
!230 = !{!"MaxNumOfPerVertexOutputs", i32 0}
!231 = !{!"WorkGroupSize", i32 0}
!232 = !{!"WorkGroupMemorySizeInBytes", i32 0}
!233 = !{!"IndexFormat", i32 6}
!234 = !{!"SubgroupSize", i32 0}
!235 = !{!"taskInfo", !236, !231, !232, !234}
!236 = !{!"MaxNumOfOutputs", i32 0}
!237 = !{!"NBarrierCnt", i32 0}
!238 = !{!"rtInfo", !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250}
!239 = !{!"RayQueryAllocSizeInBytes", i32 0}
!240 = !{!"NumContinuations", i32 0}
!241 = !{!"RTAsyncStackAddrspace", i32 -1}
!242 = !{!"RTAsyncStackSurfaceStateOffset", i1* null}
!243 = !{!"SWHotZoneAddrspace", i32 -1}
!244 = !{!"SWHotZoneSurfaceStateOffset", i1* null}
!245 = !{!"SWStackAddrspace", i32 -1}
!246 = !{!"SWStackSurfaceStateOffset", i1* null}
!247 = !{!"RTSyncStackAddrspace", i32 -1}
!248 = !{!"RTSyncStackSurfaceStateOffset", i1* null}
!249 = !{!"doSyncDispatchRays", i1 false}
!250 = !{!"MemStyle", !"Xe"}
!251 = !{!"CurUniqueIndirectIdx", i32 0}
!252 = !{!"inlineDynTextures"}
!253 = !{!"inlineResInfoData"}
!254 = !{!"immConstant", !255, !256, !257}
!255 = !{!"data"}
!256 = !{!"sizes"}
!257 = !{!"zeroIdxs"}
!258 = !{!"stringConstants"}
!259 = !{!"inlineConstantBuffers"}
!260 = !{!"inlineGlobalBuffers"}
!261 = !{!"GlobalPointerProgramBinaryInfos"}
!262 = !{!"ConstantPointerProgramBinaryInfos"}
!263 = !{!"GlobalBufferAddressRelocInfo"}
!264 = !{!"ConstantBufferAddressRelocInfo"}
!265 = !{!"forceLscCacheList"}
!266 = !{!"SrvMap"}
!267 = !{!"RasterizerOrderedByteAddressBuffer"}
!268 = !{!"MinNOSPushConstantSize", i32 0}
!269 = !{!"inlineProgramScopeOffsets"}
!270 = !{!"shaderData", !271}
!271 = !{!"numReplicas", i32 0}
!272 = !{!"URBInfo", !273, !274, !275}
!273 = !{!"has64BVertexHeaderInput", i1 false}
!274 = !{!"has64BVertexHeaderOutput", i1 false}
!275 = !{!"hasVertexHeader", i1 true}
!276 = !{!"UseBindlessImage", i1 false}
!277 = !{!"enableRangeReduce", i1 false}
!278 = !{!"allowMatchMadOptimizationforVS", i1 false}
!279 = !{!"disableMemOptforNegativeOffsetLoads", i1 false}
!280 = !{!"enableThreeWayLoadSpiltOpt", i1 false}
!281 = !{!"statefulResourcesNotAliased", i1 false}
!282 = !{!"disableMixMode", i1 false}
!283 = !{!"PrivateMemoryPerFG"}
!284 = !{!"m_OptsToDisable"}
!285 = !{!"capabilities", !286}
!286 = !{!"globalVariableDecorationsINTEL", i1 false}
!287 = !{!"m_ShaderResourceViewMcsMask", !288, !289}
!288 = !{!"m_ShaderResourceViewMcsMaskVec[0]", i64 0}
!289 = !{!"m_ShaderResourceViewMcsMaskVec[1]", i64 0}
!290 = !{!"computedDepthMode", i32 0}
!291 = !{!"isHDCFastClearShader", i1 false}
!292 = !{void (i8 addrspace(1)*, i8 addrspace(1)*, i32 addrspace(1)*, <8 x i32>, <8 x i32>, <3 x i32>, <3 x i32>, <3 x i32>, <3 x i32>, i16, i16, i16, i8*, i32, i32, i32)* @_ZTSZ16evaluate_w_blockPhPjRdEUlN4sycl3_V17nd_itemILi3EEEE_, !293}
!293 = !{!294, !295}
!294 = !{!"function_type", i32 0}
!295 = !{!"implicit_arg_desc", !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !308, !310}
!296 = !{i32 0}
!297 = !{i32 1}
!298 = !{i32 3}
!299 = !{i32 4}
!300 = !{i32 5}
!301 = !{i32 6}
!302 = !{i32 7}
!303 = !{i32 8}
!304 = !{i32 9}
!305 = !{i32 12}
!306 = !{i32 14, !307}
!307 = !{!"explicit_arg_num", i32 0}
!308 = !{i32 14, !309}
!309 = !{!"explicit_arg_num", i32 1}
!310 = !{i32 14, !311}
!311 = !{!"explicit_arg_num", i32 2}
!312 = !{i32 2, i32 0}
!313 = !{!"clang version 11.1.0"}
!314 = !{i32 1, !"wchar_size", i32 4}
